# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SectorIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'redirect_uris': 'list[str]',
        'client_ids': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'redirect_uris': 'redirectUris',
        'client_ids': 'clientIds'
    }

    def __init__(self, id=None, description=None, redirect_uris=None, client_ids=None):  # noqa: E501
        """SectorIdentifier - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._redirect_uris = None
        self._client_ids = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if redirect_uris is not None:
            self.redirect_uris = redirect_uris
        if client_ids is not None:
            self.client_ids = client_ids

    @property
    def id(self):
        """Gets the id of this SectorIdentifier.  # noqa: E501

        XRI i-number. Sector Identifier to uniquely identify the sector.  # noqa: E501

        :return: The id of this SectorIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SectorIdentifier.

        XRI i-number. Sector Identifier to uniquely identify the sector.  # noqa: E501

        :param id: The id of this SectorIdentifier.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this SectorIdentifier.  # noqa: E501

        A human-readable string describing the sector.  # noqa: E501

        :return: The description of this SectorIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SectorIdentifier.

        A human-readable string describing the sector.  # noqa: E501

        :param description: The description of this SectorIdentifier.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this SectorIdentifier.  # noqa: E501

        Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request  # noqa: E501

        :return: The redirect_uris of this SectorIdentifier.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this SectorIdentifier.

        Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request  # noqa: E501

        :param redirect_uris: The redirect_uris of this SectorIdentifier.  # noqa: E501
        :type: list[str]
        """

        self._redirect_uris = redirect_uris

    @property
    def client_ids(self):
        """Gets the client_ids of this SectorIdentifier.  # noqa: E501

        List of OAuth 2.0 Client Identifier valid at the Authorization Server.  # noqa: E501

        :return: The client_ids of this SectorIdentifier.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_ids

    @client_ids.setter
    def client_ids(self, client_ids):
        """Sets the client_ids of this SectorIdentifier.

        List of OAuth 2.0 Client Identifier valid at the Authorization Server.  # noqa: E501

        :param client_ids: The client_ids of this SectorIdentifier.  # noqa: E501
        :type: list[str]
        """

        self._client_ids = client_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SectorIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectorIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
