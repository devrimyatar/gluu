# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppConfigurationAuthenticationProtectionConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attempt_expiration': 'int',
        'maximum_allowed_attempts_without_delay': 'int',
        'delay_time': 'int',
        'brute_force_protection_enabled': 'bool'
    }

    attribute_map = {
        'attempt_expiration': 'attemptExpiration',
        'maximum_allowed_attempts_without_delay': 'maximumAllowedAttemptsWithoutDelay',
        'delay_time': 'delayTime',
        'brute_force_protection_enabled': 'bruteForceProtectionEnabled'
    }

    def __init__(self, attempt_expiration=None, maximum_allowed_attempts_without_delay=None, delay_time=None, brute_force_protection_enabled=None):  # noqa: E501
        """AppConfigurationAuthenticationProtectionConfiguration - a model defined in Swagger"""  # noqa: E501
        self._attempt_expiration = None
        self._maximum_allowed_attempts_without_delay = None
        self._delay_time = None
        self._brute_force_protection_enabled = None
        self.discriminator = None
        if attempt_expiration is not None:
            self.attempt_expiration = attempt_expiration
        if maximum_allowed_attempts_without_delay is not None:
            self.maximum_allowed_attempts_without_delay = maximum_allowed_attempts_without_delay
        if delay_time is not None:
            self.delay_time = delay_time
        if brute_force_protection_enabled is not None:
            self.brute_force_protection_enabled = brute_force_protection_enabled

    @property
    def attempt_expiration(self):
        """Gets the attempt_expiration of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501


        :return: The attempt_expiration of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._attempt_expiration

    @attempt_expiration.setter
    def attempt_expiration(self, attempt_expiration):
        """Sets the attempt_expiration of this AppConfigurationAuthenticationProtectionConfiguration.


        :param attempt_expiration: The attempt_expiration of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501
        :type: int
        """

        self._attempt_expiration = attempt_expiration

    @property
    def maximum_allowed_attempts_without_delay(self):
        """Gets the maximum_allowed_attempts_without_delay of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501


        :return: The maximum_allowed_attempts_without_delay of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._maximum_allowed_attempts_without_delay

    @maximum_allowed_attempts_without_delay.setter
    def maximum_allowed_attempts_without_delay(self, maximum_allowed_attempts_without_delay):
        """Sets the maximum_allowed_attempts_without_delay of this AppConfigurationAuthenticationProtectionConfiguration.


        :param maximum_allowed_attempts_without_delay: The maximum_allowed_attempts_without_delay of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501
        :type: int
        """

        self._maximum_allowed_attempts_without_delay = maximum_allowed_attempts_without_delay

    @property
    def delay_time(self):
        """Gets the delay_time of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501


        :return: The delay_time of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._delay_time

    @delay_time.setter
    def delay_time(self, delay_time):
        """Sets the delay_time of this AppConfigurationAuthenticationProtectionConfiguration.


        :param delay_time: The delay_time of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501
        :type: int
        """

        self._delay_time = delay_time

    @property
    def brute_force_protection_enabled(self):
        """Gets the brute_force_protection_enabled of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501


        :return: The brute_force_protection_enabled of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._brute_force_protection_enabled

    @brute_force_protection_enabled.setter
    def brute_force_protection_enabled(self, brute_force_protection_enabled):
        """Sets the brute_force_protection_enabled of this AppConfigurationAuthenticationProtectionConfiguration.


        :param brute_force_protection_enabled: The brute_force_protection_enabled of this AppConfigurationAuthenticationProtectionConfiguration.  # noqa: E501
        :type: bool
        """

        self._brute_force_protection_enabled = brute_force_protection_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppConfigurationAuthenticationProtectionConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppConfigurationAuthenticationProtectionConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
