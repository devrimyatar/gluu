# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CacheConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cache_provider_type': 'str',
        'memcached_configuration': 'MemcachedConfiguration',
        'redis_configuration': 'RedisConfiguration',
        'in_memory_configuration': 'InMemoryConfiguration',
        'native_persistence_configuration': 'NativePersistenceConfiguration'
    }

    attribute_map = {
        'cache_provider_type': 'cacheProviderType',
        'memcached_configuration': 'memcachedConfiguration',
        'redis_configuration': 'redisConfiguration',
        'in_memory_configuration': 'inMemoryConfiguration',
        'native_persistence_configuration': 'nativePersistenceConfiguration'
    }

    def __init__(self, cache_provider_type=None, memcached_configuration=None, redis_configuration=None, in_memory_configuration=None, native_persistence_configuration=None):  # noqa: E501
        """CacheConfiguration - a model defined in Swagger"""  # noqa: E501
        self._cache_provider_type = None
        self._memcached_configuration = None
        self._redis_configuration = None
        self._in_memory_configuration = None
        self._native_persistence_configuration = None
        self.discriminator = None
        if cache_provider_type is not None:
            self.cache_provider_type = cache_provider_type
        if memcached_configuration is not None:
            self.memcached_configuration = memcached_configuration
        if redis_configuration is not None:
            self.redis_configuration = redis_configuration
        if in_memory_configuration is not None:
            self.in_memory_configuration = in_memory_configuration
        if native_persistence_configuration is not None:
            self.native_persistence_configuration = native_persistence_configuration

    @property
    def cache_provider_type(self):
        """Gets the cache_provider_type of this CacheConfiguration.  # noqa: E501

        The cache Provider Type.  # noqa: E501

        :return: The cache_provider_type of this CacheConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cache_provider_type

    @cache_provider_type.setter
    def cache_provider_type(self, cache_provider_type):
        """Sets the cache_provider_type of this CacheConfiguration.

        The cache Provider Type.  # noqa: E501

        :param cache_provider_type: The cache_provider_type of this CacheConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_MEMORY", "MEMCACHED", "REDIS", "NATIVE_PERSISTENCE"]  # noqa: E501
        if cache_provider_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cache_provider_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cache_provider_type, allowed_values)
            )

        self._cache_provider_type = cache_provider_type

    @property
    def memcached_configuration(self):
        """Gets the memcached_configuration of this CacheConfiguration.  # noqa: E501


        :return: The memcached_configuration of this CacheConfiguration.  # noqa: E501
        :rtype: MemcachedConfiguration
        """
        return self._memcached_configuration

    @memcached_configuration.setter
    def memcached_configuration(self, memcached_configuration):
        """Sets the memcached_configuration of this CacheConfiguration.


        :param memcached_configuration: The memcached_configuration of this CacheConfiguration.  # noqa: E501
        :type: MemcachedConfiguration
        """

        self._memcached_configuration = memcached_configuration

    @property
    def redis_configuration(self):
        """Gets the redis_configuration of this CacheConfiguration.  # noqa: E501


        :return: The redis_configuration of this CacheConfiguration.  # noqa: E501
        :rtype: RedisConfiguration
        """
        return self._redis_configuration

    @redis_configuration.setter
    def redis_configuration(self, redis_configuration):
        """Sets the redis_configuration of this CacheConfiguration.


        :param redis_configuration: The redis_configuration of this CacheConfiguration.  # noqa: E501
        :type: RedisConfiguration
        """

        self._redis_configuration = redis_configuration

    @property
    def in_memory_configuration(self):
        """Gets the in_memory_configuration of this CacheConfiguration.  # noqa: E501


        :return: The in_memory_configuration of this CacheConfiguration.  # noqa: E501
        :rtype: InMemoryConfiguration
        """
        return self._in_memory_configuration

    @in_memory_configuration.setter
    def in_memory_configuration(self, in_memory_configuration):
        """Sets the in_memory_configuration of this CacheConfiguration.


        :param in_memory_configuration: The in_memory_configuration of this CacheConfiguration.  # noqa: E501
        :type: InMemoryConfiguration
        """

        self._in_memory_configuration = in_memory_configuration

    @property
    def native_persistence_configuration(self):
        """Gets the native_persistence_configuration of this CacheConfiguration.  # noqa: E501


        :return: The native_persistence_configuration of this CacheConfiguration.  # noqa: E501
        :rtype: NativePersistenceConfiguration
        """
        return self._native_persistence_configuration

    @native_persistence_configuration.setter
    def native_persistence_configuration(self, native_persistence_configuration):
        """Sets the native_persistence_configuration of this CacheConfiguration.


        :param native_persistence_configuration: The native_persistence_configuration of this CacheConfiguration.  # noqa: E501
        :type: NativePersistenceConfiguration
        """

        self._native_persistence_configuration = native_persistence_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CacheConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CacheConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
