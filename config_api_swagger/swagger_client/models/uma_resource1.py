# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UMAResource1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'icon_url': 'str',
        'scopes': 'list[str]',
        'scope_expression': 'list[str]',
        'clients': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'icon_url': 'iconUrl',
        'scopes': 'scopes',
        'scope_expression': 'scopeExpression',
        'clients': 'clients'
    }

    def __init__(self, id=None, name=None, icon_url=None, scopes=None, scope_expression=None, clients=None):  # noqa: E501
        """UMAResource1 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._icon_url = None
        self._scopes = None
        self._scope_expression = None
        self._clients = None
        self.discriminator = None
        self.id = id
        self.name = name
        if icon_url is not None:
            self.icon_url = icon_url
        if scopes is not None:
            self.scopes = scopes
        if scope_expression is not None:
            self.scope_expression = scope_expression
        if clients is not None:
            self.clients = clients

    @property
    def id(self):
        """Gets the id of this UMAResource1.  # noqa: E501

        Resource id.  # noqa: E501

        :return: The id of this UMAResource1.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UMAResource1.

        Resource id.  # noqa: E501

        :param id: The id of this UMAResource1.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this UMAResource1.  # noqa: E501

        A human-readable name of the scope.  # noqa: E501

        :return: The name of this UMAResource1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UMAResource1.

        A human-readable name of the scope.  # noqa: E501

        :param name: The name of this UMAResource1.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def icon_url(self):
        """Gets the icon_url of this UMAResource1.  # noqa: E501

        A URL for a graphic icon representing the resource.  # noqa: E501

        :return: The icon_url of this UMAResource1.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this UMAResource1.

        A URL for a graphic icon representing the resource.  # noqa: E501

        :param icon_url: The icon_url of this UMAResource1.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def scopes(self):
        """Gets the scopes of this UMAResource1.  # noqa: E501

        Applicable resource scopes.  # noqa: E501

        :return: The scopes of this UMAResource1.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this UMAResource1.

        Applicable resource scopes.  # noqa: E501

        :param scopes: The scopes of this UMAResource1.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def scope_expression(self):
        """Gets the scope_expression of this UMAResource1.  # noqa: E501

        List of resource scope expression.  # noqa: E501

        :return: The scope_expression of this UMAResource1.  # noqa: E501
        :rtype: list[str]
        """
        return self._scope_expression

    @scope_expression.setter
    def scope_expression(self, scope_expression):
        """Sets the scope_expression of this UMAResource1.

        List of resource scope expression.  # noqa: E501

        :param scope_expression: The scope_expression of this UMAResource1.  # noqa: E501
        :type: list[str]
        """

        self._scope_expression = scope_expression

    @property
    def clients(self):
        """Gets the clients of this UMAResource1.  # noqa: E501

        List of associated clients.  # noqa: E501

        :return: The clients of this UMAResource1.  # noqa: E501
        :rtype: list[str]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this UMAResource1.

        List of associated clients.  # noqa: E501

        :param clients: The clients of this UMAResource1.  # noqa: E501
        :type: list[str]
        """

        self._clients = clients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UMAResource1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UMAResource1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
