# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RedisConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'redis_provider_type': 'str',
        'servers': 'str',
        'password': 'str',
        'default_put_expiration': 'int',
        'sentinel_master_group_name': 'str',
        'use_ssl': 'bool',
        'ssl_trust_store_file_path': 'str',
        'max_idle_connections': 'int',
        'max_total_connections': 'int',
        'connection_timeout': 'int',
        'so_timeout': 'int',
        'max_retry_attempts': 'int'
    }

    attribute_map = {
        'redis_provider_type': 'redisProviderType',
        'servers': 'servers',
        'password': 'password',
        'default_put_expiration': 'defaultPutExpiration',
        'sentinel_master_group_name': 'sentinelMasterGroupName',
        'use_ssl': 'useSSL',
        'ssl_trust_store_file_path': 'sslTrustStoreFilePath',
        'max_idle_connections': 'maxIdleConnections',
        'max_total_connections': 'maxTotalConnections',
        'connection_timeout': 'connectionTimeout',
        'so_timeout': 'soTimeout',
        'max_retry_attempts': 'maxRetryAttempts'
    }

    def __init__(self, redis_provider_type=None, servers=None, password=None, default_put_expiration=None, sentinel_master_group_name=None, use_ssl=None, ssl_trust_store_file_path=None, max_idle_connections=None, max_total_connections=None, connection_timeout=None, so_timeout=None, max_retry_attempts=None):  # noqa: E501
        """RedisConfiguration - a model defined in Swagger"""  # noqa: E501
        self._redis_provider_type = None
        self._servers = None
        self._password = None
        self._default_put_expiration = None
        self._sentinel_master_group_name = None
        self._use_ssl = None
        self._ssl_trust_store_file_path = None
        self._max_idle_connections = None
        self._max_total_connections = None
        self._connection_timeout = None
        self._so_timeout = None
        self._max_retry_attempts = None
        self.discriminator = None
        if redis_provider_type is not None:
            self.redis_provider_type = redis_provider_type
        if servers is not None:
            self.servers = servers
        if password is not None:
            self.password = password
        if default_put_expiration is not None:
            self.default_put_expiration = default_put_expiration
        if sentinel_master_group_name is not None:
            self.sentinel_master_group_name = sentinel_master_group_name
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if ssl_trust_store_file_path is not None:
            self.ssl_trust_store_file_path = ssl_trust_store_file_path
        if max_idle_connections is not None:
            self.max_idle_connections = max_idle_connections
        if max_total_connections is not None:
            self.max_total_connections = max_total_connections
        if connection_timeout is not None:
            self.connection_timeout = connection_timeout
        if so_timeout is not None:
            self.so_timeout = so_timeout
        if max_retry_attempts is not None:
            self.max_retry_attempts = max_retry_attempts

    @property
    def redis_provider_type(self):
        """Gets the redis_provider_type of this RedisConfiguration.  # noqa: E501

        Type of connection.  # noqa: E501

        :return: The redis_provider_type of this RedisConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._redis_provider_type

    @redis_provider_type.setter
    def redis_provider_type(self, redis_provider_type):
        """Sets the redis_provider_type of this RedisConfiguration.

        Type of connection.  # noqa: E501

        :param redis_provider_type: The redis_provider_type of this RedisConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["STANDALONE", "CLUSTER", "SHARDED", "SENTINEL"]  # noqa: E501
        if redis_provider_type not in allowed_values:
            raise ValueError(
                "Invalid value for `redis_provider_type` ({0}), must be one of {1}"  # noqa: E501
                .format(redis_provider_type, allowed_values)
            )

        self._redis_provider_type = redis_provider_type

    @property
    def servers(self):
        """Gets the servers of this RedisConfiguration.  # noqa: E501

        server details separated by comma e.g. 'server1:8080server2:8081'.  # noqa: E501

        :return: The servers of this RedisConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this RedisConfiguration.

        server details separated by comma e.g. 'server1:8080server2:8081'.  # noqa: E501

        :param servers: The servers of this RedisConfiguration.  # noqa: E501
        :type: str
        """

        self._servers = servers

    @property
    def password(self):
        """Gets the password of this RedisConfiguration.  # noqa: E501

        Redis password.  # noqa: E501

        :return: The password of this RedisConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RedisConfiguration.

        Redis password.  # noqa: E501

        :param password: The password of this RedisConfiguration.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def default_put_expiration(self):
        """Gets the default_put_expiration of this RedisConfiguration.  # noqa: E501

        defaultPutExpiration timeout value.  # noqa: E501

        :return: The default_put_expiration of this RedisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._default_put_expiration

    @default_put_expiration.setter
    def default_put_expiration(self, default_put_expiration):
        """Sets the default_put_expiration of this RedisConfiguration.

        defaultPutExpiration timeout value.  # noqa: E501

        :param default_put_expiration: The default_put_expiration of this RedisConfiguration.  # noqa: E501
        :type: int
        """

        self._default_put_expiration = default_put_expiration

    @property
    def sentinel_master_group_name(self):
        """Gets the sentinel_master_group_name of this RedisConfiguration.  # noqa: E501

        Sentinel Master Group Name (required if SENTINEL type of connection is selected).  # noqa: E501

        :return: The sentinel_master_group_name of this RedisConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._sentinel_master_group_name

    @sentinel_master_group_name.setter
    def sentinel_master_group_name(self, sentinel_master_group_name):
        """Sets the sentinel_master_group_name of this RedisConfiguration.

        Sentinel Master Group Name (required if SENTINEL type of connection is selected).  # noqa: E501

        :param sentinel_master_group_name: The sentinel_master_group_name of this RedisConfiguration.  # noqa: E501
        :type: str
        """

        self._sentinel_master_group_name = sentinel_master_group_name

    @property
    def use_ssl(self):
        """Gets the use_ssl of this RedisConfiguration.  # noqa: E501

        Enable SSL communication between Gluu Server and Redis cache.  # noqa: E501

        :return: The use_ssl of this RedisConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this RedisConfiguration.

        Enable SSL communication between Gluu Server and Redis cache.  # noqa: E501

        :param use_ssl: The use_ssl of this RedisConfiguration.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def ssl_trust_store_file_path(self):
        """Gets the ssl_trust_store_file_path of this RedisConfiguration.  # noqa: E501

        Directory Path to Trust Store.  # noqa: E501

        :return: The ssl_trust_store_file_path of this RedisConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ssl_trust_store_file_path

    @ssl_trust_store_file_path.setter
    def ssl_trust_store_file_path(self, ssl_trust_store_file_path):
        """Sets the ssl_trust_store_file_path of this RedisConfiguration.

        Directory Path to Trust Store.  # noqa: E501

        :param ssl_trust_store_file_path: The ssl_trust_store_file_path of this RedisConfiguration.  # noqa: E501
        :type: str
        """

        self._ssl_trust_store_file_path = ssl_trust_store_file_path

    @property
    def max_idle_connections(self):
        """Gets the max_idle_connections of this RedisConfiguration.  # noqa: E501

        The cap on the number of \\idle\\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point.  # noqa: E501

        :return: The max_idle_connections of this RedisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_idle_connections

    @max_idle_connections.setter
    def max_idle_connections(self, max_idle_connections):
        """Sets the max_idle_connections of this RedisConfiguration.

        The cap on the number of \\idle\\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point.  # noqa: E501

        :param max_idle_connections: The max_idle_connections of this RedisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_idle_connections = max_idle_connections

    @property
    def max_total_connections(self):
        """Gets the max_total_connections of this RedisConfiguration.  # noqa: E501

        The number of maximum connection instances in the pool.  # noqa: E501

        :return: The max_total_connections of this RedisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_total_connections

    @max_total_connections.setter
    def max_total_connections(self, max_total_connections):
        """Sets the max_total_connections of this RedisConfiguration.

        The number of maximum connection instances in the pool.  # noqa: E501

        :param max_total_connections: The max_total_connections of this RedisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_total_connections = max_total_connections

    @property
    def connection_timeout(self):
        """Gets the connection_timeout of this RedisConfiguration.  # noqa: E501

        Connection time out.  # noqa: E501

        :return: The connection_timeout of this RedisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._connection_timeout

    @connection_timeout.setter
    def connection_timeout(self, connection_timeout):
        """Sets the connection_timeout of this RedisConfiguration.

        Connection time out.  # noqa: E501

        :param connection_timeout: The connection_timeout of this RedisConfiguration.  # noqa: E501
        :type: int
        """

        self._connection_timeout = connection_timeout

    @property
    def so_timeout(self):
        """Gets the so_timeout of this RedisConfiguration.  # noqa: E501

        With this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.  # noqa: E501

        :return: The so_timeout of this RedisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._so_timeout

    @so_timeout.setter
    def so_timeout(self, so_timeout):
        """Sets the so_timeout of this RedisConfiguration.

        With this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.  # noqa: E501

        :param so_timeout: The so_timeout of this RedisConfiguration.  # noqa: E501
        :type: int
        """

        self._so_timeout = so_timeout

    @property
    def max_retry_attempts(self):
        """Gets the max_retry_attempts of this RedisConfiguration.  # noqa: E501

        Maximum retry attempts in case of failure.  # noqa: E501

        :return: The max_retry_attempts of this RedisConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_retry_attempts

    @max_retry_attempts.setter
    def max_retry_attempts(self, max_retry_attempts):
        """Sets the max_retry_attempts of this RedisConfiguration.

        Maximum retry attempts in case of failure.  # noqa: E501

        :param max_retry_attempts: The max_retry_attempts of this RedisConfiguration.  # noqa: E501
        :type: int
        """

        self._max_retry_attempts = max_retry_attempts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RedisConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedisConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
