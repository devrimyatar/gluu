# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScopeAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'spontaneous_client_id': 'str',
        'spontaneous_client_scopes': 'list[str]',
        'show_in_configuration_endpoint': 'bool'
    }

    attribute_map = {
        'spontaneous_client_id': 'spontaneousClientId',
        'spontaneous_client_scopes': 'spontaneousClientScopes',
        'show_in_configuration_endpoint': 'showInConfigurationEndpoint'
    }

    def __init__(self, spontaneous_client_id=None, spontaneous_client_scopes=None, show_in_configuration_endpoint=None):  # noqa: E501
        """ScopeAttributes - a model defined in Swagger"""  # noqa: E501
        self._spontaneous_client_id = None
        self._spontaneous_client_scopes = None
        self._show_in_configuration_endpoint = None
        self.discriminator = None
        if spontaneous_client_id is not None:
            self.spontaneous_client_id = spontaneous_client_id
        if spontaneous_client_scopes is not None:
            self.spontaneous_client_scopes = spontaneous_client_scopes
        if show_in_configuration_endpoint is not None:
            self.show_in_configuration_endpoint = show_in_configuration_endpoint

    @property
    def spontaneous_client_id(self):
        """Gets the spontaneous_client_id of this ScopeAttributes.  # noqa: E501


        :return: The spontaneous_client_id of this ScopeAttributes.  # noqa: E501
        :rtype: str
        """
        return self._spontaneous_client_id

    @spontaneous_client_id.setter
    def spontaneous_client_id(self, spontaneous_client_id):
        """Sets the spontaneous_client_id of this ScopeAttributes.


        :param spontaneous_client_id: The spontaneous_client_id of this ScopeAttributes.  # noqa: E501
        :type: str
        """

        self._spontaneous_client_id = spontaneous_client_id

    @property
    def spontaneous_client_scopes(self):
        """Gets the spontaneous_client_scopes of this ScopeAttributes.  # noqa: E501


        :return: The spontaneous_client_scopes of this ScopeAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._spontaneous_client_scopes

    @spontaneous_client_scopes.setter
    def spontaneous_client_scopes(self, spontaneous_client_scopes):
        """Sets the spontaneous_client_scopes of this ScopeAttributes.


        :param spontaneous_client_scopes: The spontaneous_client_scopes of this ScopeAttributes.  # noqa: E501
        :type: list[str]
        """

        self._spontaneous_client_scopes = spontaneous_client_scopes

    @property
    def show_in_configuration_endpoint(self):
        """Gets the show_in_configuration_endpoint of this ScopeAttributes.  # noqa: E501


        :return: The show_in_configuration_endpoint of this ScopeAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_configuration_endpoint

    @show_in_configuration_endpoint.setter
    def show_in_configuration_endpoint(self, show_in_configuration_endpoint):
        """Sets the show_in_configuration_endpoint of this ScopeAttributes.


        :param show_in_configuration_endpoint: The show_in_configuration_endpoint of this ScopeAttributes.  # noqa: E501
        :type: bool
        """

        self._show_in_configuration_endpoint = show_in_configuration_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScopeAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScopeAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
