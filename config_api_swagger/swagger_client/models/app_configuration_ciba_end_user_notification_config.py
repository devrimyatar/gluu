# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppConfigurationCibaEndUserNotificationConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'auth_domain': 'str',
        'database_url': 'str',
        'project_id': 'str',
        'storage_bucket': 'str',
        'messaging_sender_id': 'str',
        'app_id': 'str',
        'notification_url': 'str',
        'notification_key': 'str',
        'public_vapid_key': 'str'
    }

    attribute_map = {
        'api_key': 'apiKey',
        'auth_domain': 'authDomain',
        'database_url': 'databaseURL',
        'project_id': 'projectId',
        'storage_bucket': 'storageBucket',
        'messaging_sender_id': 'messagingSenderId',
        'app_id': 'appId',
        'notification_url': 'notificationUrl',
        'notification_key': 'notificationKey',
        'public_vapid_key': 'publicVapidKey'
    }

    def __init__(self, api_key=None, auth_domain=None, database_url=None, project_id=None, storage_bucket=None, messaging_sender_id=None, app_id=None, notification_url=None, notification_key=None, public_vapid_key=None):  # noqa: E501
        """AppConfigurationCibaEndUserNotificationConfig - a model defined in Swagger"""  # noqa: E501
        self._api_key = None
        self._auth_domain = None
        self._database_url = None
        self._project_id = None
        self._storage_bucket = None
        self._messaging_sender_id = None
        self._app_id = None
        self._notification_url = None
        self._notification_key = None
        self._public_vapid_key = None
        self.discriminator = None
        self.api_key = api_key
        self.auth_domain = auth_domain
        self.database_url = database_url
        self.project_id = project_id
        self.storage_bucket = storage_bucket
        self.messaging_sender_id = messaging_sender_id
        self.app_id = app_id
        self.notification_url = notification_url
        self.notification_key = notification_key
        self.public_vapid_key = public_vapid_key

    @property
    def api_key(self):
        """Gets the api_key of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The api_key of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this AppConfigurationCibaEndUserNotificationConfig.


        :param api_key: The api_key of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")  # noqa: E501

        self._api_key = api_key

    @property
    def auth_domain(self):
        """Gets the auth_domain of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The auth_domain of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._auth_domain

    @auth_domain.setter
    def auth_domain(self, auth_domain):
        """Sets the auth_domain of this AppConfigurationCibaEndUserNotificationConfig.


        :param auth_domain: The auth_domain of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if auth_domain is None:
            raise ValueError("Invalid value for `auth_domain`, must not be `None`")  # noqa: E501

        self._auth_domain = auth_domain

    @property
    def database_url(self):
        """Gets the database_url of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The database_url of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._database_url

    @database_url.setter
    def database_url(self, database_url):
        """Sets the database_url of this AppConfigurationCibaEndUserNotificationConfig.


        :param database_url: The database_url of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if database_url is None:
            raise ValueError("Invalid value for `database_url`, must not be `None`")  # noqa: E501

        self._database_url = database_url

    @property
    def project_id(self):
        """Gets the project_id of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The project_id of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AppConfigurationCibaEndUserNotificationConfig.


        :param project_id: The project_id of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def storage_bucket(self):
        """Gets the storage_bucket of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The storage_bucket of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._storage_bucket

    @storage_bucket.setter
    def storage_bucket(self, storage_bucket):
        """Sets the storage_bucket of this AppConfigurationCibaEndUserNotificationConfig.


        :param storage_bucket: The storage_bucket of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if storage_bucket is None:
            raise ValueError("Invalid value for `storage_bucket`, must not be `None`")  # noqa: E501

        self._storage_bucket = storage_bucket

    @property
    def messaging_sender_id(self):
        """Gets the messaging_sender_id of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The messaging_sender_id of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._messaging_sender_id

    @messaging_sender_id.setter
    def messaging_sender_id(self, messaging_sender_id):
        """Sets the messaging_sender_id of this AppConfigurationCibaEndUserNotificationConfig.


        :param messaging_sender_id: The messaging_sender_id of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if messaging_sender_id is None:
            raise ValueError("Invalid value for `messaging_sender_id`, must not be `None`")  # noqa: E501

        self._messaging_sender_id = messaging_sender_id

    @property
    def app_id(self):
        """Gets the app_id of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The app_id of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppConfigurationCibaEndUserNotificationConfig.


        :param app_id: The app_id of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def notification_url(self):
        """Gets the notification_url of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The notification_url of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._notification_url

    @notification_url.setter
    def notification_url(self, notification_url):
        """Sets the notification_url of this AppConfigurationCibaEndUserNotificationConfig.


        :param notification_url: The notification_url of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if notification_url is None:
            raise ValueError("Invalid value for `notification_url`, must not be `None`")  # noqa: E501

        self._notification_url = notification_url

    @property
    def notification_key(self):
        """Gets the notification_key of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The notification_key of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._notification_key

    @notification_key.setter
    def notification_key(self, notification_key):
        """Sets the notification_key of this AppConfigurationCibaEndUserNotificationConfig.


        :param notification_key: The notification_key of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if notification_key is None:
            raise ValueError("Invalid value for `notification_key`, must not be `None`")  # noqa: E501

        self._notification_key = notification_key

    @property
    def public_vapid_key(self):
        """Gets the public_vapid_key of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501


        :return: The public_vapid_key of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._public_vapid_key

    @public_vapid_key.setter
    def public_vapid_key(self, public_vapid_key):
        """Sets the public_vapid_key of this AppConfigurationCibaEndUserNotificationConfig.


        :param public_vapid_key: The public_vapid_key of this AppConfigurationCibaEndUserNotificationConfig.  # noqa: E501
        :type: str
        """
        if public_vapid_key is None:
            raise ValueError("Invalid value for `public_vapid_key`, must not be `None`")  # noqa: E501

        self._public_vapid_key = public_vapid_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppConfigurationCibaEndUserNotificationConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppConfigurationCibaEndUserNotificationConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
