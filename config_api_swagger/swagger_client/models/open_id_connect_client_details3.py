# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpenIDConnectClientDetails3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inum': 'str',
        'display_name': 'str',
        'description': 'str',
        'application_type': 'str',
        'contacts': 'list[str]',
        'redirect_uris': 'list[str]',
        'post_logout_redirect_uris': 'list[str]',
        'scope': 'list[str]',
        'claims': 'list[str]',
        'client_secret': 'str',
        'password': 'str',
        'associated_persons': 'list[str]',
        'trusted_client': 'bool',
        'response_types': 'list[str]',
        'grant_types': 'list[str]',
        'logo_uri': 'str',
        'client_uri': 'str',
        'policy_uri': 'str',
        'tos_uri': 'str',
        'jwks_uri': 'str',
        'jwks': 'list[JsonWebKey]',
        'sector_identifier_uri': 'str',
        'subject_type': 'str',
        'id_token_token_binding_cnf': 'str',
        'rpt_as_jwt': 'bool',
        'access_token_as_jwt': 'bool',
        'access_token_signing_alg': 'str',
        'id_token_signed_response_alg': 'str',
        'id_token_encrypted_response_alg': 'str',
        'id_token_encrypted_response_enc': 'str',
        'userinfo_signed_response_alg': 'str',
        'userinfo_encrypted_response_alg': 'str',
        'userinfo_encrypted_response_enc': 'str',
        'request_object_signing_alg': 'str',
        'request_object_encryption_alg': 'str',
        'request_object_encryption_enc': 'str',
        'token_endpoint_auth_method': 'str',
        'token_endpoint_auth_signing_alg': 'str',
        'default_max_age': 'int',
        'require_auth_time': 'bool',
        'claims_redirect_uri': 'list[str]',
        'logout_uri': 'list[str]',
        'logout_session_required': 'bool',
        'persist_client_authorizations': 'bool',
        'include_claims_in_id_token': 'bool',
        'refresh_token_lifetime': 'int',
        'access_token_lifetime': 'int',
        'default_acr_values': 'list[str]',
        'initiate_login_uri': 'str',
        'exp': 'date',
        'request_uris': 'list[str]',
        'authorized_origins': 'list[str]',
        'software_id': 'str',
        'software_version': 'str',
        'software_statement': 'str',
        'disabled': 'bool',
        'jans_id': 'str',
        'deletable': 'bool',
        'client_attributes': 'Jansconfigapiapiv1openidclientsClientAttributes',
        'backchannel_authentication_request_signing_alg': 'str',
        'backchannel_token_delivery_mode': 'str',
        'backchannel_client_notification_endpoint': 'str',
        'backchannel_user_code_parameter': 'bool'
    }

    attribute_map = {
        'inum': 'inum',
        'display_name': 'display_Name',
        'description': 'description',
        'application_type': 'application_type',
        'contacts': 'contacts',
        'redirect_uris': 'redirect_uris',
        'post_logout_redirect_uris': 'post_logout_redirect_uris',
        'scope': 'scope',
        'claims': 'claims',
        'client_secret': 'client_secret',
        'password': 'password',
        'associated_persons': 'associated_persons',
        'trusted_client': 'trusted_client',
        'response_types': 'response_types',
        'grant_types': 'grant_types',
        'logo_uri': 'logo_uri',
        'client_uri': 'client_uri',
        'policy_uri': 'policy_uri',
        'tos_uri': 'tos_uri',
        'jwks_uri': 'jwks_uri',
        'jwks': 'jwks',
        'sector_identifier_uri': 'sector_identifier_uri',
        'subject_type': 'subject_type',
        'id_token_token_binding_cnf': 'id_token_token_binding_cnf',
        'rpt_as_jwt': 'rpt_as_jwt',
        'access_token_as_jwt': 'access_token_as_jwt',
        'access_token_signing_alg': 'access_token_signing_alg',
        'id_token_signed_response_alg': 'id_token_signed_response_alg',
        'id_token_encrypted_response_alg': 'id_token_encrypted_response_alg',
        'id_token_encrypted_response_enc': 'id_token_encrypted_response_enc',
        'userinfo_signed_response_alg': 'userinfo_signed_response_alg',
        'userinfo_encrypted_response_alg': 'userinfo_encrypted_response_alg',
        'userinfo_encrypted_response_enc': 'userinfo_encrypted_response_enc',
        'request_object_signing_alg': 'request_object_signing_alg',
        'request_object_encryption_alg': 'request_object_encryption_alg',
        'request_object_encryption_enc': 'request_object_encryption_enc',
        'token_endpoint_auth_method': 'token_endpoint_auth_method',
        'token_endpoint_auth_signing_alg': 'token_endpoint_auth_signing_alg',
        'default_max_age': 'default_max_age',
        'require_auth_time': 'require_auth_time',
        'claims_redirect_uri': 'claims_redirect_uri',
        'logout_uri': 'logout_uri',
        'logout_session_required': 'logout_session_required',
        'persist_client_authorizations': 'persist_client_authorizations',
        'include_claims_in_id_token': 'include_claims_in_id_token',
        'refresh_token_lifetime': 'refresh_token_lifetime',
        'access_token_lifetime': 'access_token_lifetime',
        'default_acr_values': 'default_acr_values',
        'initiate_login_uri': 'initiate_login_uri',
        'exp': 'exp',
        'request_uris': 'request_uris',
        'authorized_origins': 'authorized_origins',
        'software_id': 'software_id',
        'software_version': 'software_version',
        'software_statement': 'software_statement',
        'disabled': 'disabled',
        'jans_id': 'jansId',
        'deletable': 'deletable',
        'client_attributes': 'client_attributes',
        'backchannel_authentication_request_signing_alg': 'backchannel_authentication_request_signing_alg',
        'backchannel_token_delivery_mode': 'backchannel_token_delivery_mode',
        'backchannel_client_notification_endpoint': 'backchannel_client_notification_endpoint',
        'backchannel_user_code_parameter': 'backchannel_user_code_parameter'
    }

    def __init__(self, inum=None, display_name=None, description=None, application_type=None, contacts=None, redirect_uris=None, post_logout_redirect_uris=None, scope=None, claims=None, client_secret=None, password=None, associated_persons=None, trusted_client=None, response_types=None, grant_types=None, logo_uri=None, client_uri=None, policy_uri=None, tos_uri=None, jwks_uri=None, jwks=None, sector_identifier_uri=None, subject_type=None, id_token_token_binding_cnf=None, rpt_as_jwt=None, access_token_as_jwt=None, access_token_signing_alg=None, id_token_signed_response_alg=None, id_token_encrypted_response_alg=None, id_token_encrypted_response_enc=None, userinfo_signed_response_alg=None, userinfo_encrypted_response_alg=None, userinfo_encrypted_response_enc=None, request_object_signing_alg=None, request_object_encryption_alg=None, request_object_encryption_enc=None, token_endpoint_auth_method=None, token_endpoint_auth_signing_alg=None, default_max_age=None, require_auth_time=None, claims_redirect_uri=None, logout_uri=None, logout_session_required=None, persist_client_authorizations=None, include_claims_in_id_token=None, refresh_token_lifetime=None, access_token_lifetime=None, default_acr_values=None, initiate_login_uri=None, exp=None, request_uris=None, authorized_origins=None, software_id=None, software_version=None, software_statement=None, disabled=None, jans_id=None, deletable=None, client_attributes=None, backchannel_authentication_request_signing_alg=None, backchannel_token_delivery_mode=None, backchannel_client_notification_endpoint=None, backchannel_user_code_parameter=None):  # noqa: E501
        """OpenIDConnectClientDetails3 - a model defined in Swagger"""  # noqa: E501
        self._inum = None
        self._display_name = None
        self._description = None
        self._application_type = None
        self._contacts = None
        self._redirect_uris = None
        self._post_logout_redirect_uris = None
        self._scope = None
        self._claims = None
        self._client_secret = None
        self._password = None
        self._associated_persons = None
        self._trusted_client = None
        self._response_types = None
        self._grant_types = None
        self._logo_uri = None
        self._client_uri = None
        self._policy_uri = None
        self._tos_uri = None
        self._jwks_uri = None
        self._jwks = None
        self._sector_identifier_uri = None
        self._subject_type = None
        self._id_token_token_binding_cnf = None
        self._rpt_as_jwt = None
        self._access_token_as_jwt = None
        self._access_token_signing_alg = None
        self._id_token_signed_response_alg = None
        self._id_token_encrypted_response_alg = None
        self._id_token_encrypted_response_enc = None
        self._userinfo_signed_response_alg = None
        self._userinfo_encrypted_response_alg = None
        self._userinfo_encrypted_response_enc = None
        self._request_object_signing_alg = None
        self._request_object_encryption_alg = None
        self._request_object_encryption_enc = None
        self._token_endpoint_auth_method = None
        self._token_endpoint_auth_signing_alg = None
        self._default_max_age = None
        self._require_auth_time = None
        self._claims_redirect_uri = None
        self._logout_uri = None
        self._logout_session_required = None
        self._persist_client_authorizations = None
        self._include_claims_in_id_token = None
        self._refresh_token_lifetime = None
        self._access_token_lifetime = None
        self._default_acr_values = None
        self._initiate_login_uri = None
        self._exp = None
        self._request_uris = None
        self._authorized_origins = None
        self._software_id = None
        self._software_version = None
        self._software_statement = None
        self._disabled = None
        self._jans_id = None
        self._deletable = None
        self._client_attributes = None
        self._backchannel_authentication_request_signing_alg = None
        self._backchannel_token_delivery_mode = None
        self._backchannel_client_notification_endpoint = None
        self._backchannel_user_code_parameter = None
        self.discriminator = None
        if inum is not None:
            self.inum = inum
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if application_type is not None:
            self.application_type = application_type
        if contacts is not None:
            self.contacts = contacts
        if redirect_uris is not None:
            self.redirect_uris = redirect_uris
        if post_logout_redirect_uris is not None:
            self.post_logout_redirect_uris = post_logout_redirect_uris
        if scope is not None:
            self.scope = scope
        if claims is not None:
            self.claims = claims
        if client_secret is not None:
            self.client_secret = client_secret
        if password is not None:
            self.password = password
        if associated_persons is not None:
            self.associated_persons = associated_persons
        if trusted_client is not None:
            self.trusted_client = trusted_client
        if response_types is not None:
            self.response_types = response_types
        if grant_types is not None:
            self.grant_types = grant_types
        if logo_uri is not None:
            self.logo_uri = logo_uri
        if client_uri is not None:
            self.client_uri = client_uri
        if policy_uri is not None:
            self.policy_uri = policy_uri
        if tos_uri is not None:
            self.tos_uri = tos_uri
        if jwks_uri is not None:
            self.jwks_uri = jwks_uri
        if jwks is not None:
            self.jwks = jwks
        if sector_identifier_uri is not None:
            self.sector_identifier_uri = sector_identifier_uri
        if subject_type is not None:
            self.subject_type = subject_type
        if id_token_token_binding_cnf is not None:
            self.id_token_token_binding_cnf = id_token_token_binding_cnf
        if rpt_as_jwt is not None:
            self.rpt_as_jwt = rpt_as_jwt
        if access_token_as_jwt is not None:
            self.access_token_as_jwt = access_token_as_jwt
        if access_token_signing_alg is not None:
            self.access_token_signing_alg = access_token_signing_alg
        if id_token_signed_response_alg is not None:
            self.id_token_signed_response_alg = id_token_signed_response_alg
        if id_token_encrypted_response_alg is not None:
            self.id_token_encrypted_response_alg = id_token_encrypted_response_alg
        if id_token_encrypted_response_enc is not None:
            self.id_token_encrypted_response_enc = id_token_encrypted_response_enc
        if userinfo_signed_response_alg is not None:
            self.userinfo_signed_response_alg = userinfo_signed_response_alg
        if userinfo_encrypted_response_alg is not None:
            self.userinfo_encrypted_response_alg = userinfo_encrypted_response_alg
        if userinfo_encrypted_response_enc is not None:
            self.userinfo_encrypted_response_enc = userinfo_encrypted_response_enc
        if request_object_signing_alg is not None:
            self.request_object_signing_alg = request_object_signing_alg
        if request_object_encryption_alg is not None:
            self.request_object_encryption_alg = request_object_encryption_alg
        if request_object_encryption_enc is not None:
            self.request_object_encryption_enc = request_object_encryption_enc
        if token_endpoint_auth_method is not None:
            self.token_endpoint_auth_method = token_endpoint_auth_method
        if token_endpoint_auth_signing_alg is not None:
            self.token_endpoint_auth_signing_alg = token_endpoint_auth_signing_alg
        if default_max_age is not None:
            self.default_max_age = default_max_age
        if require_auth_time is not None:
            self.require_auth_time = require_auth_time
        if claims_redirect_uri is not None:
            self.claims_redirect_uri = claims_redirect_uri
        if logout_uri is not None:
            self.logout_uri = logout_uri
        if logout_session_required is not None:
            self.logout_session_required = logout_session_required
        if persist_client_authorizations is not None:
            self.persist_client_authorizations = persist_client_authorizations
        if include_claims_in_id_token is not None:
            self.include_claims_in_id_token = include_claims_in_id_token
        if refresh_token_lifetime is not None:
            self.refresh_token_lifetime = refresh_token_lifetime
        if access_token_lifetime is not None:
            self.access_token_lifetime = access_token_lifetime
        if default_acr_values is not None:
            self.default_acr_values = default_acr_values
        if initiate_login_uri is not None:
            self.initiate_login_uri = initiate_login_uri
        if exp is not None:
            self.exp = exp
        if request_uris is not None:
            self.request_uris = request_uris
        if authorized_origins is not None:
            self.authorized_origins = authorized_origins
        if software_id is not None:
            self.software_id = software_id
        if software_version is not None:
            self.software_version = software_version
        if software_statement is not None:
            self.software_statement = software_statement
        if disabled is not None:
            self.disabled = disabled
        if jans_id is not None:
            self.jans_id = jans_id
        if deletable is not None:
            self.deletable = deletable
        if client_attributes is not None:
            self.client_attributes = client_attributes
        if backchannel_authentication_request_signing_alg is not None:
            self.backchannel_authentication_request_signing_alg = backchannel_authentication_request_signing_alg
        if backchannel_token_delivery_mode is not None:
            self.backchannel_token_delivery_mode = backchannel_token_delivery_mode
        if backchannel_client_notification_endpoint is not None:
            self.backchannel_client_notification_endpoint = backchannel_client_notification_endpoint
        if backchannel_user_code_parameter is not None:
            self.backchannel_user_code_parameter = backchannel_user_code_parameter

    @property
    def inum(self):
        """Gets the inum of this OpenIDConnectClientDetails3.  # noqa: E501

        XRI i-number. Client Identifier to uniquely identify the client.  # noqa: E501

        :return: The inum of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._inum

    @inum.setter
    def inum(self, inum):
        """Sets the inum of this OpenIDConnectClientDetails3.

        XRI i-number. Client Identifier to uniquely identify the client.  # noqa: E501

        :param inum: The inum of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._inum = inum

    @property
    def display_name(self):
        """Gets the display_name of this OpenIDConnectClientDetails3.  # noqa: E501

        A human-readable name of the client.  # noqa: E501

        :return: The display_name of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OpenIDConnectClientDetails3.

        A human-readable name of the client.  # noqa: E501

        :param display_name: The display_name of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this OpenIDConnectClientDetails3.  # noqa: E501

        A human-readable string describing the client.  # noqa: E501

        :return: The description of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OpenIDConnectClientDetails3.

        A human-readable string describing the client.  # noqa: E501

        :param description: The description of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def application_type(self):
        """Gets the application_type of this OpenIDConnectClientDetails3.  # noqa: E501

        Kind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the HTTPS scheme as redirect_uris, they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http scheme with localhost as the hostname.  # noqa: E501

        :return: The application_type of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this OpenIDConnectClientDetails3.

        Kind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the HTTPS scheme as redirect_uris, they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http scheme with localhost as the hostname.  # noqa: E501

        :param application_type: The application_type of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["Web", "Native"]  # noqa: E501
        if application_type not in allowed_values:
            raise ValueError(
                "Invalid value for `application_type` ({0}), must be one of {1}"  # noqa: E501
                .format(application_type, allowed_values)
            )

        self._application_type = application_type

    @property
    def contacts(self):
        """Gets the contacts of this OpenIDConnectClientDetails3.  # noqa: E501

        e-mail addresses of people responsible for this Client.  # noqa: E501

        :return: The contacts of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this OpenIDConnectClientDetails3.

        e-mail addresses of people responsible for this Client.  # noqa: E501

        :param contacts: The contacts of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._contacts = contacts

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this OpenIDConnectClientDetails3.  # noqa: E501

        Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request  # noqa: E501

        :return: The redirect_uris of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this OpenIDConnectClientDetails3.

        Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request  # noqa: E501

        :param redirect_uris: The redirect_uris of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._redirect_uris = redirect_uris

    @property
    def post_logout_redirect_uris(self):
        """Gets the post_logout_redirect_uris of this OpenIDConnectClientDetails3.  # noqa: E501

        Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been performed.  # noqa: E501

        :return: The post_logout_redirect_uris of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._post_logout_redirect_uris

    @post_logout_redirect_uris.setter
    def post_logout_redirect_uris(self, post_logout_redirect_uris):
        """Sets the post_logout_redirect_uris of this OpenIDConnectClientDetails3.

        Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been performed.  # noqa: E501

        :param post_logout_redirect_uris: The post_logout_redirect_uris of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._post_logout_redirect_uris = post_logout_redirect_uris

    @property
    def scope(self):
        """Gets the scope of this OpenIDConnectClientDetails3.  # noqa: E501

        Provide list of scopes granted to the client.  # noqa: E501

        :return: The scope of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OpenIDConnectClientDetails3.

        Provide list of scopes granted to the client.  # noqa: E501

        :param scope: The scope of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._scope = scope

    @property
    def claims(self):
        """Gets the claims of this OpenIDConnectClientDetails3.  # noqa: E501

        Provide list of claims granted to the client.  # noqa: E501

        :return: The claims of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this OpenIDConnectClientDetails3.

        Provide list of claims granted to the client.  # noqa: E501

        :param claims: The claims of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._claims = claims

    @property
    def client_secret(self):
        """Gets the client_secret of this OpenIDConnectClientDetails3.  # noqa: E501

        The client secret.  The client MAY omit the parameter if the client secret is an empty string.  # noqa: E501

        :return: The client_secret of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OpenIDConnectClientDetails3.

        The client secret.  The client MAY omit the parameter if the client secret is an empty string.  # noqa: E501

        :param client_secret: The client_secret of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def password(self):
        """Gets the password of this OpenIDConnectClientDetails3.  # noqa: E501

        User password.  # noqa: E501

        :return: The password of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OpenIDConnectClientDetails3.

        User password.  # noqa: E501

        :param password: The password of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def associated_persons(self):
        """Gets the associated_persons of this OpenIDConnectClientDetails3.  # noqa: E501

        List of associated persons.  # noqa: E501

        :return: The associated_persons of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._associated_persons

    @associated_persons.setter
    def associated_persons(self, associated_persons):
        """Sets the associated_persons of this OpenIDConnectClientDetails3.

        List of associated persons.  # noqa: E501

        :param associated_persons: The associated_persons of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._associated_persons = associated_persons

    @property
    def trusted_client(self):
        """Gets the trusted_client of this OpenIDConnectClientDetails3.  # noqa: E501

        Attribute which corresponds to the \"Pre-Authorization\" property. Default value is false.  # noqa: E501

        :return: The trusted_client of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._trusted_client

    @trusted_client.setter
    def trusted_client(self, trusted_client):
        """Sets the trusted_client of this OpenIDConnectClientDetails3.

        Attribute which corresponds to the \"Pre-Authorization\" property. Default value is false.  # noqa: E501

        :param trusted_client: The trusted_client of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._trusted_client = trusted_client

    @property
    def response_types(self):
        """Gets the response_types of this OpenIDConnectClientDetails3.  # noqa: E501

        A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.  # noqa: E501

        :return: The response_types of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types

    @response_types.setter
    def response_types(self, response_types):
        """Sets the response_types of this OpenIDConnectClientDetails3.

        A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.  # noqa: E501

        :param response_types: The response_types of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CODE", "TOKEN", "ID_TOKEN"]  # noqa: E501
        if not set(response_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `response_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(response_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._response_types = response_types

    @property
    def grant_types(self):
        """Gets the grant_types of this OpenIDConnectClientDetails3.  # noqa: E501

        A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.  # noqa: E501

        :return: The grant_types of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this OpenIDConnectClientDetails3.

        A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.  # noqa: E501

        :param grant_types: The grant_types of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AUTHORIZATION_CODE", "IMPLICIT", "RESOURCE_OWNER_PASSWORD_CREDENTIALS", "CLIENT_CREDENTIALS", "REFRESH_TOKEN", "OXAUTH_UMA_TICKET", "CIBA", "DEVICE_CODE"]  # noqa: E501
        if not set(grant_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grant_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(grant_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._grant_types = grant_types

    @property
    def logo_uri(self):
        """Gets the logo_uri of this OpenIDConnectClientDetails3.  # noqa: E501

        URL that references a logo for the Client application.  # noqa: E501

        :return: The logo_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this OpenIDConnectClientDetails3.

        URL that references a logo for the Client application.  # noqa: E501

        :param logo_uri: The logo_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._logo_uri = logo_uri

    @property
    def client_uri(self):
        """Gets the client_uri of this OpenIDConnectClientDetails3.  # noqa: E501

        URL of the home page of the Client. The value of this field must point to a valid Web page.  # noqa: E501

        :return: The client_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this OpenIDConnectClientDetails3.

        URL of the home page of the Client. The value of this field must point to a valid Web page.  # noqa: E501

        :param client_uri: The client_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._client_uri = client_uri

    @property
    def policy_uri(self):
        """Gets the policy_uri of this OpenIDConnectClientDetails3.  # noqa: E501

        URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.  # noqa: E501

        :return: The policy_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._policy_uri

    @policy_uri.setter
    def policy_uri(self, policy_uri):
        """Sets the policy_uri of this OpenIDConnectClientDetails3.

        URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.  # noqa: E501

        :param policy_uri: The policy_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._policy_uri = policy_uri

    @property
    def tos_uri(self):
        """Gets the tos_uri of this OpenIDConnectClientDetails3.  # noqa: E501

        URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.  # noqa: E501

        :return: The tos_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._tos_uri

    @tos_uri.setter
    def tos_uri(self, tos_uri):
        """Sets the tos_uri of this OpenIDConnectClientDetails3.

        URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.  # noqa: E501

        :param tos_uri: The tos_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._tos_uri = tos_uri

    @property
    def jwks_uri(self):
        """Gets the jwks_uri of this OpenIDConnectClientDetails3.  # noqa: E501

        URL for the Client's JSON Web Key Set (JWK) document containing key(s) that are used for signing requests to the OP. The JWK Set may also contain the Client's encryption keys(s) that are used by the OP to encrypt the responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the document to indicate each key's intended usage.  # noqa: E501

        :return: The jwks_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._jwks_uri

    @jwks_uri.setter
    def jwks_uri(self, jwks_uri):
        """Sets the jwks_uri of this OpenIDConnectClientDetails3.

        URL for the Client's JSON Web Key Set (JWK) document containing key(s) that are used for signing requests to the OP. The JWK Set may also contain the Client's encryption keys(s) that are used by the OP to encrypt the responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the document to indicate each key's intended usage.  # noqa: E501

        :param jwks_uri: The jwks_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._jwks_uri = jwks_uri

    @property
    def jwks(self):
        """Gets the jwks of this OpenIDConnectClientDetails3.  # noqa: E501

        List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.  # noqa: E501

        :return: The jwks of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[JsonWebKey]
        """
        return self._jwks

    @jwks.setter
    def jwks(self, jwks):
        """Sets the jwks of this OpenIDConnectClientDetails3.

        List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.  # noqa: E501

        :param jwks: The jwks of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[JsonWebKey]
        """

        self._jwks = jwks

    @property
    def sector_identifier_uri(self):
        """Gets the sector_identifier_uri of this OpenIDConnectClientDetails3.  # noqa: E501

        URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.  # noqa: E501

        :return: The sector_identifier_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._sector_identifier_uri

    @sector_identifier_uri.setter
    def sector_identifier_uri(self, sector_identifier_uri):
        """Sets the sector_identifier_uri of this OpenIDConnectClientDetails3.

        URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.  # noqa: E501

        :param sector_identifier_uri: The sector_identifier_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._sector_identifier_uri = sector_identifier_uri

    @property
    def subject_type(self):
        """Gets the subject_type of this OpenIDConnectClientDetails3.  # noqa: E501

        Subject type requested for the Client ID. Valid types include pairwise and public.  # noqa: E501

        :return: The subject_type of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this OpenIDConnectClientDetails3.

        Subject type requested for the Client ID. Valid types include pairwise and public.  # noqa: E501

        :param subject_type: The subject_type of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["PAIRWISE", "PUBLIC"]  # noqa: E501
        if subject_type not in allowed_values:
            raise ValueError(
                "Invalid value for `subject_type` ({0}), must be one of {1}"  # noqa: E501
                .format(subject_type, allowed_values)
            )

        self._subject_type = subject_type

    @property
    def id_token_token_binding_cnf(self):
        """Gets the id_token_token_binding_cnf of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party supports Token Binding of ID Tokens. If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.  # noqa: E501

        :return: The id_token_token_binding_cnf of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._id_token_token_binding_cnf

    @id_token_token_binding_cnf.setter
    def id_token_token_binding_cnf(self, id_token_token_binding_cnf):
        """Sets the id_token_token_binding_cnf of this OpenIDConnectClientDetails3.

        Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party supports Token Binding of ID Tokens. If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.  # noqa: E501

        :param id_token_token_binding_cnf: The id_token_token_binding_cnf of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._id_token_token_binding_cnf = id_token_token_binding_cnf

    @property
    def rpt_as_jwt(self):
        """Gets the rpt_as_jwt of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies whether RPT should be return as signed JWT.  # noqa: E501

        :return: The rpt_as_jwt of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._rpt_as_jwt

    @rpt_as_jwt.setter
    def rpt_as_jwt(self, rpt_as_jwt):
        """Sets the rpt_as_jwt of this OpenIDConnectClientDetails3.

        Specifies whether RPT should be return as signed JWT.  # noqa: E501

        :param rpt_as_jwt: The rpt_as_jwt of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._rpt_as_jwt = rpt_as_jwt

    @property
    def access_token_as_jwt(self):
        """Gets the access_token_as_jwt of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies whether access token as signed JWT.  # noqa: E501

        :return: The access_token_as_jwt of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._access_token_as_jwt

    @access_token_as_jwt.setter
    def access_token_as_jwt(self, access_token_as_jwt):
        """Sets the access_token_as_jwt of this OpenIDConnectClientDetails3.

        Specifies whether access token as signed JWT.  # noqa: E501

        :param access_token_as_jwt: The access_token_as_jwt of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._access_token_as_jwt = access_token_as_jwt

    @property
    def access_token_signing_alg(self):
        """Gets the access_token_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies signing algorithm that has to be used during JWT signing. If it's not specified, then the default OP signing algorithm will be used.  # noqa: E501

        :return: The access_token_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._access_token_signing_alg

    @access_token_signing_alg.setter
    def access_token_signing_alg(self, access_token_signing_alg):
        """Sets the access_token_signing_alg of this OpenIDConnectClientDetails3.

        Specifies signing algorithm that has to be used during JWT signing. If it's not specified, then the default OP signing algorithm will be used.  # noqa: E501

        :param access_token_signing_alg: The access_token_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512"]  # noqa: E501
        if access_token_signing_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `access_token_signing_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(access_token_signing_alg, allowed_values)
            )

        self._access_token_signing_alg = access_token_signing_alg

    @property
    def id_token_signed_response_alg(self):
        """Gets the id_token_signed_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501

        JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.  # noqa: E501

        :return: The id_token_signed_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._id_token_signed_response_alg

    @id_token_signed_response_alg.setter
    def id_token_signed_response_alg(self, id_token_signed_response_alg):
        """Sets the id_token_signed_response_alg of this OpenIDConnectClientDetails3.

        JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.  # noqa: E501

        :param id_token_signed_response_alg: The id_token_signed_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["HS256 - HS384 - HS512 - RS256 - RS384 - RS512 - ES256 - ES384 - ES512 - PS256 - PS384 - PS512"]  # noqa: E501
        if id_token_signed_response_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `id_token_signed_response_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(id_token_signed_response_alg, allowed_values)
            )

        self._id_token_signed_response_alg = id_token_signed_response_alg

    @property
    def id_token_encrypted_response_alg(self):
        """Gets the id_token_encrypted_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501

        JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.  # noqa: E501

        :return: The id_token_encrypted_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._id_token_encrypted_response_alg

    @id_token_encrypted_response_alg.setter
    def id_token_encrypted_response_alg(self, id_token_encrypted_response_alg):
        """Sets the id_token_encrypted_response_alg of this OpenIDConnectClientDetails3.

        JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.  # noqa: E501

        :param id_token_encrypted_response_alg: The id_token_encrypted_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["RSA1_5", "RSA-OAEP", "A128KW", "A256KW"]  # noqa: E501
        if id_token_encrypted_response_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `id_token_encrypted_response_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(id_token_encrypted_response_alg, allowed_values)
            )

        self._id_token_encrypted_response_alg = id_token_encrypted_response_alg

    @property
    def id_token_encrypted_response_enc(self):
        """Gets the id_token_encrypted_response_enc of this OpenIDConnectClientDetails3.  # noqa: E501

        JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.  # noqa: E501

        :return: The id_token_encrypted_response_enc of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._id_token_encrypted_response_enc

    @id_token_encrypted_response_enc.setter
    def id_token_encrypted_response_enc(self, id_token_encrypted_response_enc):
        """Sets the id_token_encrypted_response_enc of this OpenIDConnectClientDetails3.

        JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.  # noqa: E501

        :param id_token_encrypted_response_enc: The id_token_encrypted_response_enc of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["A128CBC+HS256", "A256CBC+HS512", "A128GCM", "A256GCM"]  # noqa: E501
        if id_token_encrypted_response_enc not in allowed_values:
            raise ValueError(
                "Invalid value for `id_token_encrypted_response_enc` ({0}), must be one of {1}"  # noqa: E501
                .format(id_token_encrypted_response_enc, allowed_values)
            )

        self._id_token_encrypted_response_enc = id_token_encrypted_response_enc

    @property
    def userinfo_signed_response_alg(self):
        """Gets the userinfo_signed_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501

        JWS alg algorithm (JWA) required for signing UserInfo Responses.  # noqa: E501

        :return: The userinfo_signed_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._userinfo_signed_response_alg

    @userinfo_signed_response_alg.setter
    def userinfo_signed_response_alg(self, userinfo_signed_response_alg):
        """Sets the userinfo_signed_response_alg of this OpenIDConnectClientDetails3.

        JWS alg algorithm (JWA) required for signing UserInfo Responses.  # noqa: E501

        :param userinfo_signed_response_alg: The userinfo_signed_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512"]  # noqa: E501
        if userinfo_signed_response_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `userinfo_signed_response_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(userinfo_signed_response_alg, allowed_values)
            )

        self._userinfo_signed_response_alg = userinfo_signed_response_alg

    @property
    def userinfo_encrypted_response_alg(self):
        """Gets the userinfo_encrypted_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501

        JWE alg algorithm (JWA) required for encrypting UserInfo Responses.  # noqa: E501

        :return: The userinfo_encrypted_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._userinfo_encrypted_response_alg

    @userinfo_encrypted_response_alg.setter
    def userinfo_encrypted_response_alg(self, userinfo_encrypted_response_alg):
        """Sets the userinfo_encrypted_response_alg of this OpenIDConnectClientDetails3.

        JWE alg algorithm (JWA) required for encrypting UserInfo Responses.  # noqa: E501

        :param userinfo_encrypted_response_alg: The userinfo_encrypted_response_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["RSA1_5", "RSA-OAEP", "A128KW", "A256KW"]  # noqa: E501
        if userinfo_encrypted_response_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `userinfo_encrypted_response_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(userinfo_encrypted_response_alg, allowed_values)
            )

        self._userinfo_encrypted_response_alg = userinfo_encrypted_response_alg

    @property
    def userinfo_encrypted_response_enc(self):
        """Gets the userinfo_encrypted_response_enc of this OpenIDConnectClientDetails3.  # noqa: E501

        JWE enc algorithm (JWA) required for encrypting UserInfo Responses.  # noqa: E501

        :return: The userinfo_encrypted_response_enc of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._userinfo_encrypted_response_enc

    @userinfo_encrypted_response_enc.setter
    def userinfo_encrypted_response_enc(self, userinfo_encrypted_response_enc):
        """Sets the userinfo_encrypted_response_enc of this OpenIDConnectClientDetails3.

        JWE enc algorithm (JWA) required for encrypting UserInfo Responses.  # noqa: E501

        :param userinfo_encrypted_response_enc: The userinfo_encrypted_response_enc of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["A128CBC+HS256", "A256CBC+HS512", "A128GCM", "A256GCM"]  # noqa: E501
        if userinfo_encrypted_response_enc not in allowed_values:
            raise ValueError(
                "Invalid value for `userinfo_encrypted_response_enc` ({0}), must be one of {1}"  # noqa: E501
                .format(userinfo_encrypted_response_enc, allowed_values)
            )

        self._userinfo_encrypted_response_enc = userinfo_encrypted_response_enc

    @property
    def request_object_signing_alg(self):
        """Gets the request_object_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501

        JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.  # noqa: E501

        :return: The request_object_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._request_object_signing_alg

    @request_object_signing_alg.setter
    def request_object_signing_alg(self, request_object_signing_alg):
        """Sets the request_object_signing_alg of this OpenIDConnectClientDetails3.

        JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.  # noqa: E501

        :param request_object_signing_alg: The request_object_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512"]  # noqa: E501
        if request_object_signing_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `request_object_signing_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(request_object_signing_alg, allowed_values)
            )

        self._request_object_signing_alg = request_object_signing_alg

    @property
    def request_object_encryption_alg(self):
        """Gets the request_object_encryption_alg of this OpenIDConnectClientDetails3.  # noqa: E501

        JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.  # noqa: E501

        :return: The request_object_encryption_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._request_object_encryption_alg

    @request_object_encryption_alg.setter
    def request_object_encryption_alg(self, request_object_encryption_alg):
        """Sets the request_object_encryption_alg of this OpenIDConnectClientDetails3.

        JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.  # noqa: E501

        :param request_object_encryption_alg: The request_object_encryption_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["RSA1_5", "RSA-OAEP", "A128KW", "A256KW"]  # noqa: E501
        if request_object_encryption_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `request_object_encryption_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(request_object_encryption_alg, allowed_values)
            )

        self._request_object_encryption_alg = request_object_encryption_alg

    @property
    def request_object_encryption_enc(self):
        """Gets the request_object_encryption_enc of this OpenIDConnectClientDetails3.  # noqa: E501

        JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.  # noqa: E501

        :return: The request_object_encryption_enc of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._request_object_encryption_enc

    @request_object_encryption_enc.setter
    def request_object_encryption_enc(self, request_object_encryption_enc):
        """Sets the request_object_encryption_enc of this OpenIDConnectClientDetails3.

        JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.  # noqa: E501

        :param request_object_encryption_enc: The request_object_encryption_enc of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["A128CBC+HS256", "A256CBC+HS512", "A128GCM", "A256GCM"]  # noqa: E501
        if request_object_encryption_enc not in allowed_values:
            raise ValueError(
                "Invalid value for `request_object_encryption_enc` ({0}), must be one of {1}"  # noqa: E501
                .format(request_object_encryption_enc, allowed_values)
            )

        self._request_object_encryption_enc = request_object_encryption_enc

    @property
    def token_endpoint_auth_method(self):
        """Gets the token_endpoint_auth_method of this OpenIDConnectClientDetails3.  # noqa: E501

        Requested Client Authentication method for the Token Endpoint.  # noqa: E501

        :return: The token_endpoint_auth_method of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint_auth_method

    @token_endpoint_auth_method.setter
    def token_endpoint_auth_method(self, token_endpoint_auth_method):
        """Sets the token_endpoint_auth_method of this OpenIDConnectClientDetails3.

        Requested Client Authentication method for the Token Endpoint.  # noqa: E501

        :param token_endpoint_auth_method: The token_endpoint_auth_method of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "none"]  # noqa: E501
        if token_endpoint_auth_method not in allowed_values:
            raise ValueError(
                "Invalid value for `token_endpoint_auth_method` ({0}), must be one of {1}"  # noqa: E501
                .format(token_endpoint_auth_method, allowed_values)
            )

        self._token_endpoint_auth_method = token_endpoint_auth_method

    @property
    def token_endpoint_auth_signing_alg(self):
        """Gets the token_endpoint_auth_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501

        JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.  # noqa: E501

        :return: The token_endpoint_auth_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint_auth_signing_alg

    @token_endpoint_auth_signing_alg.setter
    def token_endpoint_auth_signing_alg(self, token_endpoint_auth_signing_alg):
        """Sets the token_endpoint_auth_signing_alg of this OpenIDConnectClientDetails3.

        JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.  # noqa: E501

        :param token_endpoint_auth_signing_alg: The token_endpoint_auth_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512"]  # noqa: E501
        if token_endpoint_auth_signing_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `token_endpoint_auth_signing_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(token_endpoint_auth_signing_alg, allowed_values)
            )

        self._token_endpoint_auth_signing_alg = token_endpoint_auth_signing_alg

    @property
    def default_max_age(self):
        """Gets the default_max_age of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies the Default Maximum Authentication Age.  # noqa: E501

        :return: The default_max_age of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: int
        """
        return self._default_max_age

    @default_max_age.setter
    def default_max_age(self, default_max_age):
        """Sets the default_max_age of this OpenIDConnectClientDetails3.

        Specifies the Default Maximum Authentication Age.  # noqa: E501

        :param default_max_age: The default_max_age of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: int
        """

        self._default_max_age = default_max_age

    @property
    def require_auth_time(self):
        """Gets the require_auth_time of this OpenIDConnectClientDetails3.  # noqa: E501

        Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.  # noqa: E501

        :return: The require_auth_time of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._require_auth_time

    @require_auth_time.setter
    def require_auth_time(self, require_auth_time):
        """Sets the require_auth_time of this OpenIDConnectClientDetails3.

        Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.  # noqa: E501

        :param require_auth_time: The require_auth_time of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._require_auth_time = require_auth_time

    @property
    def claims_redirect_uri(self):
        """Gets the claims_redirect_uri of this OpenIDConnectClientDetails3.  # noqa: E501

        Array of The Claims Redirect URIs to which the client wishes the authorization server to direct the requesting party's user agent after completing its interaction.  # noqa: E501

        :return: The claims_redirect_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims_redirect_uri

    @claims_redirect_uri.setter
    def claims_redirect_uri(self, claims_redirect_uri):
        """Sets the claims_redirect_uri of this OpenIDConnectClientDetails3.

        Array of The Claims Redirect URIs to which the client wishes the authorization server to direct the requesting party's user agent after completing its interaction.  # noqa: E501

        :param claims_redirect_uri: The claims_redirect_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._claims_redirect_uri = claims_redirect_uri

    @property
    def logout_uri(self):
        """Gets the logout_uri of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.  # noqa: E501

        :return: The logout_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._logout_uri

    @logout_uri.setter
    def logout_uri(self, logout_uri):
        """Sets the logout_uri of this OpenIDConnectClientDetails3.

        Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.  # noqa: E501

        :param logout_uri: The logout_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._logout_uri = logout_uri

    @property
    def logout_session_required(self):
        """Gets the logout_session_required of this OpenIDConnectClientDetails3.  # noqa: E501

        Boolean value specifying whether the RP requires that a session ID query parameter be included to identify the RP session at the OP when the logout_uri is used. If omitted, the default value is false.  # noqa: E501

        :return: The logout_session_required of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._logout_session_required

    @logout_session_required.setter
    def logout_session_required(self, logout_session_required):
        """Sets the logout_session_required of this OpenIDConnectClientDetails3.

        Boolean value specifying whether the RP requires that a session ID query parameter be included to identify the RP session at the OP when the logout_uri is used. If omitted, the default value is false.  # noqa: E501

        :param logout_session_required: The logout_session_required of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._logout_session_required = logout_session_required

    @property
    def persist_client_authorizations(self):
        """Gets the persist_client_authorizations of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies if the client authorization details are to be persisted. Default value is true.  # noqa: E501

        :return: The persist_client_authorizations of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._persist_client_authorizations

    @persist_client_authorizations.setter
    def persist_client_authorizations(self, persist_client_authorizations):
        """Sets the persist_client_authorizations of this OpenIDConnectClientDetails3.

        Specifies if the client authorization details are to be persisted. Default value is true.  # noqa: E501

        :param persist_client_authorizations: The persist_client_authorizations of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._persist_client_authorizations = persist_client_authorizations

    @property
    def include_claims_in_id_token(self):
        """Gets the include_claims_in_id_token of this OpenIDConnectClientDetails3.  # noqa: E501

        If true then claims are included in token id, default value is false.  # noqa: E501

        :return: The include_claims_in_id_token of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._include_claims_in_id_token

    @include_claims_in_id_token.setter
    def include_claims_in_id_token(self, include_claims_in_id_token):
        """Sets the include_claims_in_id_token of this OpenIDConnectClientDetails3.

        If true then claims are included in token id, default value is false.  # noqa: E501

        :param include_claims_in_id_token: The include_claims_in_id_token of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._include_claims_in_id_token = include_claims_in_id_token

    @property
    def refresh_token_lifetime(self):
        """Gets the refresh_token_lifetime of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies the Client-specific refresh token expiration.  # noqa: E501

        :return: The refresh_token_lifetime of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: int
        """
        return self._refresh_token_lifetime

    @refresh_token_lifetime.setter
    def refresh_token_lifetime(self, refresh_token_lifetime):
        """Sets the refresh_token_lifetime of this OpenIDConnectClientDetails3.

        Specifies the Client-specific refresh token expiration.  # noqa: E501

        :param refresh_token_lifetime: The refresh_token_lifetime of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: int
        """

        self._refresh_token_lifetime = refresh_token_lifetime

    @property
    def access_token_lifetime(self):
        """Gets the access_token_lifetime of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies the Client-specific access token expiration.  # noqa: E501

        :return: The access_token_lifetime of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: int
        """
        return self._access_token_lifetime

    @access_token_lifetime.setter
    def access_token_lifetime(self, access_token_lifetime):
        """Sets the access_token_lifetime of this OpenIDConnectClientDetails3.

        Specifies the Client-specific access token expiration.  # noqa: E501

        :param access_token_lifetime: The access_token_lifetime of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: int
        """

        self._access_token_lifetime = access_token_lifetime

    @property
    def default_acr_values(self):
        """Gets the default_acr_values of this OpenIDConnectClientDetails3.  # noqa: E501

        Array of default requested Authentication Context Class Reference values that the Authorization Server must use for processing requests from the Client.  # noqa: E501

        :return: The default_acr_values of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_acr_values

    @default_acr_values.setter
    def default_acr_values(self, default_acr_values):
        """Sets the default_acr_values of this OpenIDConnectClientDetails3.

        Array of default requested Authentication Context Class Reference values that the Authorization Server must use for processing requests from the Client.  # noqa: E501

        :param default_acr_values: The default_acr_values of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._default_acr_values = default_acr_values

    @property
    def initiate_login_uri(self):
        """Gets the initiate_login_uri of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.  # noqa: E501

        :return: The initiate_login_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._initiate_login_uri

    @initiate_login_uri.setter
    def initiate_login_uri(self, initiate_login_uri):
        """Sets the initiate_login_uri of this OpenIDConnectClientDetails3.

        Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.  # noqa: E501

        :param initiate_login_uri: The initiate_login_uri of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._initiate_login_uri = initiate_login_uri

    @property
    def exp(self):
        """Gets the exp of this OpenIDConnectClientDetails3.  # noqa: E501

        Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.  # noqa: E501

        :return: The exp of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: date
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this OpenIDConnectClientDetails3.

        Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.  # noqa: E501

        :param exp: The exp of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: date
        """

        self._exp = exp

    @property
    def request_uris(self):
        """Gets the request_uris of this OpenIDConnectClientDetails3.  # noqa: E501

        Provide a list of requests_uri values that are pre-registered by the Client for use at the Authorization Server.  # noqa: E501

        :return: The request_uris of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._request_uris

    @request_uris.setter
    def request_uris(self, request_uris):
        """Sets the request_uris of this OpenIDConnectClientDetails3.

        Provide a list of requests_uri values that are pre-registered by the Client for use at the Authorization Server.  # noqa: E501

        :param request_uris: The request_uris of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._request_uris = request_uris

    @property
    def authorized_origins(self):
        """Gets the authorized_origins of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies authorized JavaScript origins.  # noqa: E501

        :return: The authorized_origins of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorized_origins

    @authorized_origins.setter
    def authorized_origins(self, authorized_origins):
        """Sets the authorized_origins of this OpenIDConnectClientDetails3.

        Specifies authorized JavaScript origins.  # noqa: E501

        :param authorized_origins: The authorized_origins of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: list[str]
        """

        self._authorized_origins = authorized_origins

    @property
    def software_id(self):
        """Gets the software_id of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.  # noqa: E501

        :return: The software_id of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._software_id

    @software_id.setter
    def software_id(self, software_id):
        """Sets the software_id of this OpenIDConnectClientDetails3.

        Specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.  # noqa: E501

        :param software_id: The software_id of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._software_id = software_id

    @property
    def software_version(self):
        """Gets the software_version of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'.  # noqa: E501

        :return: The software_version of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this OpenIDConnectClientDetails3.

        Specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'.  # noqa: E501

        :param software_version: The software_version of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def software_statement(self):
        """Gets the software_statement of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT.  # noqa: E501

        :return: The software_statement of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._software_statement

    @software_statement.setter
    def software_statement(self, software_statement):
        """Sets the software_statement of this OpenIDConnectClientDetails3.

        Specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT.  # noqa: E501

        :param software_statement: The software_statement of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._software_statement = software_statement

    @property
    def disabled(self):
        """Gets the disabled of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies whether client is disabled.  # noqa: E501

        :return: The disabled of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this OpenIDConnectClientDetails3.

        Specifies whether client is disabled.  # noqa: E501

        :param disabled: The disabled of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def jans_id(self):
        """Gets the jans_id of this OpenIDConnectClientDetails3.  # noqa: E501

        Attribute Scope Id.  # noqa: E501

        :return: The jans_id of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._jans_id

    @jans_id.setter
    def jans_id(self, jans_id):
        """Sets the jans_id of this OpenIDConnectClientDetails3.

        Attribute Scope Id.  # noqa: E501

        :param jans_id: The jans_id of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._jans_id = jans_id

    @property
    def deletable(self):
        """Gets the deletable of this OpenIDConnectClientDetails3.  # noqa: E501

        Specifies whether client is deletable.  # noqa: E501

        :return: The deletable of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this OpenIDConnectClientDetails3.

        Specifies whether client is deletable.  # noqa: E501

        :param deletable: The deletable of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._deletable = deletable

    @property
    def client_attributes(self):
        """Gets the client_attributes of this OpenIDConnectClientDetails3.  # noqa: E501


        :return: The client_attributes of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: Jansconfigapiapiv1openidclientsClientAttributes
        """
        return self._client_attributes

    @client_attributes.setter
    def client_attributes(self, client_attributes):
        """Sets the client_attributes of this OpenIDConnectClientDetails3.


        :param client_attributes: The client_attributes of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: Jansconfigapiapiv1openidclientsClientAttributes
        """

        self._client_attributes = client_attributes

    @property
    def backchannel_authentication_request_signing_alg(self):
        """Gets the backchannel_authentication_request_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501

        The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.  # noqa: E501

        :return: The backchannel_authentication_request_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._backchannel_authentication_request_signing_alg

    @backchannel_authentication_request_signing_alg.setter
    def backchannel_authentication_request_signing_alg(self, backchannel_authentication_request_signing_alg):
        """Sets the backchannel_authentication_request_signing_alg of this OpenIDConnectClientDetails3.

        The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.  # noqa: E501

        :param backchannel_authentication_request_signing_alg: The backchannel_authentication_request_signing_alg of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """
        allowed_values = ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512"]  # noqa: E501
        if backchannel_authentication_request_signing_alg not in allowed_values:
            raise ValueError(
                "Invalid value for `backchannel_authentication_request_signing_alg` ({0}), must be one of {1}"  # noqa: E501
                .format(backchannel_authentication_request_signing_alg, allowed_values)
            )

        self._backchannel_authentication_request_signing_alg = backchannel_authentication_request_signing_alg

    @property
    def backchannel_token_delivery_mode(self):
        """Gets the backchannel_token_delivery_mode of this OpenIDConnectClientDetails3.  # noqa: E501

        specifies how backchannel token will be delivered.  # noqa: E501

        :return: The backchannel_token_delivery_mode of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._backchannel_token_delivery_mode

    @backchannel_token_delivery_mode.setter
    def backchannel_token_delivery_mode(self, backchannel_token_delivery_mode):
        """Sets the backchannel_token_delivery_mode of this OpenIDConnectClientDetails3.

        specifies how backchannel token will be delivered.  # noqa: E501

        :param backchannel_token_delivery_mode: The backchannel_token_delivery_mode of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._backchannel_token_delivery_mode = backchannel_token_delivery_mode

    @property
    def backchannel_client_notification_endpoint(self):
        """Gets the backchannel_client_notification_endpoint of this OpenIDConnectClientDetails3.  # noqa: E501

        Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.  # noqa: E501

        :return: The backchannel_client_notification_endpoint of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: str
        """
        return self._backchannel_client_notification_endpoint

    @backchannel_client_notification_endpoint.setter
    def backchannel_client_notification_endpoint(self, backchannel_client_notification_endpoint):
        """Sets the backchannel_client_notification_endpoint of this OpenIDConnectClientDetails3.

        Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.  # noqa: E501

        :param backchannel_client_notification_endpoint: The backchannel_client_notification_endpoint of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: str
        """

        self._backchannel_client_notification_endpoint = backchannel_client_notification_endpoint

    @property
    def backchannel_user_code_parameter(self):
        """Gets the backchannel_user_code_parameter of this OpenIDConnectClientDetails3.  # noqa: E501

        Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.  # noqa: E501

        :return: The backchannel_user_code_parameter of this OpenIDConnectClientDetails3.  # noqa: E501
        :rtype: bool
        """
        return self._backchannel_user_code_parameter

    @backchannel_user_code_parameter.setter
    def backchannel_user_code_parameter(self, backchannel_user_code_parameter):
        """Sets the backchannel_user_code_parameter of this OpenIDConnectClientDetails3.

        Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.  # noqa: E501

        :param backchannel_user_code_parameter: The backchannel_user_code_parameter of this OpenIDConnectClientDetails3.  # noqa: E501
        :type: bool
        """

        self._backchannel_user_code_parameter = backchannel_user_code_parameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenIDConnectClientDetails3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenIDConnectClientDetails3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
