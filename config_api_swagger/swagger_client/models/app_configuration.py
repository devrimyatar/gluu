# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_as_jwt': 'bool',
        'issuer': 'str',
        'base_endpoint': 'str',
        'authorization_endpoint': 'str',
        'token_endpoint': 'str',
        'token_revocation_endpoint': 'str',
        'user_info_endpoint': 'str',
        'client_info_endpoint': 'str',
        'check_session_i_frame': 'str',
        'end_session_endpoint': 'str',
        'jwks_uri': 'str',
        'registration_endpoint': 'str',
        'open_id_discovery_endpoint': 'str',
        'open_id_configuration_endpoint': 'str',
        'id_generation_endpoint': 'str',
        'introspection_endpoint': 'str',
        'introspection_access_token_must_have_uma_protection_scope': 'bool',
        'uma_configuration_endpoint': 'str',
        'sector_identifier_endpoint': 'str',
        'ox_eleven_generate_key_endpoint': 'str',
        'ox_eleven_sign_endpoint': 'str',
        'ox_eleven_verify_signature_endpoint': 'str',
        'ox_eleven_delete_key_endpoint': 'str',
        'ox_eleven_jwks_endpoint': 'str',
        'openid_sub_attribute': 'str',
        'response_types_supported': 'list[str]',
        'response_modes_supported': 'list[str]',
        'grant_types_supported': 'list[str]',
        'dynamic_grant_type_default': 'list[str]',
        'subject_types_supported': 'list[str]',
        'default_subject_type': 'list[str]',
        'user_info_signing_alg_values_supported': 'list[str]',
        'user_info_encryption_alg_values_supported': 'list[str]',
        'user_info_encryption_enc_values_supported': 'list[str]',
        'id_token_signing_alg_values_supported': 'list[str]',
        'id_token_encryption_alg_values_supported': 'list[str]',
        'id_token_encryption_enc_values_supported': 'list[str]',
        'request_object_signing_alg_values_supported': 'list[str]',
        'request_object_encryption_alg_values_supported': 'list[str]',
        'request_object_encryption_enc_values_supported': 'list[str]',
        'token_endpoint_auth_methods_supported': 'list[str]',
        'token_endpoint_auth_signing_alg_values_supported': 'list[str]',
        'dynamic_registration_custom_attributes': 'list[str]',
        'display_values_supported': 'list[str]',
        'claim_types_supported': 'list[str]',
        'service_documentation': 'list[str]',
        'claims_locales_supported': 'list[str]',
        'id_token_token_binding_cnf_values_supported': 'list[str]',
        'ui_locales_supported': 'list[str]',
        'persist_id_token_in_ldap': 'bool',
        'persist_refresh_token_in_ldap': 'bool',
        'claims_parameter_supported': 'bool',
        'request_parameter_supported': 'bool',
        'request_uri_parameter_supported': 'bool',
        'require_request_uri_registration': 'bool',
        'op_policy_uri': 'str',
        'op_tos_uri': 'str',
        'authorization_code_lifetime': 'int',
        'refresh_token_lifetime': 'int',
        'id_token_lifetime': 'int',
        'access_token_lifetime': 'int',
        'uma_rpt_lifetime': 'int',
        'uma_ticket_lifetime': 'int',
        'uma_pct_lifetime': 'int',
        'uma_resource_lifetime': 'int',
        'uma_add_scopes_automatically': 'bool',
        'uma_validate_claim_token': 'bool',
        'uma_grant_access_if_no_policies': 'bool',
        'uma_restrict_resource_to_associated_client': 'bool',
        'uma_keep_client_during_resource_set_registration': 'bool',
        'uma_rpt_as_jwt': 'bool',
        'clean_service_interval': 'int',
        'clean_service_base_dns': 'list[str]',
        'clean_service_batch_chunk_size': 'int',
        'key_regeneration_enabled': 'bool',
        'key_regeneration_interval': 'int',
        'default_signature_algorithm': 'list[str]',
        'ox_open_id_connect_version': 'str',
        'jans_id': 'str',
        'dynamic_registration_enabled': 'bool',
        'dynamic_registration_expiration_time': 'int',
        'dynamic_registration_persist_client_authorizations': 'bool',
        'trusted_client_enabled': 'bool',
        'dynamic_registration_scopes_param_enabled': 'bool',
        'dynamic_registration_custom_object_class': 'str',
        'person_custom_object_class_list': 'list[str]',
        'authentication_filters_enabled': 'bool',
        'client_authentication_filters_enabled': 'bool',
        'authentication_filters': 'list[AppConfigurationAuthenticationFilters]',
        'client_authentication_filters': 'list[AppConfigurationClientAuthenticationFilters]',
        'session_id_unused_lifetime': 'int',
        'session_id_unauthenticated_unused_lifetime': 'int',
        'session_id_lifetime': 'int',
        'session_id_enabled': 'bool',
        'session_id_persist_on_prompt_none': 'bool',
        'configuration_update_interval': 'int',
        'css_location': 'str',
        'js_location': 'str',
        'img_location': 'str',
        'metric_reporter_interval': 'int',
        'metric_reporter_keep_data_days': 'int',
        'metric_reporter_enabled': 'bool',
        'pairwise_id_type': 'list[str]',
        'pairwise_calculation_key': 'str',
        'pairwise_calculation_salt': 'str',
        'share_subject_id_between_clients_with_same_sector_id': 'bool',
        'web_keys_storage': 'str',
        'dn_name': 'str',
        'key_store_file': 'str',
        'key_store_secret': 'str',
        'end_session_with_access_token': 'bool',
        'client_white_list': 'list[str]',
        'client_black_list': 'list[str]',
        'legacy_id_token_claims': 'bool',
        'custom_headers_with_authorization_response': 'bool',
        'front_channel_logout_session_supported': 'bool',
        'use_cache_for_all_implicit_flow_objects': 'bool',
        'invalidate_session_cookies_after_authorization_flow': 'bool',
        'update_user_last_logon_time': 'bool',
        'update_client_access_time': 'bool',
        'enable_client_grant_type_update': 'bool',
        'logging_level': 'str',
        'cors_configuration_filters': 'list[AppConfigurationCorsConfigurationFilters]',
        'log_client_id_on_client_authentication': 'bool',
        'log_client_name_on_client_authentication': 'bool',
        'authorization_request_custom_allowed_parameters': 'list[str]',
        'legacy_dynamic_registration_scope_param': 'bool',
        'openid_scope_backward_compatibility': 'bool',
        'skip_authorization_for_open_id_scope_and_pairwise_id': 'bool',
        'allow_post_logout_redirect_without_validation': 'bool',
        'http_logging_enabled': 'bool',
        'http_logging_exlude_paths': 'list[str]',
        'external_logger_configuration': 'str',
        'disable_u2f_endpoint': 'bool',
        'disable_jdk_logger': 'bool',
        'jms_user_name': 'str',
        'jms_password': 'str',
        'jms_broker_uri_set': 'list[str]',
        'ox_eleven_test_mode_token': 'str',
        'enabled_o_auth_audit_logging': 'bool',
        'authentication_protection_configuration': 'AppConfigurationAuthenticationProtectionConfiguration',
        'error_handling_method': 'str',
        'use_local_cache': 'bool',
        'spontaneous_scope_lifetime': 'int',
        'jwks_algorithms_supported': 'list[str]',
        'dynamic_registration_password_grant_type_enabled': 'bool',
        'return_client_secret_on_read': 'bool',
        'reject_jwt_with_none_alg': 'bool',
        'expiration_notificator_enabled': 'bool',
        'expiration_notificator_map_size_limit': 'int',
        'expiration_notificator_interval_in_seconds': 'int',
        'client_reg_default_to_code_flow_with_refresh': 'bool',
        'session_id_request_parameter_enabled': 'bool',
        'change_session_id_on_authentication': 'bool',
        'server_session_id_lifetime': 'int',
        'cookie_domain': 'str',
        'logging_layout': 'str',
        'fapi_compatibility': 'bool',
        'force_id_token_hint_precense': 'bool',
        'force_offline_access_scope_to_enable_refresh_token': 'bool',
        'error_reason_enabled': 'bool',
        'remove_refresh_tokens_for_client_on_logout': 'bool',
        'consent_gathering_script_backward_compatibility': 'bool',
        'introspection_script_backward_compatibility': 'bool',
        'keep_authenticator_attributes_on_acr_change': 'bool',
        'backchannel_client_id': 'str',
        'backchannel_redirect_uri': 'str',
        'backchannel_authentication_endpoint': 'str',
        'backchannel_device_registration_endpoint': 'str',
        'backchannel_token_delivery_modes_supported': 'list[str]',
        'backchannel_authentication_request_signing_alg_values_supported': 'list[str]',
        'backchannel_user_code_parameter_supported': 'bool',
        'backchannel_binding_message_pattern': 'str',
        'backchannel_authentication_response_expires_in': 'int',
        'backchannel_authentication_response_interval': 'int',
        'backchannel_login_hint_claims': 'list[str]',
        'ciba_end_user_notification_config': 'AppConfigurationCibaEndUserNotificationConfig',
        'backchannel_requests_processor_job_interval_sec': 'int',
        'backchannel_requests_processor_job_chunk_size': 'int',
        'ciba_grant_life_extra_time_sec': 'int',
        'ciba_max_expiration_time_allowed_sec': 'int'
    }

    attribute_map = {
        'session_as_jwt': 'sessionAsJwt',
        'issuer': 'issuer',
        'base_endpoint': 'baseEndpoint',
        'authorization_endpoint': 'authorizationEndpoint',
        'token_endpoint': 'tokenEndpoint',
        'token_revocation_endpoint': 'tokenRevocationEndpoint',
        'user_info_endpoint': 'userInfoEndpoint',
        'client_info_endpoint': 'clientInfoEndpoint',
        'check_session_i_frame': 'checkSessionIFrame',
        'end_session_endpoint': 'endSessionEndpoint',
        'jwks_uri': 'jwksUri',
        'registration_endpoint': 'registrationEndpoint',
        'open_id_discovery_endpoint': 'openIdDiscoveryEndpoint',
        'open_id_configuration_endpoint': 'openIdConfigurationEndpoint',
        'id_generation_endpoint': 'idGenerationEndpoint',
        'introspection_endpoint': 'introspectionEndpoint',
        'introspection_access_token_must_have_uma_protection_scope': 'introspectionAccessTokenMustHaveUmaProtectionScope',
        'uma_configuration_endpoint': 'umaConfigurationEndpoint',
        'sector_identifier_endpoint': 'sectorIdentifierEndpoint',
        'ox_eleven_generate_key_endpoint': 'oxElevenGenerateKeyEndpoint',
        'ox_eleven_sign_endpoint': 'oxElevenSignEndpoint',
        'ox_eleven_verify_signature_endpoint': 'oxElevenVerifySignatureEndpoint',
        'ox_eleven_delete_key_endpoint': 'oxElevenDeleteKeyEndpoint',
        'ox_eleven_jwks_endpoint': 'oxElevenJwksEndpoint',
        'openid_sub_attribute': 'openidSubAttribute',
        'response_types_supported': 'responseTypesSupported',
        'response_modes_supported': 'responseModesSupported',
        'grant_types_supported': 'grantTypesSupported',
        'dynamic_grant_type_default': 'dynamicGrantTypeDefault',
        'subject_types_supported': 'subjectTypesSupported',
        'default_subject_type': 'defaultSubjectType',
        'user_info_signing_alg_values_supported': 'userInfoSigningAlgValuesSupported',
        'user_info_encryption_alg_values_supported': 'userInfoEncryptionAlgValuesSupported',
        'user_info_encryption_enc_values_supported': 'userInfoEncryptionEncValuesSupported',
        'id_token_signing_alg_values_supported': 'idTokenSigningAlgValuesSupported',
        'id_token_encryption_alg_values_supported': 'idTokenEncryptionAlgValuesSupported',
        'id_token_encryption_enc_values_supported': 'idTokenEncryptionEncValuesSupported',
        'request_object_signing_alg_values_supported': 'requestObjectSigningAlgValuesSupported',
        'request_object_encryption_alg_values_supported': 'requestObjectEncryptionAlgValuesSupported',
        'request_object_encryption_enc_values_supported': 'requestObjectEncryptionEncValuesSupported',
        'token_endpoint_auth_methods_supported': 'tokenEndpointAuthMethodsSupported',
        'token_endpoint_auth_signing_alg_values_supported': 'tokenEndpointAuthSigningAlgValuesSupported',
        'dynamic_registration_custom_attributes': 'dynamicRegistrationCustomAttributes',
        'display_values_supported': 'displayValuesSupported',
        'claim_types_supported': 'claimTypesSupported',
        'service_documentation': 'serviceDocumentation',
        'claims_locales_supported': 'claimsLocalesSupported',
        'id_token_token_binding_cnf_values_supported': 'idTokenTokenBindingCnfValuesSupported',
        'ui_locales_supported': 'uiLocalesSupported',
        'persist_id_token_in_ldap': 'persistIdTokenInLdap',
        'persist_refresh_token_in_ldap': 'persistRefreshTokenInLdap',
        'claims_parameter_supported': 'claimsParameterSupported',
        'request_parameter_supported': 'requestParameterSupported',
        'request_uri_parameter_supported': 'requestUriParameterSupported',
        'require_request_uri_registration': 'requireRequestUriRegistration',
        'op_policy_uri': 'opPolicyUri',
        'op_tos_uri': 'opTosUri',
        'authorization_code_lifetime': 'authorizationCodeLifetime',
        'refresh_token_lifetime': 'refreshTokenLifetime',
        'id_token_lifetime': 'idTokenLifetime',
        'access_token_lifetime': 'accessTokenLifetime',
        'uma_rpt_lifetime': 'umaRptLifetime',
        'uma_ticket_lifetime': 'umaTicketLifetime',
        'uma_pct_lifetime': 'umaPctLifetime',
        'uma_resource_lifetime': 'umaResourceLifetime',
        'uma_add_scopes_automatically': 'umaAddScopesAutomatically',
        'uma_validate_claim_token': 'umaValidateClaimToken',
        'uma_grant_access_if_no_policies': 'umaGrantAccessIfNoPolicies',
        'uma_restrict_resource_to_associated_client': 'umaRestrictResourceToAssociatedClient',
        'uma_keep_client_during_resource_set_registration': 'umaKeepClientDuringResourceSetRegistration',
        'uma_rpt_as_jwt': 'umaRptAsJwt',
        'clean_service_interval': 'cleanServiceInterval',
        'clean_service_base_dns': 'cleanServiceBaseDns',
        'clean_service_batch_chunk_size': 'cleanServiceBatchChunkSize',
        'key_regeneration_enabled': 'keyRegenerationEnabled',
        'key_regeneration_interval': 'keyRegenerationInterval',
        'default_signature_algorithm': 'defaultSignatureAlgorithm',
        'ox_open_id_connect_version': 'oxOpenIdConnectVersion',
        'jans_id': 'jansId',
        'dynamic_registration_enabled': 'dynamicRegistrationEnabled',
        'dynamic_registration_expiration_time': 'dynamicRegistrationExpirationTime',
        'dynamic_registration_persist_client_authorizations': 'dynamicRegistrationPersistClientAuthorizations',
        'trusted_client_enabled': 'trustedClientEnabled',
        'dynamic_registration_scopes_param_enabled': 'dynamicRegistrationScopesParamEnabled',
        'dynamic_registration_custom_object_class': 'dynamicRegistrationCustomObjectClass',
        'person_custom_object_class_list': 'personCustomObjectClassList',
        'authentication_filters_enabled': 'authenticationFiltersEnabled',
        'client_authentication_filters_enabled': 'clientAuthenticationFiltersEnabled',
        'authentication_filters': 'authenticationFilters',
        'client_authentication_filters': 'clientAuthenticationFilters',
        'session_id_unused_lifetime': 'sessionIdUnusedLifetime',
        'session_id_unauthenticated_unused_lifetime': 'sessionIdUnauthenticatedUnusedLifetime',
        'session_id_lifetime': 'sessionIdLifetime',
        'session_id_enabled': 'sessionIdEnabled',
        'session_id_persist_on_prompt_none': 'sessionIdPersistOnPromptNone',
        'configuration_update_interval': 'configurationUpdateInterval',
        'css_location': 'cssLocation',
        'js_location': 'jsLocation',
        'img_location': 'imgLocation',
        'metric_reporter_interval': 'metricReporterInterval',
        'metric_reporter_keep_data_days': 'metricReporterKeepDataDays',
        'metric_reporter_enabled': 'metricReporterEnabled',
        'pairwise_id_type': 'pairwiseIdType',
        'pairwise_calculation_key': 'pairwiseCalculationKey',
        'pairwise_calculation_salt': 'pairwiseCalculationSalt',
        'share_subject_id_between_clients_with_same_sector_id': 'shareSubjectIdBetweenClientsWithSameSectorId',
        'web_keys_storage': 'webKeysStorage',
        'dn_name': 'dnName',
        'key_store_file': 'keyStoreFile',
        'key_store_secret': 'keyStoreSecret',
        'end_session_with_access_token': 'endSessionWithAccessToken',
        'client_white_list': 'clientWhiteList',
        'client_black_list': 'clientBlackList',
        'legacy_id_token_claims': 'legacyIdTokenClaims',
        'custom_headers_with_authorization_response': 'customHeadersWithAuthorizationResponse',
        'front_channel_logout_session_supported': 'frontChannelLogoutSessionSupported',
        'use_cache_for_all_implicit_flow_objects': 'useCacheForAllImplicitFlowObjects',
        'invalidate_session_cookies_after_authorization_flow': 'invalidateSessionCookiesAfterAuthorizationFlow',
        'update_user_last_logon_time': 'updateUserLastLogonTime',
        'update_client_access_time': 'updateClientAccessTime',
        'enable_client_grant_type_update': 'enableClientGrantTypeUpdate',
        'logging_level': 'loggingLevel',
        'cors_configuration_filters': 'corsConfigurationFilters',
        'log_client_id_on_client_authentication': 'logClientIdOnClientAuthentication',
        'log_client_name_on_client_authentication': 'logClientNameOnClientAuthentication',
        'authorization_request_custom_allowed_parameters': 'authorizationRequestCustomAllowedParameters',
        'legacy_dynamic_registration_scope_param': 'legacyDynamicRegistrationScopeParam',
        'openid_scope_backward_compatibility': 'openidScopeBackwardCompatibility',
        'skip_authorization_for_open_id_scope_and_pairwise_id': 'skipAuthorizationForOpenIdScopeAndPairwiseId',
        'allow_post_logout_redirect_without_validation': 'allowPostLogoutRedirectWithoutValidation',
        'http_logging_enabled': 'httpLoggingEnabled',
        'http_logging_exlude_paths': 'httpLoggingExludePaths',
        'external_logger_configuration': 'externalLoggerConfiguration',
        'disable_u2f_endpoint': 'disableU2fEndpoint',
        'disable_jdk_logger': 'disableJdkLogger',
        'jms_user_name': 'jmsUserName',
        'jms_password': 'jmsPassword',
        'jms_broker_uri_set': 'jmsBrokerURISet',
        'ox_eleven_test_mode_token': 'oxElevenTestModeToken',
        'enabled_o_auth_audit_logging': 'enabledOAuthAuditLogging',
        'authentication_protection_configuration': 'authenticationProtectionConfiguration',
        'error_handling_method': 'errorHandlingMethod',
        'use_local_cache': 'useLocalCache',
        'spontaneous_scope_lifetime': 'spontaneousScopeLifetime',
        'jwks_algorithms_supported': 'jwksAlgorithmsSupported',
        'dynamic_registration_password_grant_type_enabled': 'dynamicRegistrationPasswordGrantTypeEnabled',
        'return_client_secret_on_read': 'returnClientSecretOnRead',
        'reject_jwt_with_none_alg': 'rejectJwtWithNoneAlg',
        'expiration_notificator_enabled': 'expirationNotificatorEnabled',
        'expiration_notificator_map_size_limit': 'expirationNotificatorMapSizeLimit',
        'expiration_notificator_interval_in_seconds': 'expirationNotificatorIntervalInSeconds',
        'client_reg_default_to_code_flow_with_refresh': 'clientRegDefaultToCodeFlowWithRefresh',
        'session_id_request_parameter_enabled': 'sessionIdRequestParameterEnabled',
        'change_session_id_on_authentication': 'changeSessionIdOnAuthentication',
        'server_session_id_lifetime': 'serverSessionIdLifetime',
        'cookie_domain': 'cookieDomain',
        'logging_layout': 'loggingLayout',
        'fapi_compatibility': 'fapiCompatibility',
        'force_id_token_hint_precense': 'forceIdTokenHintPrecense',
        'force_offline_access_scope_to_enable_refresh_token': 'forceOfflineAccessScopeToEnableRefreshToken',
        'error_reason_enabled': 'errorReasonEnabled',
        'remove_refresh_tokens_for_client_on_logout': 'removeRefreshTokensForClientOnLogout',
        'consent_gathering_script_backward_compatibility': 'consentGatheringScriptBackwardCompatibility',
        'introspection_script_backward_compatibility': 'introspectionScriptBackwardCompatibility',
        'keep_authenticator_attributes_on_acr_change': 'keepAuthenticatorAttributesOnAcrChange',
        'backchannel_client_id': 'backchannelClientId',
        'backchannel_redirect_uri': 'backchannelRedirectUri',
        'backchannel_authentication_endpoint': 'backchannelAuthenticationEndpoint',
        'backchannel_device_registration_endpoint': 'backchannelDeviceRegistrationEndpoint',
        'backchannel_token_delivery_modes_supported': 'backchannelTokenDeliveryModesSupported',
        'backchannel_authentication_request_signing_alg_values_supported': 'backchannelAuthenticationRequestSigningAlgValuesSupported',
        'backchannel_user_code_parameter_supported': 'backchannelUserCodeParameterSupported',
        'backchannel_binding_message_pattern': 'backchannelBindingMessagePattern',
        'backchannel_authentication_response_expires_in': 'backchannelAuthenticationResponseExpiresIn',
        'backchannel_authentication_response_interval': 'backchannelAuthenticationResponseInterval',
        'backchannel_login_hint_claims': 'backchannelLoginHintClaims',
        'ciba_end_user_notification_config': 'cibaEndUserNotificationConfig',
        'backchannel_requests_processor_job_interval_sec': 'backchannelRequestsProcessorJobIntervalSec',
        'backchannel_requests_processor_job_chunk_size': 'backchannelRequestsProcessorJobChunkSize',
        'ciba_grant_life_extra_time_sec': 'cibaGrantLifeExtraTimeSec',
        'ciba_max_expiration_time_allowed_sec': 'cibaMaxExpirationTimeAllowedSec'
    }

    def __init__(self, session_as_jwt=None, issuer=None, base_endpoint=None, authorization_endpoint=None, token_endpoint=None, token_revocation_endpoint=None, user_info_endpoint=None, client_info_endpoint=None, check_session_i_frame=None, end_session_endpoint=None, jwks_uri=None, registration_endpoint=None, open_id_discovery_endpoint=None, open_id_configuration_endpoint=None, id_generation_endpoint=None, introspection_endpoint=None, introspection_access_token_must_have_uma_protection_scope=False, uma_configuration_endpoint=None, sector_identifier_endpoint=None, ox_eleven_generate_key_endpoint=None, ox_eleven_sign_endpoint=None, ox_eleven_verify_signature_endpoint=None, ox_eleven_delete_key_endpoint=None, ox_eleven_jwks_endpoint=None, openid_sub_attribute=None, response_types_supported=None, response_modes_supported=None, grant_types_supported=None, dynamic_grant_type_default=None, subject_types_supported=None, default_subject_type=None, user_info_signing_alg_values_supported=None, user_info_encryption_alg_values_supported=None, user_info_encryption_enc_values_supported=None, id_token_signing_alg_values_supported=None, id_token_encryption_alg_values_supported=None, id_token_encryption_enc_values_supported=None, request_object_signing_alg_values_supported=None, request_object_encryption_alg_values_supported=None, request_object_encryption_enc_values_supported=None, token_endpoint_auth_methods_supported=None, token_endpoint_auth_signing_alg_values_supported=None, dynamic_registration_custom_attributes=None, display_values_supported=None, claim_types_supported=None, service_documentation=None, claims_locales_supported=None, id_token_token_binding_cnf_values_supported=None, ui_locales_supported=None, persist_id_token_in_ldap=False, persist_refresh_token_in_ldap=True, claims_parameter_supported=False, request_parameter_supported=False, request_uri_parameter_supported=False, require_request_uri_registration=False, op_policy_uri=None, op_tos_uri=None, authorization_code_lifetime=None, refresh_token_lifetime=None, id_token_lifetime=None, access_token_lifetime=None, uma_rpt_lifetime=None, uma_ticket_lifetime=None, uma_pct_lifetime=None, uma_resource_lifetime=None, uma_add_scopes_automatically=False, uma_validate_claim_token=False, uma_grant_access_if_no_policies=False, uma_restrict_resource_to_associated_client=False, uma_keep_client_during_resource_set_registration=False, uma_rpt_as_jwt=False, clean_service_interval=None, clean_service_base_dns=None, clean_service_batch_chunk_size=None, key_regeneration_enabled=False, key_regeneration_interval=None, default_signature_algorithm=None, ox_open_id_connect_version=None, jans_id=None, dynamic_registration_enabled=False, dynamic_registration_expiration_time=-1, dynamic_registration_persist_client_authorizations=False, trusted_client_enabled=False, dynamic_registration_scopes_param_enabled=False, dynamic_registration_custom_object_class=None, person_custom_object_class_list=None, authentication_filters_enabled=False, client_authentication_filters_enabled=False, authentication_filters=None, client_authentication_filters=None, session_id_unused_lifetime=None, session_id_unauthenticated_unused_lifetime=120, session_id_lifetime=86400, session_id_enabled=False, session_id_persist_on_prompt_none=False, configuration_update_interval=None, css_location=None, js_location=None, img_location=None, metric_reporter_interval=None, metric_reporter_keep_data_days=None, metric_reporter_enabled=True, pairwise_id_type=None, pairwise_calculation_key=None, pairwise_calculation_salt=None, share_subject_id_between_clients_with_same_sector_id=False, web_keys_storage=None, dn_name=None, key_store_file=None, key_store_secret=None, end_session_with_access_token=None, client_white_list=None, client_black_list=None, legacy_id_token_claims=None, custom_headers_with_authorization_response=None, front_channel_logout_session_supported=None, use_cache_for_all_implicit_flow_objects=False, invalidate_session_cookies_after_authorization_flow=False, update_user_last_logon_time=False, update_client_access_time=False, enable_client_grant_type_update=False, logging_level=None, cors_configuration_filters=None, log_client_id_on_client_authentication=None, log_client_name_on_client_authentication=None, authorization_request_custom_allowed_parameters=None, legacy_dynamic_registration_scope_param=None, openid_scope_backward_compatibility=False, skip_authorization_for_open_id_scope_and_pairwise_id=False, allow_post_logout_redirect_without_validation=False, http_logging_enabled=False, http_logging_exlude_paths=None, external_logger_configuration=None, disable_u2f_endpoint=False, disable_jdk_logger=True, jms_user_name=None, jms_password=None, jms_broker_uri_set=None, ox_eleven_test_mode_token=None, enabled_o_auth_audit_logging=None, authentication_protection_configuration=None, error_handling_method=None, use_local_cache=False, spontaneous_scope_lifetime=None, jwks_algorithms_supported=None, dynamic_registration_password_grant_type_enabled=False, return_client_secret_on_read=False, reject_jwt_with_none_alg=True, expiration_notificator_enabled=True, expiration_notificator_map_size_limit=100000, expiration_notificator_interval_in_seconds=600, client_reg_default_to_code_flow_with_refresh=None, session_id_request_parameter_enabled=False, change_session_id_on_authentication=True, server_session_id_lifetime=86400, cookie_domain=None, logging_layout=None, fapi_compatibility=False, force_id_token_hint_precense=False, force_offline_access_scope_to_enable_refresh_token=True, error_reason_enabled=False, remove_refresh_tokens_for_client_on_logout=True, consent_gathering_script_backward_compatibility=False, introspection_script_backward_compatibility=False, keep_authenticator_attributes_on_acr_change=False, backchannel_client_id=None, backchannel_redirect_uri=None, backchannel_authentication_endpoint=None, backchannel_device_registration_endpoint=None, backchannel_token_delivery_modes_supported=None, backchannel_authentication_request_signing_alg_values_supported=None, backchannel_user_code_parameter_supported=None, backchannel_binding_message_pattern=None, backchannel_authentication_response_expires_in=None, backchannel_authentication_response_interval=None, backchannel_login_hint_claims=None, ciba_end_user_notification_config=None, backchannel_requests_processor_job_interval_sec=None, backchannel_requests_processor_job_chunk_size=None, ciba_grant_life_extra_time_sec=None, ciba_max_expiration_time_allowed_sec=None):  # noqa: E501
        """AppConfiguration - a model defined in Swagger"""  # noqa: E501
        self._session_as_jwt = None
        self._issuer = None
        self._base_endpoint = None
        self._authorization_endpoint = None
        self._token_endpoint = None
        self._token_revocation_endpoint = None
        self._user_info_endpoint = None
        self._client_info_endpoint = None
        self._check_session_i_frame = None
        self._end_session_endpoint = None
        self._jwks_uri = None
        self._registration_endpoint = None
        self._open_id_discovery_endpoint = None
        self._open_id_configuration_endpoint = None
        self._id_generation_endpoint = None
        self._introspection_endpoint = None
        self._introspection_access_token_must_have_uma_protection_scope = None
        self._uma_configuration_endpoint = None
        self._sector_identifier_endpoint = None
        self._ox_eleven_generate_key_endpoint = None
        self._ox_eleven_sign_endpoint = None
        self._ox_eleven_verify_signature_endpoint = None
        self._ox_eleven_delete_key_endpoint = None
        self._ox_eleven_jwks_endpoint = None
        self._openid_sub_attribute = None
        self._response_types_supported = None
        self._response_modes_supported = None
        self._grant_types_supported = None
        self._dynamic_grant_type_default = None
        self._subject_types_supported = None
        self._default_subject_type = None
        self._user_info_signing_alg_values_supported = None
        self._user_info_encryption_alg_values_supported = None
        self._user_info_encryption_enc_values_supported = None
        self._id_token_signing_alg_values_supported = None
        self._id_token_encryption_alg_values_supported = None
        self._id_token_encryption_enc_values_supported = None
        self._request_object_signing_alg_values_supported = None
        self._request_object_encryption_alg_values_supported = None
        self._request_object_encryption_enc_values_supported = None
        self._token_endpoint_auth_methods_supported = None
        self._token_endpoint_auth_signing_alg_values_supported = None
        self._dynamic_registration_custom_attributes = None
        self._display_values_supported = None
        self._claim_types_supported = None
        self._service_documentation = None
        self._claims_locales_supported = None
        self._id_token_token_binding_cnf_values_supported = None
        self._ui_locales_supported = None
        self._persist_id_token_in_ldap = None
        self._persist_refresh_token_in_ldap = None
        self._claims_parameter_supported = None
        self._request_parameter_supported = None
        self._request_uri_parameter_supported = None
        self._require_request_uri_registration = None
        self._op_policy_uri = None
        self._op_tos_uri = None
        self._authorization_code_lifetime = None
        self._refresh_token_lifetime = None
        self._id_token_lifetime = None
        self._access_token_lifetime = None
        self._uma_rpt_lifetime = None
        self._uma_ticket_lifetime = None
        self._uma_pct_lifetime = None
        self._uma_resource_lifetime = None
        self._uma_add_scopes_automatically = None
        self._uma_validate_claim_token = None
        self._uma_grant_access_if_no_policies = None
        self._uma_restrict_resource_to_associated_client = None
        self._uma_keep_client_during_resource_set_registration = None
        self._uma_rpt_as_jwt = None
        self._clean_service_interval = None
        self._clean_service_base_dns = None
        self._clean_service_batch_chunk_size = None
        self._key_regeneration_enabled = None
        self._key_regeneration_interval = None
        self._default_signature_algorithm = None
        self._ox_open_id_connect_version = None
        self._jans_id = None
        self._dynamic_registration_enabled = None
        self._dynamic_registration_expiration_time = None
        self._dynamic_registration_persist_client_authorizations = None
        self._trusted_client_enabled = None
        self._dynamic_registration_scopes_param_enabled = None
        self._dynamic_registration_custom_object_class = None
        self._person_custom_object_class_list = None
        self._authentication_filters_enabled = None
        self._client_authentication_filters_enabled = None
        self._authentication_filters = None
        self._client_authentication_filters = None
        self._session_id_unused_lifetime = None
        self._session_id_unauthenticated_unused_lifetime = None
        self._session_id_lifetime = None
        self._session_id_enabled = None
        self._session_id_persist_on_prompt_none = None
        self._configuration_update_interval = None
        self._css_location = None
        self._js_location = None
        self._img_location = None
        self._metric_reporter_interval = None
        self._metric_reporter_keep_data_days = None
        self._metric_reporter_enabled = None
        self._pairwise_id_type = None
        self._pairwise_calculation_key = None
        self._pairwise_calculation_salt = None
        self._share_subject_id_between_clients_with_same_sector_id = None
        self._web_keys_storage = None
        self._dn_name = None
        self._key_store_file = None
        self._key_store_secret = None
        self._end_session_with_access_token = None
        self._client_white_list = None
        self._client_black_list = None
        self._legacy_id_token_claims = None
        self._custom_headers_with_authorization_response = None
        self._front_channel_logout_session_supported = None
        self._use_cache_for_all_implicit_flow_objects = None
        self._invalidate_session_cookies_after_authorization_flow = None
        self._update_user_last_logon_time = None
        self._update_client_access_time = None
        self._enable_client_grant_type_update = None
        self._logging_level = None
        self._cors_configuration_filters = None
        self._log_client_id_on_client_authentication = None
        self._log_client_name_on_client_authentication = None
        self._authorization_request_custom_allowed_parameters = None
        self._legacy_dynamic_registration_scope_param = None
        self._openid_scope_backward_compatibility = None
        self._skip_authorization_for_open_id_scope_and_pairwise_id = None
        self._allow_post_logout_redirect_without_validation = None
        self._http_logging_enabled = None
        self._http_logging_exlude_paths = None
        self._external_logger_configuration = None
        self._disable_u2f_endpoint = None
        self._disable_jdk_logger = None
        self._jms_user_name = None
        self._jms_password = None
        self._jms_broker_uri_set = None
        self._ox_eleven_test_mode_token = None
        self._enabled_o_auth_audit_logging = None
        self._authentication_protection_configuration = None
        self._error_handling_method = None
        self._use_local_cache = None
        self._spontaneous_scope_lifetime = None
        self._jwks_algorithms_supported = None
        self._dynamic_registration_password_grant_type_enabled = None
        self._return_client_secret_on_read = None
        self._reject_jwt_with_none_alg = None
        self._expiration_notificator_enabled = None
        self._expiration_notificator_map_size_limit = None
        self._expiration_notificator_interval_in_seconds = None
        self._client_reg_default_to_code_flow_with_refresh = None
        self._session_id_request_parameter_enabled = None
        self._change_session_id_on_authentication = None
        self._server_session_id_lifetime = None
        self._cookie_domain = None
        self._logging_layout = None
        self._fapi_compatibility = None
        self._force_id_token_hint_precense = None
        self._force_offline_access_scope_to_enable_refresh_token = None
        self._error_reason_enabled = None
        self._remove_refresh_tokens_for_client_on_logout = None
        self._consent_gathering_script_backward_compatibility = None
        self._introspection_script_backward_compatibility = None
        self._keep_authenticator_attributes_on_acr_change = None
        self._backchannel_client_id = None
        self._backchannel_redirect_uri = None
        self._backchannel_authentication_endpoint = None
        self._backchannel_device_registration_endpoint = None
        self._backchannel_token_delivery_modes_supported = None
        self._backchannel_authentication_request_signing_alg_values_supported = None
        self._backchannel_user_code_parameter_supported = None
        self._backchannel_binding_message_pattern = None
        self._backchannel_authentication_response_expires_in = None
        self._backchannel_authentication_response_interval = None
        self._backchannel_login_hint_claims = None
        self._ciba_end_user_notification_config = None
        self._backchannel_requests_processor_job_interval_sec = None
        self._backchannel_requests_processor_job_chunk_size = None
        self._ciba_grant_life_extra_time_sec = None
        self._ciba_max_expiration_time_allowed_sec = None
        self.discriminator = None
        if session_as_jwt is not None:
            self.session_as_jwt = session_as_jwt
        if issuer is not None:
            self.issuer = issuer
        if base_endpoint is not None:
            self.base_endpoint = base_endpoint
        if authorization_endpoint is not None:
            self.authorization_endpoint = authorization_endpoint
        if token_endpoint is not None:
            self.token_endpoint = token_endpoint
        if token_revocation_endpoint is not None:
            self.token_revocation_endpoint = token_revocation_endpoint
        if user_info_endpoint is not None:
            self.user_info_endpoint = user_info_endpoint
        if client_info_endpoint is not None:
            self.client_info_endpoint = client_info_endpoint
        if check_session_i_frame is not None:
            self.check_session_i_frame = check_session_i_frame
        if end_session_endpoint is not None:
            self.end_session_endpoint = end_session_endpoint
        if jwks_uri is not None:
            self.jwks_uri = jwks_uri
        if registration_endpoint is not None:
            self.registration_endpoint = registration_endpoint
        if open_id_discovery_endpoint is not None:
            self.open_id_discovery_endpoint = open_id_discovery_endpoint
        if open_id_configuration_endpoint is not None:
            self.open_id_configuration_endpoint = open_id_configuration_endpoint
        if id_generation_endpoint is not None:
            self.id_generation_endpoint = id_generation_endpoint
        if introspection_endpoint is not None:
            self.introspection_endpoint = introspection_endpoint
        if introspection_access_token_must_have_uma_protection_scope is not None:
            self.introspection_access_token_must_have_uma_protection_scope = introspection_access_token_must_have_uma_protection_scope
        if uma_configuration_endpoint is not None:
            self.uma_configuration_endpoint = uma_configuration_endpoint
        if sector_identifier_endpoint is not None:
            self.sector_identifier_endpoint = sector_identifier_endpoint
        if ox_eleven_generate_key_endpoint is not None:
            self.ox_eleven_generate_key_endpoint = ox_eleven_generate_key_endpoint
        if ox_eleven_sign_endpoint is not None:
            self.ox_eleven_sign_endpoint = ox_eleven_sign_endpoint
        if ox_eleven_verify_signature_endpoint is not None:
            self.ox_eleven_verify_signature_endpoint = ox_eleven_verify_signature_endpoint
        if ox_eleven_delete_key_endpoint is not None:
            self.ox_eleven_delete_key_endpoint = ox_eleven_delete_key_endpoint
        if ox_eleven_jwks_endpoint is not None:
            self.ox_eleven_jwks_endpoint = ox_eleven_jwks_endpoint
        if openid_sub_attribute is not None:
            self.openid_sub_attribute = openid_sub_attribute
        if response_types_supported is not None:
            self.response_types_supported = response_types_supported
        if response_modes_supported is not None:
            self.response_modes_supported = response_modes_supported
        if grant_types_supported is not None:
            self.grant_types_supported = grant_types_supported
        if dynamic_grant_type_default is not None:
            self.dynamic_grant_type_default = dynamic_grant_type_default
        if subject_types_supported is not None:
            self.subject_types_supported = subject_types_supported
        if default_subject_type is not None:
            self.default_subject_type = default_subject_type
        if user_info_signing_alg_values_supported is not None:
            self.user_info_signing_alg_values_supported = user_info_signing_alg_values_supported
        if user_info_encryption_alg_values_supported is not None:
            self.user_info_encryption_alg_values_supported = user_info_encryption_alg_values_supported
        if user_info_encryption_enc_values_supported is not None:
            self.user_info_encryption_enc_values_supported = user_info_encryption_enc_values_supported
        if id_token_signing_alg_values_supported is not None:
            self.id_token_signing_alg_values_supported = id_token_signing_alg_values_supported
        if id_token_encryption_alg_values_supported is not None:
            self.id_token_encryption_alg_values_supported = id_token_encryption_alg_values_supported
        if id_token_encryption_enc_values_supported is not None:
            self.id_token_encryption_enc_values_supported = id_token_encryption_enc_values_supported
        if request_object_signing_alg_values_supported is not None:
            self.request_object_signing_alg_values_supported = request_object_signing_alg_values_supported
        if request_object_encryption_alg_values_supported is not None:
            self.request_object_encryption_alg_values_supported = request_object_encryption_alg_values_supported
        if request_object_encryption_enc_values_supported is not None:
            self.request_object_encryption_enc_values_supported = request_object_encryption_enc_values_supported
        if token_endpoint_auth_methods_supported is not None:
            self.token_endpoint_auth_methods_supported = token_endpoint_auth_methods_supported
        if token_endpoint_auth_signing_alg_values_supported is not None:
            self.token_endpoint_auth_signing_alg_values_supported = token_endpoint_auth_signing_alg_values_supported
        if dynamic_registration_custom_attributes is not None:
            self.dynamic_registration_custom_attributes = dynamic_registration_custom_attributes
        if display_values_supported is not None:
            self.display_values_supported = display_values_supported
        if claim_types_supported is not None:
            self.claim_types_supported = claim_types_supported
        if service_documentation is not None:
            self.service_documentation = service_documentation
        if claims_locales_supported is not None:
            self.claims_locales_supported = claims_locales_supported
        if id_token_token_binding_cnf_values_supported is not None:
            self.id_token_token_binding_cnf_values_supported = id_token_token_binding_cnf_values_supported
        if ui_locales_supported is not None:
            self.ui_locales_supported = ui_locales_supported
        if persist_id_token_in_ldap is not None:
            self.persist_id_token_in_ldap = persist_id_token_in_ldap
        if persist_refresh_token_in_ldap is not None:
            self.persist_refresh_token_in_ldap = persist_refresh_token_in_ldap
        if claims_parameter_supported is not None:
            self.claims_parameter_supported = claims_parameter_supported
        if request_parameter_supported is not None:
            self.request_parameter_supported = request_parameter_supported
        if request_uri_parameter_supported is not None:
            self.request_uri_parameter_supported = request_uri_parameter_supported
        if require_request_uri_registration is not None:
            self.require_request_uri_registration = require_request_uri_registration
        if op_policy_uri is not None:
            self.op_policy_uri = op_policy_uri
        if op_tos_uri is not None:
            self.op_tos_uri = op_tos_uri
        if authorization_code_lifetime is not None:
            self.authorization_code_lifetime = authorization_code_lifetime
        if refresh_token_lifetime is not None:
            self.refresh_token_lifetime = refresh_token_lifetime
        if id_token_lifetime is not None:
            self.id_token_lifetime = id_token_lifetime
        if access_token_lifetime is not None:
            self.access_token_lifetime = access_token_lifetime
        if uma_rpt_lifetime is not None:
            self.uma_rpt_lifetime = uma_rpt_lifetime
        if uma_ticket_lifetime is not None:
            self.uma_ticket_lifetime = uma_ticket_lifetime
        if uma_pct_lifetime is not None:
            self.uma_pct_lifetime = uma_pct_lifetime
        if uma_resource_lifetime is not None:
            self.uma_resource_lifetime = uma_resource_lifetime
        if uma_add_scopes_automatically is not None:
            self.uma_add_scopes_automatically = uma_add_scopes_automatically
        if uma_validate_claim_token is not None:
            self.uma_validate_claim_token = uma_validate_claim_token
        if uma_grant_access_if_no_policies is not None:
            self.uma_grant_access_if_no_policies = uma_grant_access_if_no_policies
        if uma_restrict_resource_to_associated_client is not None:
            self.uma_restrict_resource_to_associated_client = uma_restrict_resource_to_associated_client
        if uma_keep_client_during_resource_set_registration is not None:
            self.uma_keep_client_during_resource_set_registration = uma_keep_client_during_resource_set_registration
        if uma_rpt_as_jwt is not None:
            self.uma_rpt_as_jwt = uma_rpt_as_jwt
        if clean_service_interval is not None:
            self.clean_service_interval = clean_service_interval
        if clean_service_base_dns is not None:
            self.clean_service_base_dns = clean_service_base_dns
        if clean_service_batch_chunk_size is not None:
            self.clean_service_batch_chunk_size = clean_service_batch_chunk_size
        if key_regeneration_enabled is not None:
            self.key_regeneration_enabled = key_regeneration_enabled
        if key_regeneration_interval is not None:
            self.key_regeneration_interval = key_regeneration_interval
        if default_signature_algorithm is not None:
            self.default_signature_algorithm = default_signature_algorithm
        if ox_open_id_connect_version is not None:
            self.ox_open_id_connect_version = ox_open_id_connect_version
        if jans_id is not None:
            self.jans_id = jans_id
        if dynamic_registration_enabled is not None:
            self.dynamic_registration_enabled = dynamic_registration_enabled
        if dynamic_registration_expiration_time is not None:
            self.dynamic_registration_expiration_time = dynamic_registration_expiration_time
        if dynamic_registration_persist_client_authorizations is not None:
            self.dynamic_registration_persist_client_authorizations = dynamic_registration_persist_client_authorizations
        if trusted_client_enabled is not None:
            self.trusted_client_enabled = trusted_client_enabled
        if dynamic_registration_scopes_param_enabled is not None:
            self.dynamic_registration_scopes_param_enabled = dynamic_registration_scopes_param_enabled
        if dynamic_registration_custom_object_class is not None:
            self.dynamic_registration_custom_object_class = dynamic_registration_custom_object_class
        if person_custom_object_class_list is not None:
            self.person_custom_object_class_list = person_custom_object_class_list
        if authentication_filters_enabled is not None:
            self.authentication_filters_enabled = authentication_filters_enabled
        if client_authentication_filters_enabled is not None:
            self.client_authentication_filters_enabled = client_authentication_filters_enabled
        if authentication_filters is not None:
            self.authentication_filters = authentication_filters
        if client_authentication_filters is not None:
            self.client_authentication_filters = client_authentication_filters
        if session_id_unused_lifetime is not None:
            self.session_id_unused_lifetime = session_id_unused_lifetime
        if session_id_unauthenticated_unused_lifetime is not None:
            self.session_id_unauthenticated_unused_lifetime = session_id_unauthenticated_unused_lifetime
        if session_id_lifetime is not None:
            self.session_id_lifetime = session_id_lifetime
        if session_id_enabled is not None:
            self.session_id_enabled = session_id_enabled
        if session_id_persist_on_prompt_none is not None:
            self.session_id_persist_on_prompt_none = session_id_persist_on_prompt_none
        if configuration_update_interval is not None:
            self.configuration_update_interval = configuration_update_interval
        if css_location is not None:
            self.css_location = css_location
        if js_location is not None:
            self.js_location = js_location
        if img_location is not None:
            self.img_location = img_location
        if metric_reporter_interval is not None:
            self.metric_reporter_interval = metric_reporter_interval
        if metric_reporter_keep_data_days is not None:
            self.metric_reporter_keep_data_days = metric_reporter_keep_data_days
        if metric_reporter_enabled is not None:
            self.metric_reporter_enabled = metric_reporter_enabled
        if pairwise_id_type is not None:
            self.pairwise_id_type = pairwise_id_type
        if pairwise_calculation_key is not None:
            self.pairwise_calculation_key = pairwise_calculation_key
        if pairwise_calculation_salt is not None:
            self.pairwise_calculation_salt = pairwise_calculation_salt
        if share_subject_id_between_clients_with_same_sector_id is not None:
            self.share_subject_id_between_clients_with_same_sector_id = share_subject_id_between_clients_with_same_sector_id
        if web_keys_storage is not None:
            self.web_keys_storage = web_keys_storage
        if dn_name is not None:
            self.dn_name = dn_name
        if key_store_file is not None:
            self.key_store_file = key_store_file
        if key_store_secret is not None:
            self.key_store_secret = key_store_secret
        if end_session_with_access_token is not None:
            self.end_session_with_access_token = end_session_with_access_token
        if client_white_list is not None:
            self.client_white_list = client_white_list
        if client_black_list is not None:
            self.client_black_list = client_black_list
        if legacy_id_token_claims is not None:
            self.legacy_id_token_claims = legacy_id_token_claims
        if custom_headers_with_authorization_response is not None:
            self.custom_headers_with_authorization_response = custom_headers_with_authorization_response
        if front_channel_logout_session_supported is not None:
            self.front_channel_logout_session_supported = front_channel_logout_session_supported
        if use_cache_for_all_implicit_flow_objects is not None:
            self.use_cache_for_all_implicit_flow_objects = use_cache_for_all_implicit_flow_objects
        if invalidate_session_cookies_after_authorization_flow is not None:
            self.invalidate_session_cookies_after_authorization_flow = invalidate_session_cookies_after_authorization_flow
        if update_user_last_logon_time is not None:
            self.update_user_last_logon_time = update_user_last_logon_time
        if update_client_access_time is not None:
            self.update_client_access_time = update_client_access_time
        if enable_client_grant_type_update is not None:
            self.enable_client_grant_type_update = enable_client_grant_type_update
        if logging_level is not None:
            self.logging_level = logging_level
        if cors_configuration_filters is not None:
            self.cors_configuration_filters = cors_configuration_filters
        if log_client_id_on_client_authentication is not None:
            self.log_client_id_on_client_authentication = log_client_id_on_client_authentication
        if log_client_name_on_client_authentication is not None:
            self.log_client_name_on_client_authentication = log_client_name_on_client_authentication
        if authorization_request_custom_allowed_parameters is not None:
            self.authorization_request_custom_allowed_parameters = authorization_request_custom_allowed_parameters
        if legacy_dynamic_registration_scope_param is not None:
            self.legacy_dynamic_registration_scope_param = legacy_dynamic_registration_scope_param
        if openid_scope_backward_compatibility is not None:
            self.openid_scope_backward_compatibility = openid_scope_backward_compatibility
        if skip_authorization_for_open_id_scope_and_pairwise_id is not None:
            self.skip_authorization_for_open_id_scope_and_pairwise_id = skip_authorization_for_open_id_scope_and_pairwise_id
        if allow_post_logout_redirect_without_validation is not None:
            self.allow_post_logout_redirect_without_validation = allow_post_logout_redirect_without_validation
        if http_logging_enabled is not None:
            self.http_logging_enabled = http_logging_enabled
        if http_logging_exlude_paths is not None:
            self.http_logging_exlude_paths = http_logging_exlude_paths
        if external_logger_configuration is not None:
            self.external_logger_configuration = external_logger_configuration
        if disable_u2f_endpoint is not None:
            self.disable_u2f_endpoint = disable_u2f_endpoint
        if disable_jdk_logger is not None:
            self.disable_jdk_logger = disable_jdk_logger
        if jms_user_name is not None:
            self.jms_user_name = jms_user_name
        if jms_password is not None:
            self.jms_password = jms_password
        if jms_broker_uri_set is not None:
            self.jms_broker_uri_set = jms_broker_uri_set
        if ox_eleven_test_mode_token is not None:
            self.ox_eleven_test_mode_token = ox_eleven_test_mode_token
        if enabled_o_auth_audit_logging is not None:
            self.enabled_o_auth_audit_logging = enabled_o_auth_audit_logging
        if authentication_protection_configuration is not None:
            self.authentication_protection_configuration = authentication_protection_configuration
        if error_handling_method is not None:
            self.error_handling_method = error_handling_method
        if use_local_cache is not None:
            self.use_local_cache = use_local_cache
        if spontaneous_scope_lifetime is not None:
            self.spontaneous_scope_lifetime = spontaneous_scope_lifetime
        if jwks_algorithms_supported is not None:
            self.jwks_algorithms_supported = jwks_algorithms_supported
        if dynamic_registration_password_grant_type_enabled is not None:
            self.dynamic_registration_password_grant_type_enabled = dynamic_registration_password_grant_type_enabled
        if return_client_secret_on_read is not None:
            self.return_client_secret_on_read = return_client_secret_on_read
        if reject_jwt_with_none_alg is not None:
            self.reject_jwt_with_none_alg = reject_jwt_with_none_alg
        if expiration_notificator_enabled is not None:
            self.expiration_notificator_enabled = expiration_notificator_enabled
        if expiration_notificator_map_size_limit is not None:
            self.expiration_notificator_map_size_limit = expiration_notificator_map_size_limit
        if expiration_notificator_interval_in_seconds is not None:
            self.expiration_notificator_interval_in_seconds = expiration_notificator_interval_in_seconds
        if client_reg_default_to_code_flow_with_refresh is not None:
            self.client_reg_default_to_code_flow_with_refresh = client_reg_default_to_code_flow_with_refresh
        if session_id_request_parameter_enabled is not None:
            self.session_id_request_parameter_enabled = session_id_request_parameter_enabled
        if change_session_id_on_authentication is not None:
            self.change_session_id_on_authentication = change_session_id_on_authentication
        if server_session_id_lifetime is not None:
            self.server_session_id_lifetime = server_session_id_lifetime
        if cookie_domain is not None:
            self.cookie_domain = cookie_domain
        if logging_layout is not None:
            self.logging_layout = logging_layout
        if fapi_compatibility is not None:
            self.fapi_compatibility = fapi_compatibility
        if force_id_token_hint_precense is not None:
            self.force_id_token_hint_precense = force_id_token_hint_precense
        if force_offline_access_scope_to_enable_refresh_token is not None:
            self.force_offline_access_scope_to_enable_refresh_token = force_offline_access_scope_to_enable_refresh_token
        if error_reason_enabled is not None:
            self.error_reason_enabled = error_reason_enabled
        if remove_refresh_tokens_for_client_on_logout is not None:
            self.remove_refresh_tokens_for_client_on_logout = remove_refresh_tokens_for_client_on_logout
        if consent_gathering_script_backward_compatibility is not None:
            self.consent_gathering_script_backward_compatibility = consent_gathering_script_backward_compatibility
        if introspection_script_backward_compatibility is not None:
            self.introspection_script_backward_compatibility = introspection_script_backward_compatibility
        if keep_authenticator_attributes_on_acr_change is not None:
            self.keep_authenticator_attributes_on_acr_change = keep_authenticator_attributes_on_acr_change
        if backchannel_client_id is not None:
            self.backchannel_client_id = backchannel_client_id
        if backchannel_redirect_uri is not None:
            self.backchannel_redirect_uri = backchannel_redirect_uri
        if backchannel_authentication_endpoint is not None:
            self.backchannel_authentication_endpoint = backchannel_authentication_endpoint
        if backchannel_device_registration_endpoint is not None:
            self.backchannel_device_registration_endpoint = backchannel_device_registration_endpoint
        if backchannel_token_delivery_modes_supported is not None:
            self.backchannel_token_delivery_modes_supported = backchannel_token_delivery_modes_supported
        if backchannel_authentication_request_signing_alg_values_supported is not None:
            self.backchannel_authentication_request_signing_alg_values_supported = backchannel_authentication_request_signing_alg_values_supported
        if backchannel_user_code_parameter_supported is not None:
            self.backchannel_user_code_parameter_supported = backchannel_user_code_parameter_supported
        if backchannel_binding_message_pattern is not None:
            self.backchannel_binding_message_pattern = backchannel_binding_message_pattern
        if backchannel_authentication_response_expires_in is not None:
            self.backchannel_authentication_response_expires_in = backchannel_authentication_response_expires_in
        if backchannel_authentication_response_interval is not None:
            self.backchannel_authentication_response_interval = backchannel_authentication_response_interval
        if backchannel_login_hint_claims is not None:
            self.backchannel_login_hint_claims = backchannel_login_hint_claims
        if ciba_end_user_notification_config is not None:
            self.ciba_end_user_notification_config = ciba_end_user_notification_config
        if backchannel_requests_processor_job_interval_sec is not None:
            self.backchannel_requests_processor_job_interval_sec = backchannel_requests_processor_job_interval_sec
        if backchannel_requests_processor_job_chunk_size is not None:
            self.backchannel_requests_processor_job_chunk_size = backchannel_requests_processor_job_chunk_size
        if ciba_grant_life_extra_time_sec is not None:
            self.ciba_grant_life_extra_time_sec = ciba_grant_life_extra_time_sec
        if ciba_max_expiration_time_allowed_sec is not None:
            self.ciba_max_expiration_time_allowed_sec = ciba_max_expiration_time_allowed_sec

    @property
    def session_as_jwt(self):
        """Gets the session_as_jwt of this AppConfiguration.  # noqa: E501

        Boolean value true saves session data as a JWT.  # noqa: E501

        :return: The session_as_jwt of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._session_as_jwt

    @session_as_jwt.setter
    def session_as_jwt(self, session_as_jwt):
        """Sets the session_as_jwt of this AppConfiguration.

        Boolean value true saves session data as a JWT.  # noqa: E501

        :param session_as_jwt: The session_as_jwt of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._session_as_jwt = session_as_jwt

    @property
    def issuer(self):
        """Gets the issuer of this AppConfiguration.  # noqa: E501

        URL using the https scheme that OP asserts as Issuer identifier.  # noqa: E501

        :return: The issuer of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this AppConfiguration.

        URL using the https scheme that OP asserts as Issuer identifier.  # noqa: E501

        :param issuer: The issuer of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def base_endpoint(self):
        """Gets the base_endpoint of this AppConfiguration.  # noqa: E501

        The base URL for endpoints.  # noqa: E501

        :return: The base_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._base_endpoint

    @base_endpoint.setter
    def base_endpoint(self, base_endpoint):
        """Sets the base_endpoint of this AppConfiguration.

        The base URL for endpoints.  # noqa: E501

        :param base_endpoint: The base_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._base_endpoint = base_endpoint

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this AppConfiguration.  # noqa: E501

        The authorization endpoint URL.  # noqa: E501

        :return: The authorization_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this AppConfiguration.

        The authorization endpoint URL.  # noqa: E501

        :param authorization_endpoint: The authorization_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._authorization_endpoint = authorization_endpoint

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this AppConfiguration.  # noqa: E501

        The token endpoint URL.  # noqa: E501

        :return: The token_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this AppConfiguration.

        The token endpoint URL.  # noqa: E501

        :param token_endpoint: The token_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._token_endpoint = token_endpoint

    @property
    def token_revocation_endpoint(self):
        """Gets the token_revocation_endpoint of this AppConfiguration.  # noqa: E501

        The URL for the access_token or refresh_token revocation endpoint.  # noqa: E501

        :return: The token_revocation_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._token_revocation_endpoint

    @token_revocation_endpoint.setter
    def token_revocation_endpoint(self, token_revocation_endpoint):
        """Sets the token_revocation_endpoint of this AppConfiguration.

        The URL for the access_token or refresh_token revocation endpoint.  # noqa: E501

        :param token_revocation_endpoint: The token_revocation_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._token_revocation_endpoint = token_revocation_endpoint

    @property
    def user_info_endpoint(self):
        """Gets the user_info_endpoint of this AppConfiguration.  # noqa: E501

        The User Info endpoint URL.  # noqa: E501

        :return: The user_info_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._user_info_endpoint

    @user_info_endpoint.setter
    def user_info_endpoint(self, user_info_endpoint):
        """Sets the user_info_endpoint of this AppConfiguration.

        The User Info endpoint URL.  # noqa: E501

        :param user_info_endpoint: The user_info_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._user_info_endpoint = user_info_endpoint

    @property
    def client_info_endpoint(self):
        """Gets the client_info_endpoint of this AppConfiguration.  # noqa: E501

        The Client Info endpoint URL.  # noqa: E501

        :return: The client_info_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._client_info_endpoint

    @client_info_endpoint.setter
    def client_info_endpoint(self, client_info_endpoint):
        """Sets the client_info_endpoint of this AppConfiguration.

        The Client Info endpoint URL.  # noqa: E501

        :param client_info_endpoint: The client_info_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._client_info_endpoint = client_info_endpoint

    @property
    def check_session_i_frame(self):
        """Gets the check_session_i_frame of this AppConfiguration.  # noqa: E501

        URL for an OP IFrame that supports cross-origin communications for session state information with the RP Client using the HTML5 postMessage API.  # noqa: E501

        :return: The check_session_i_frame of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._check_session_i_frame

    @check_session_i_frame.setter
    def check_session_i_frame(self, check_session_i_frame):
        """Sets the check_session_i_frame of this AppConfiguration.

        URL for an OP IFrame that supports cross-origin communications for session state information with the RP Client using the HTML5 postMessage API.  # noqa: E501

        :param check_session_i_frame: The check_session_i_frame of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._check_session_i_frame = check_session_i_frame

    @property
    def end_session_endpoint(self):
        """Gets the end_session_endpoint of this AppConfiguration.  # noqa: E501

        URL at the OP to which an RP can perform a redirect to request that the end user be logged out at the OP.  # noqa: E501

        :return: The end_session_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._end_session_endpoint

    @end_session_endpoint.setter
    def end_session_endpoint(self, end_session_endpoint):
        """Sets the end_session_endpoint of this AppConfiguration.

        URL at the OP to which an RP can perform a redirect to request that the end user be logged out at the OP.  # noqa: E501

        :param end_session_endpoint: The end_session_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._end_session_endpoint = end_session_endpoint

    @property
    def jwks_uri(self):
        """Gets the jwks_uri of this AppConfiguration.  # noqa: E501

        URL of the OP's JSON Web Key Set (JWK) document. This contains the signing key(s) the RP uses to validate signatures from the OP.  # noqa: E501

        :return: The jwks_uri of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._jwks_uri

    @jwks_uri.setter
    def jwks_uri(self, jwks_uri):
        """Sets the jwks_uri of this AppConfiguration.

        URL of the OP's JSON Web Key Set (JWK) document. This contains the signing key(s) the RP uses to validate signatures from the OP.  # noqa: E501

        :param jwks_uri: The jwks_uri of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._jwks_uri = jwks_uri

    @property
    def registration_endpoint(self):
        """Gets the registration_endpoint of this AppConfiguration.  # noqa: E501

        URL of the Registration Endpoint.  # noqa: E501

        :return: The registration_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._registration_endpoint

    @registration_endpoint.setter
    def registration_endpoint(self, registration_endpoint):
        """Sets the registration_endpoint of this AppConfiguration.

        URL of the Registration Endpoint.  # noqa: E501

        :param registration_endpoint: The registration_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._registration_endpoint = registration_endpoint

    @property
    def open_id_discovery_endpoint(self):
        """Gets the open_id_discovery_endpoint of this AppConfiguration.  # noqa: E501

        URL for the Discovery Endpoint.  # noqa: E501

        :return: The open_id_discovery_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._open_id_discovery_endpoint

    @open_id_discovery_endpoint.setter
    def open_id_discovery_endpoint(self, open_id_discovery_endpoint):
        """Sets the open_id_discovery_endpoint of this AppConfiguration.

        URL for the Discovery Endpoint.  # noqa: E501

        :param open_id_discovery_endpoint: The open_id_discovery_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._open_id_discovery_endpoint = open_id_discovery_endpoint

    @property
    def open_id_configuration_endpoint(self):
        """Gets the open_id_configuration_endpoint of this AppConfiguration.  # noqa: E501

        URL for the Open ID Connect Configuration Endpoint.  # noqa: E501

        :return: The open_id_configuration_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._open_id_configuration_endpoint

    @open_id_configuration_endpoint.setter
    def open_id_configuration_endpoint(self, open_id_configuration_endpoint):
        """Sets the open_id_configuration_endpoint of this AppConfiguration.

        URL for the Open ID Connect Configuration Endpoint.  # noqa: E501

        :param open_id_configuration_endpoint: The open_id_configuration_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._open_id_configuration_endpoint = open_id_configuration_endpoint

    @property
    def id_generation_endpoint(self):
        """Gets the id_generation_endpoint of this AppConfiguration.  # noqa: E501

        URL for the ID Generation Endpoint.  # noqa: E501

        :return: The id_generation_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._id_generation_endpoint

    @id_generation_endpoint.setter
    def id_generation_endpoint(self, id_generation_endpoint):
        """Sets the id_generation_endpoint of this AppConfiguration.

        URL for the ID Generation Endpoint.  # noqa: E501

        :param id_generation_endpoint: The id_generation_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._id_generation_endpoint = id_generation_endpoint

    @property
    def introspection_endpoint(self):
        """Gets the introspection_endpoint of this AppConfiguration.  # noqa: E501

        URL for the Introspection Endpoint.  # noqa: E501

        :return: The introspection_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._introspection_endpoint

    @introspection_endpoint.setter
    def introspection_endpoint(self, introspection_endpoint):
        """Sets the introspection_endpoint of this AppConfiguration.

        URL for the Introspection Endpoint.  # noqa: E501

        :param introspection_endpoint: The introspection_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._introspection_endpoint = introspection_endpoint

    @property
    def introspection_access_token_must_have_uma_protection_scope(self):
        """Gets the introspection_access_token_must_have_uma_protection_scope of this AppConfiguration.  # noqa: E501

        Reject introspection requests if access_token in Authorization header does not have uma_protection scope.  # noqa: E501

        :return: The introspection_access_token_must_have_uma_protection_scope of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._introspection_access_token_must_have_uma_protection_scope

    @introspection_access_token_must_have_uma_protection_scope.setter
    def introspection_access_token_must_have_uma_protection_scope(self, introspection_access_token_must_have_uma_protection_scope):
        """Sets the introspection_access_token_must_have_uma_protection_scope of this AppConfiguration.

        Reject introspection requests if access_token in Authorization header does not have uma_protection scope.  # noqa: E501

        :param introspection_access_token_must_have_uma_protection_scope: The introspection_access_token_must_have_uma_protection_scope of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._introspection_access_token_must_have_uma_protection_scope = introspection_access_token_must_have_uma_protection_scope

    @property
    def uma_configuration_endpoint(self):
        """Gets the uma_configuration_endpoint of this AppConfiguration.  # noqa: E501

        URL for the UMA Configuration Endpoint.  # noqa: E501

        :return: The uma_configuration_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._uma_configuration_endpoint

    @uma_configuration_endpoint.setter
    def uma_configuration_endpoint(self, uma_configuration_endpoint):
        """Sets the uma_configuration_endpoint of this AppConfiguration.

        URL for the UMA Configuration Endpoint.  # noqa: E501

        :param uma_configuration_endpoint: The uma_configuration_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._uma_configuration_endpoint = uma_configuration_endpoint

    @property
    def sector_identifier_endpoint(self):
        """Gets the sector_identifier_endpoint of this AppConfiguration.  # noqa: E501

        URL for the Sector Identifier Endpoint.  # noqa: E501

        :return: The sector_identifier_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._sector_identifier_endpoint

    @sector_identifier_endpoint.setter
    def sector_identifier_endpoint(self, sector_identifier_endpoint):
        """Sets the sector_identifier_endpoint of this AppConfiguration.

        URL for the Sector Identifier Endpoint.  # noqa: E501

        :param sector_identifier_endpoint: The sector_identifier_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._sector_identifier_endpoint = sector_identifier_endpoint

    @property
    def ox_eleven_generate_key_endpoint(self):
        """Gets the ox_eleven_generate_key_endpoint of this AppConfiguration.  # noqa: E501

        URL for the oxEleven Generate Key Endpoint.  # noqa: E501

        :return: The ox_eleven_generate_key_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ox_eleven_generate_key_endpoint

    @ox_eleven_generate_key_endpoint.setter
    def ox_eleven_generate_key_endpoint(self, ox_eleven_generate_key_endpoint):
        """Sets the ox_eleven_generate_key_endpoint of this AppConfiguration.

        URL for the oxEleven Generate Key Endpoint.  # noqa: E501

        :param ox_eleven_generate_key_endpoint: The ox_eleven_generate_key_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._ox_eleven_generate_key_endpoint = ox_eleven_generate_key_endpoint

    @property
    def ox_eleven_sign_endpoint(self):
        """Gets the ox_eleven_sign_endpoint of this AppConfiguration.  # noqa: E501

        URL for the oxEleven Sign Endpoint.  # noqa: E501

        :return: The ox_eleven_sign_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ox_eleven_sign_endpoint

    @ox_eleven_sign_endpoint.setter
    def ox_eleven_sign_endpoint(self, ox_eleven_sign_endpoint):
        """Sets the ox_eleven_sign_endpoint of this AppConfiguration.

        URL for the oxEleven Sign Endpoint.  # noqa: E501

        :param ox_eleven_sign_endpoint: The ox_eleven_sign_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._ox_eleven_sign_endpoint = ox_eleven_sign_endpoint

    @property
    def ox_eleven_verify_signature_endpoint(self):
        """Gets the ox_eleven_verify_signature_endpoint of this AppConfiguration.  # noqa: E501

        URL for the oxEleven Verify Signature Endpoint.  # noqa: E501

        :return: The ox_eleven_verify_signature_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ox_eleven_verify_signature_endpoint

    @ox_eleven_verify_signature_endpoint.setter
    def ox_eleven_verify_signature_endpoint(self, ox_eleven_verify_signature_endpoint):
        """Sets the ox_eleven_verify_signature_endpoint of this AppConfiguration.

        URL for the oxEleven Verify Signature Endpoint.  # noqa: E501

        :param ox_eleven_verify_signature_endpoint: The ox_eleven_verify_signature_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._ox_eleven_verify_signature_endpoint = ox_eleven_verify_signature_endpoint

    @property
    def ox_eleven_delete_key_endpoint(self):
        """Gets the ox_eleven_delete_key_endpoint of this AppConfiguration.  # noqa: E501

        URL for the oxEleven Delete Key Endpoint.  # noqa: E501

        :return: The ox_eleven_delete_key_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ox_eleven_delete_key_endpoint

    @ox_eleven_delete_key_endpoint.setter
    def ox_eleven_delete_key_endpoint(self, ox_eleven_delete_key_endpoint):
        """Sets the ox_eleven_delete_key_endpoint of this AppConfiguration.

        URL for the oxEleven Delete Key Endpoint.  # noqa: E501

        :param ox_eleven_delete_key_endpoint: The ox_eleven_delete_key_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._ox_eleven_delete_key_endpoint = ox_eleven_delete_key_endpoint

    @property
    def ox_eleven_jwks_endpoint(self):
        """Gets the ox_eleven_jwks_endpoint of this AppConfiguration.  # noqa: E501

        URL for the oxEleven JWKS Endpoint.  # noqa: E501

        :return: The ox_eleven_jwks_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ox_eleven_jwks_endpoint

    @ox_eleven_jwks_endpoint.setter
    def ox_eleven_jwks_endpoint(self, ox_eleven_jwks_endpoint):
        """Sets the ox_eleven_jwks_endpoint of this AppConfiguration.

        URL for the oxEleven JWKS Endpoint.  # noqa: E501

        :param ox_eleven_jwks_endpoint: The ox_eleven_jwks_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._ox_eleven_jwks_endpoint = ox_eleven_jwks_endpoint

    @property
    def openid_sub_attribute(self):
        """Gets the openid_sub_attribute of this AppConfiguration.  # noqa: E501

        Specifies which LDAP attribute is used for the subject identifier claim.  # noqa: E501

        :return: The openid_sub_attribute of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._openid_sub_attribute

    @openid_sub_attribute.setter
    def openid_sub_attribute(self, openid_sub_attribute):
        """Sets the openid_sub_attribute of this AppConfiguration.

        Specifies which LDAP attribute is used for the subject identifier claim.  # noqa: E501

        :param openid_sub_attribute: The openid_sub_attribute of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._openid_sub_attribute = openid_sub_attribute

    @property
    def response_types_supported(self):
        """Gets the response_types_supported of this AppConfiguration.  # noqa: E501

        A list of the OAuth 2.0 response_type values that this OP supports.  # noqa: E501

        :return: The response_types_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types_supported

    @response_types_supported.setter
    def response_types_supported(self, response_types_supported):
        """Sets the response_types_supported of this AppConfiguration.

        A list of the OAuth 2.0 response_type values that this OP supports.  # noqa: E501

        :param response_types_supported: The response_types_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._response_types_supported = response_types_supported

    @property
    def response_modes_supported(self):
        """Gets the response_modes_supported of this AppConfiguration.  # noqa: E501

        A list of the OAuth 2.0 Response Mode values that this OP supports.  # noqa: E501

        :return: The response_modes_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_modes_supported

    @response_modes_supported.setter
    def response_modes_supported(self, response_modes_supported):
        """Sets the response_modes_supported of this AppConfiguration.

        A list of the OAuth 2.0 Response Mode values that this OP supports.  # noqa: E501

        :param response_modes_supported: The response_modes_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._response_modes_supported = response_modes_supported

    @property
    def grant_types_supported(self):
        """Gets the grant_types_supported of this AppConfiguration.  # noqa: E501

        A list of the OAuth 2.0 Grant Type values that this OP supports.  # noqa: E501

        :return: The grant_types_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types_supported

    @grant_types_supported.setter
    def grant_types_supported(self, grant_types_supported):
        """Sets the grant_types_supported of this AppConfiguration.

        A list of the OAuth 2.0 Grant Type values that this OP supports.  # noqa: E501

        :param grant_types_supported: The grant_types_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._grant_types_supported = grant_types_supported

    @property
    def dynamic_grant_type_default(self):
        """Gets the dynamic_grant_type_default of this AppConfiguration.  # noqa: E501

        list of the OAuth 2.0 Grant Type values that it's possible to set via client registration API..  # noqa: E501

        :return: The dynamic_grant_type_default of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._dynamic_grant_type_default

    @dynamic_grant_type_default.setter
    def dynamic_grant_type_default(self, dynamic_grant_type_default):
        """Sets the dynamic_grant_type_default of this AppConfiguration.

        list of the OAuth 2.0 Grant Type values that it's possible to set via client registration API..  # noqa: E501

        :param dynamic_grant_type_default: The dynamic_grant_type_default of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._dynamic_grant_type_default = dynamic_grant_type_default

    @property
    def subject_types_supported(self):
        """Gets the subject_types_supported of this AppConfiguration.  # noqa: E501

        A list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.  # noqa: E501

        :return: The subject_types_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_types_supported

    @subject_types_supported.setter
    def subject_types_supported(self, subject_types_supported):
        """Sets the subject_types_supported of this AppConfiguration.

        A list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.  # noqa: E501

        :param subject_types_supported: The subject_types_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._subject_types_supported = subject_types_supported

    @property
    def default_subject_type(self):
        """Gets the default_subject_type of this AppConfiguration.  # noqa: E501

        Default Subject Type used for Dynamic Client Registration.  # noqa: E501

        :return: The default_subject_type of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_subject_type

    @default_subject_type.setter
    def default_subject_type(self, default_subject_type):
        """Sets the default_subject_type of this AppConfiguration.

        Default Subject Type used for Dynamic Client Registration.  # noqa: E501

        :param default_subject_type: The default_subject_type of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._default_subject_type = default_subject_type

    @property
    def user_info_signing_alg_values_supported(self):
        """Gets the user_info_signing_alg_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWS signing algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.  # noqa: E501

        :return: The user_info_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_info_signing_alg_values_supported

    @user_info_signing_alg_values_supported.setter
    def user_info_signing_alg_values_supported(self, user_info_signing_alg_values_supported):
        """Sets the user_info_signing_alg_values_supported of this AppConfiguration.

        A list of the JWS signing algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.  # noqa: E501

        :param user_info_signing_alg_values_supported: The user_info_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._user_info_signing_alg_values_supported = user_info_signing_alg_values_supported

    @property
    def user_info_encryption_alg_values_supported(self):
        """Gets the user_info_encryption_alg_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWE encryption algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.  # noqa: E501

        :return: The user_info_encryption_alg_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_info_encryption_alg_values_supported

    @user_info_encryption_alg_values_supported.setter
    def user_info_encryption_alg_values_supported(self, user_info_encryption_alg_values_supported):
        """Sets the user_info_encryption_alg_values_supported of this AppConfiguration.

        A list of the JWE encryption algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.  # noqa: E501

        :param user_info_encryption_alg_values_supported: The user_info_encryption_alg_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._user_info_encryption_alg_values_supported = user_info_encryption_alg_values_supported

    @property
    def user_info_encryption_enc_values_supported(self):
        """Gets the user_info_encryption_enc_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWE encryption algorithms (enc values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.  # noqa: E501

        :return: The user_info_encryption_enc_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_info_encryption_enc_values_supported

    @user_info_encryption_enc_values_supported.setter
    def user_info_encryption_enc_values_supported(self, user_info_encryption_enc_values_supported):
        """Sets the user_info_encryption_enc_values_supported of this AppConfiguration.

        A list of the JWE encryption algorithms (enc values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.  # noqa: E501

        :param user_info_encryption_enc_values_supported: The user_info_encryption_enc_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._user_info_encryption_enc_values_supported = user_info_encryption_enc_values_supported

    @property
    def id_token_signing_alg_values_supported(self):
        """Gets the id_token_signing_alg_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.  # noqa: E501

        :return: The id_token_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_token_signing_alg_values_supported

    @id_token_signing_alg_values_supported.setter
    def id_token_signing_alg_values_supported(self, id_token_signing_alg_values_supported):
        """Sets the id_token_signing_alg_values_supported of this AppConfiguration.

        A list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.  # noqa: E501

        :param id_token_signing_alg_values_supported: The id_token_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._id_token_signing_alg_values_supported = id_token_signing_alg_values_supported

    @property
    def id_token_encryption_alg_values_supported(self):
        """Gets the id_token_encryption_alg_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWE encryption algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.  # noqa: E501

        :return: The id_token_encryption_alg_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_token_encryption_alg_values_supported

    @id_token_encryption_alg_values_supported.setter
    def id_token_encryption_alg_values_supported(self, id_token_encryption_alg_values_supported):
        """Sets the id_token_encryption_alg_values_supported of this AppConfiguration.

        A list of the JWE encryption algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.  # noqa: E501

        :param id_token_encryption_alg_values_supported: The id_token_encryption_alg_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._id_token_encryption_alg_values_supported = id_token_encryption_alg_values_supported

    @property
    def id_token_encryption_enc_values_supported(self):
        """Gets the id_token_encryption_enc_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT.  # noqa: E501

        :return: The id_token_encryption_enc_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_token_encryption_enc_values_supported

    @id_token_encryption_enc_values_supported.setter
    def id_token_encryption_enc_values_supported(self, id_token_encryption_enc_values_supported):
        """Sets the id_token_encryption_enc_values_supported of this AppConfiguration.

        A list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT.  # noqa: E501

        :param id_token_encryption_enc_values_supported: The id_token_encryption_enc_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._id_token_encryption_enc_values_supported = id_token_encryption_enc_values_supported

    @property
    def request_object_signing_alg_values_supported(self):
        """Gets the request_object_signing_alg_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWS signing algorithms (alg values) supported by the OP for Request Objects.  # noqa: E501

        :return: The request_object_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._request_object_signing_alg_values_supported

    @request_object_signing_alg_values_supported.setter
    def request_object_signing_alg_values_supported(self, request_object_signing_alg_values_supported):
        """Sets the request_object_signing_alg_values_supported of this AppConfiguration.

        A list of the JWS signing algorithms (alg values) supported by the OP for Request Objects.  # noqa: E501

        :param request_object_signing_alg_values_supported: The request_object_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._request_object_signing_alg_values_supported = request_object_signing_alg_values_supported

    @property
    def request_object_encryption_alg_values_supported(self):
        """Gets the request_object_encryption_alg_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWE encryption algorithms (alg values) supported by the OP for Request Objects.  # noqa: E501

        :return: The request_object_encryption_alg_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._request_object_encryption_alg_values_supported

    @request_object_encryption_alg_values_supported.setter
    def request_object_encryption_alg_values_supported(self, request_object_encryption_alg_values_supported):
        """Sets the request_object_encryption_alg_values_supported of this AppConfiguration.

        A list of the JWE encryption algorithms (alg values) supported by the OP for Request Objects.  # noqa: E501

        :param request_object_encryption_alg_values_supported: The request_object_encryption_alg_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._request_object_encryption_alg_values_supported = request_object_encryption_alg_values_supported

    @property
    def request_object_encryption_enc_values_supported(self):
        """Gets the request_object_encryption_enc_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects.  # noqa: E501

        :return: The request_object_encryption_enc_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._request_object_encryption_enc_values_supported

    @request_object_encryption_enc_values_supported.setter
    def request_object_encryption_enc_values_supported(self, request_object_encryption_enc_values_supported):
        """Sets the request_object_encryption_enc_values_supported of this AppConfiguration.

        A list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects.  # noqa: E501

        :param request_object_encryption_enc_values_supported: The request_object_encryption_enc_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._request_object_encryption_enc_values_supported = request_object_encryption_enc_values_supported

    @property
    def token_endpoint_auth_methods_supported(self):
        """Gets the token_endpoint_auth_methods_supported of this AppConfiguration.  # noqa: E501

        A list of Client Authentication methods supported by this Token Endpoint.  # noqa: E501

        :return: The token_endpoint_auth_methods_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._token_endpoint_auth_methods_supported

    @token_endpoint_auth_methods_supported.setter
    def token_endpoint_auth_methods_supported(self, token_endpoint_auth_methods_supported):
        """Sets the token_endpoint_auth_methods_supported of this AppConfiguration.

        A list of Client Authentication methods supported by this Token Endpoint.  # noqa: E501

        :param token_endpoint_auth_methods_supported: The token_endpoint_auth_methods_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._token_endpoint_auth_methods_supported = token_endpoint_auth_methods_supported

    @property
    def token_endpoint_auth_signing_alg_values_supported(self):
        """Gets the token_endpoint_auth_signing_alg_values_supported of this AppConfiguration.  # noqa: E501

        A list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.  # noqa: E501

        :return: The token_endpoint_auth_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._token_endpoint_auth_signing_alg_values_supported

    @token_endpoint_auth_signing_alg_values_supported.setter
    def token_endpoint_auth_signing_alg_values_supported(self, token_endpoint_auth_signing_alg_values_supported):
        """Sets the token_endpoint_auth_signing_alg_values_supported of this AppConfiguration.

        A list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.  # noqa: E501

        :param token_endpoint_auth_signing_alg_values_supported: The token_endpoint_auth_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._token_endpoint_auth_signing_alg_values_supported = token_endpoint_auth_signing_alg_values_supported

    @property
    def dynamic_registration_custom_attributes(self):
        """Gets the dynamic_registration_custom_attributes of this AppConfiguration.  # noqa: E501

        Custom attributes for the Dynamic registration.  # noqa: E501

        :return: The dynamic_registration_custom_attributes of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._dynamic_registration_custom_attributes

    @dynamic_registration_custom_attributes.setter
    def dynamic_registration_custom_attributes(self, dynamic_registration_custom_attributes):
        """Sets the dynamic_registration_custom_attributes of this AppConfiguration.

        Custom attributes for the Dynamic registration.  # noqa: E501

        :param dynamic_registration_custom_attributes: The dynamic_registration_custom_attributes of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._dynamic_registration_custom_attributes = dynamic_registration_custom_attributes

    @property
    def display_values_supported(self):
        """Gets the display_values_supported of this AppConfiguration.  # noqa: E501

        A list of the display parameter values that the OpenID Provider supports.  # noqa: E501

        :return: The display_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._display_values_supported

    @display_values_supported.setter
    def display_values_supported(self, display_values_supported):
        """Sets the display_values_supported of this AppConfiguration.

        A list of the display parameter values that the OpenID Provider supports.  # noqa: E501

        :param display_values_supported: The display_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._display_values_supported = display_values_supported

    @property
    def claim_types_supported(self):
        """Gets the claim_types_supported of this AppConfiguration.  # noqa: E501

        A list of the Claim Types that the OpenID Provider supports.  # noqa: E501

        :return: The claim_types_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._claim_types_supported

    @claim_types_supported.setter
    def claim_types_supported(self, claim_types_supported):
        """Sets the claim_types_supported of this AppConfiguration.

        A list of the Claim Types that the OpenID Provider supports.  # noqa: E501

        :param claim_types_supported: The claim_types_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._claim_types_supported = claim_types_supported

    @property
    def service_documentation(self):
        """Gets the service_documentation of this AppConfiguration.  # noqa: E501

        URL of a page containing human-readable information that developers might want or need to know when using the OpenID Provider.  # noqa: E501

        :return: The service_documentation of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_documentation

    @service_documentation.setter
    def service_documentation(self, service_documentation):
        """Sets the service_documentation of this AppConfiguration.

        URL of a page containing human-readable information that developers might want or need to know when using the OpenID Provider.  # noqa: E501

        :param service_documentation: The service_documentation of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._service_documentation = service_documentation

    @property
    def claims_locales_supported(self):
        """Gets the claims_locales_supported of this AppConfiguration.  # noqa: E501

        Languages and scripts supported for values in Claims being returned.  # noqa: E501

        :return: The claims_locales_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims_locales_supported

    @claims_locales_supported.setter
    def claims_locales_supported(self, claims_locales_supported):
        """Sets the claims_locales_supported of this AppConfiguration.

        Languages and scripts supported for values in Claims being returned.  # noqa: E501

        :param claims_locales_supported: The claims_locales_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._claims_locales_supported = claims_locales_supported

    @property
    def id_token_token_binding_cnf_values_supported(self):
        """Gets the id_token_token_binding_cnf_values_supported of this AppConfiguration.  # noqa: E501

        Array containing a list of the JWT Confirmation Method member names supported by the OP for Token Binding of ID Tokens. The presence of this parameter indicates that the OpenID Provider supports Token Binding of ID Tokens. If omitted, the default is that the OpenID Provider does not support Token Binding of ID Tokens.  # noqa: E501

        :return: The id_token_token_binding_cnf_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_token_token_binding_cnf_values_supported

    @id_token_token_binding_cnf_values_supported.setter
    def id_token_token_binding_cnf_values_supported(self, id_token_token_binding_cnf_values_supported):
        """Sets the id_token_token_binding_cnf_values_supported of this AppConfiguration.

        Array containing a list of the JWT Confirmation Method member names supported by the OP for Token Binding of ID Tokens. The presence of this parameter indicates that the OpenID Provider supports Token Binding of ID Tokens. If omitted, the default is that the OpenID Provider does not support Token Binding of ID Tokens.  # noqa: E501

        :param id_token_token_binding_cnf_values_supported: The id_token_token_binding_cnf_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._id_token_token_binding_cnf_values_supported = id_token_token_binding_cnf_values_supported

    @property
    def ui_locales_supported(self):
        """Gets the ui_locales_supported of this AppConfiguration.  # noqa: E501

        Languages and scripts supported for the user interface.  # noqa: E501

        :return: The ui_locales_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._ui_locales_supported

    @ui_locales_supported.setter
    def ui_locales_supported(self, ui_locales_supported):
        """Sets the ui_locales_supported of this AppConfiguration.

        Languages and scripts supported for the user interface.  # noqa: E501

        :param ui_locales_supported: The ui_locales_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._ui_locales_supported = ui_locales_supported

    @property
    def persist_id_token_in_ldap(self):
        """Gets the persist_id_token_in_ldap of this AppConfiguration.  # noqa: E501

        Specifies whether to persist id_token into LDAP (otherwise saves into cache).  # noqa: E501

        :return: The persist_id_token_in_ldap of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._persist_id_token_in_ldap

    @persist_id_token_in_ldap.setter
    def persist_id_token_in_ldap(self, persist_id_token_in_ldap):
        """Sets the persist_id_token_in_ldap of this AppConfiguration.

        Specifies whether to persist id_token into LDAP (otherwise saves into cache).  # noqa: E501

        :param persist_id_token_in_ldap: The persist_id_token_in_ldap of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._persist_id_token_in_ldap = persist_id_token_in_ldap

    @property
    def persist_refresh_token_in_ldap(self):
        """Gets the persist_refresh_token_in_ldap of this AppConfiguration.  # noqa: E501

        Specifies whether to persist refresh_token into LDAP (otherwise saves into cache).  # noqa: E501

        :return: The persist_refresh_token_in_ldap of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._persist_refresh_token_in_ldap

    @persist_refresh_token_in_ldap.setter
    def persist_refresh_token_in_ldap(self, persist_refresh_token_in_ldap):
        """Sets the persist_refresh_token_in_ldap of this AppConfiguration.

        Specifies whether to persist refresh_token into LDAP (otherwise saves into cache).  # noqa: E501

        :param persist_refresh_token_in_ldap: The persist_refresh_token_in_ldap of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._persist_refresh_token_in_ldap = persist_refresh_token_in_ldap

    @property
    def claims_parameter_supported(self):
        """Gets the claims_parameter_supported of this AppConfiguration.  # noqa: E501

        Specifies whether the OP supports use of the claim’s parameter.  # noqa: E501

        :return: The claims_parameter_supported of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._claims_parameter_supported

    @claims_parameter_supported.setter
    def claims_parameter_supported(self, claims_parameter_supported):
        """Sets the claims_parameter_supported of this AppConfiguration.

        Specifies whether the OP supports use of the claim’s parameter.  # noqa: E501

        :param claims_parameter_supported: The claims_parameter_supported of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._claims_parameter_supported = claims_parameter_supported

    @property
    def request_parameter_supported(self):
        """Gets the request_parameter_supported of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether the OP supports use of the request parameter.  # noqa: E501

        :return: The request_parameter_supported of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._request_parameter_supported

    @request_parameter_supported.setter
    def request_parameter_supported(self, request_parameter_supported):
        """Sets the request_parameter_supported of this AppConfiguration.

        Boolean value specifying whether the OP supports use of the request parameter.  # noqa: E501

        :param request_parameter_supported: The request_parameter_supported of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._request_parameter_supported = request_parameter_supported

    @property
    def request_uri_parameter_supported(self):
        """Gets the request_uri_parameter_supported of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether the OP supports use of the request_uri parameter.  # noqa: E501

        :return: The request_uri_parameter_supported of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._request_uri_parameter_supported

    @request_uri_parameter_supported.setter
    def request_uri_parameter_supported(self, request_uri_parameter_supported):
        """Sets the request_uri_parameter_supported of this AppConfiguration.

        Boolean value specifying whether the OP supports use of the request_uri parameter.  # noqa: E501

        :param request_uri_parameter_supported: The request_uri_parameter_supported of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._request_uri_parameter_supported = request_uri_parameter_supported

    @property
    def require_request_uri_registration(self):
        """Gets the require_request_uri_registration of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.  # noqa: E501

        :return: The require_request_uri_registration of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._require_request_uri_registration

    @require_request_uri_registration.setter
    def require_request_uri_registration(self, require_request_uri_registration):
        """Sets the require_request_uri_registration of this AppConfiguration.

        Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.  # noqa: E501

        :param require_request_uri_registration: The require_request_uri_registration of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._require_request_uri_registration = require_request_uri_registration

    @property
    def op_policy_uri(self):
        """Gets the op_policy_uri of this AppConfiguration.  # noqa: E501

        URL that the OpenID Provider provides to the person registering the Client to read about the OP's requirements on how the Relying Party can use the data provided by the OP.  # noqa: E501

        :return: The op_policy_uri of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._op_policy_uri

    @op_policy_uri.setter
    def op_policy_uri(self, op_policy_uri):
        """Sets the op_policy_uri of this AppConfiguration.

        URL that the OpenID Provider provides to the person registering the Client to read about the OP's requirements on how the Relying Party can use the data provided by the OP.  # noqa: E501

        :param op_policy_uri: The op_policy_uri of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._op_policy_uri = op_policy_uri

    @property
    def op_tos_uri(self):
        """Gets the op_tos_uri of this AppConfiguration.  # noqa: E501

        URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's terms of service.  # noqa: E501

        :return: The op_tos_uri of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._op_tos_uri

    @op_tos_uri.setter
    def op_tos_uri(self, op_tos_uri):
        """Sets the op_tos_uri of this AppConfiguration.

        URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's terms of service.  # noqa: E501

        :param op_tos_uri: The op_tos_uri of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._op_tos_uri = op_tos_uri

    @property
    def authorization_code_lifetime(self):
        """Gets the authorization_code_lifetime of this AppConfiguration.  # noqa: E501

        The lifetime of the Authorization Code.  # noqa: E501

        :return: The authorization_code_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._authorization_code_lifetime

    @authorization_code_lifetime.setter
    def authorization_code_lifetime(self, authorization_code_lifetime):
        """Sets the authorization_code_lifetime of this AppConfiguration.

        The lifetime of the Authorization Code.  # noqa: E501

        :param authorization_code_lifetime: The authorization_code_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._authorization_code_lifetime = authorization_code_lifetime

    @property
    def refresh_token_lifetime(self):
        """Gets the refresh_token_lifetime of this AppConfiguration.  # noqa: E501

        The lifetime of the Refresh Token.  # noqa: E501

        :return: The refresh_token_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._refresh_token_lifetime

    @refresh_token_lifetime.setter
    def refresh_token_lifetime(self, refresh_token_lifetime):
        """Sets the refresh_token_lifetime of this AppConfiguration.

        The lifetime of the Refresh Token.  # noqa: E501

        :param refresh_token_lifetime: The refresh_token_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._refresh_token_lifetime = refresh_token_lifetime

    @property
    def id_token_lifetime(self):
        """Gets the id_token_lifetime of this AppConfiguration.  # noqa: E501

        The lifetime of the ID Token.  # noqa: E501

        :return: The id_token_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._id_token_lifetime

    @id_token_lifetime.setter
    def id_token_lifetime(self, id_token_lifetime):
        """Sets the id_token_lifetime of this AppConfiguration.

        The lifetime of the ID Token.  # noqa: E501

        :param id_token_lifetime: The id_token_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._id_token_lifetime = id_token_lifetime

    @property
    def access_token_lifetime(self):
        """Gets the access_token_lifetime of this AppConfiguration.  # noqa: E501

        The lifetime of the short-lived Access Token.  # noqa: E501

        :return: The access_token_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._access_token_lifetime

    @access_token_lifetime.setter
    def access_token_lifetime(self, access_token_lifetime):
        """Sets the access_token_lifetime of this AppConfiguration.

        The lifetime of the short-lived Access Token.  # noqa: E501

        :param access_token_lifetime: The access_token_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._access_token_lifetime = access_token_lifetime

    @property
    def uma_rpt_lifetime(self):
        """Gets the uma_rpt_lifetime of this AppConfiguration.  # noqa: E501

        UMA RPT lifetime.  # noqa: E501

        :return: The uma_rpt_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._uma_rpt_lifetime

    @uma_rpt_lifetime.setter
    def uma_rpt_lifetime(self, uma_rpt_lifetime):
        """Sets the uma_rpt_lifetime of this AppConfiguration.

        UMA RPT lifetime.  # noqa: E501

        :param uma_rpt_lifetime: The uma_rpt_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._uma_rpt_lifetime = uma_rpt_lifetime

    @property
    def uma_ticket_lifetime(self):
        """Gets the uma_ticket_lifetime of this AppConfiguration.  # noqa: E501

        UMA ticket lifetime.  # noqa: E501

        :return: The uma_ticket_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._uma_ticket_lifetime

    @uma_ticket_lifetime.setter
    def uma_ticket_lifetime(self, uma_ticket_lifetime):
        """Sets the uma_ticket_lifetime of this AppConfiguration.

        UMA ticket lifetime.  # noqa: E501

        :param uma_ticket_lifetime: The uma_ticket_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._uma_ticket_lifetime = uma_ticket_lifetime

    @property
    def uma_pct_lifetime(self):
        """Gets the uma_pct_lifetime of this AppConfiguration.  # noqa: E501

        UMA PCT lifetime.  # noqa: E501

        :return: The uma_pct_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._uma_pct_lifetime

    @uma_pct_lifetime.setter
    def uma_pct_lifetime(self, uma_pct_lifetime):
        """Sets the uma_pct_lifetime of this AppConfiguration.

        UMA PCT lifetime.  # noqa: E501

        :param uma_pct_lifetime: The uma_pct_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._uma_pct_lifetime = uma_pct_lifetime

    @property
    def uma_resource_lifetime(self):
        """Gets the uma_resource_lifetime of this AppConfiguration.  # noqa: E501

        UMA PCT lifetime.  # noqa: E501

        :return: The uma_resource_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._uma_resource_lifetime

    @uma_resource_lifetime.setter
    def uma_resource_lifetime(self, uma_resource_lifetime):
        """Sets the uma_resource_lifetime of this AppConfiguration.

        UMA PCT lifetime.  # noqa: E501

        :param uma_resource_lifetime: The uma_resource_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._uma_resource_lifetime = uma_resource_lifetime

    @property
    def uma_add_scopes_automatically(self):
        """Gets the uma_add_scopes_automatically of this AppConfiguration.  # noqa: E501

        Add UMA scopes automatically if it is not registered yet.  # noqa: E501

        :return: The uma_add_scopes_automatically of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._uma_add_scopes_automatically

    @uma_add_scopes_automatically.setter
    def uma_add_scopes_automatically(self, uma_add_scopes_automatically):
        """Sets the uma_add_scopes_automatically of this AppConfiguration.

        Add UMA scopes automatically if it is not registered yet.  # noqa: E501

        :param uma_add_scopes_automatically: The uma_add_scopes_automatically of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._uma_add_scopes_automatically = uma_add_scopes_automatically

    @property
    def uma_validate_claim_token(self):
        """Gets the uma_validate_claim_token of this AppConfiguration.  # noqa: E501

        Validate claim_token as id_token assuming it is issued by local idp.  # noqa: E501

        :return: The uma_validate_claim_token of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._uma_validate_claim_token

    @uma_validate_claim_token.setter
    def uma_validate_claim_token(self, uma_validate_claim_token):
        """Sets the uma_validate_claim_token of this AppConfiguration.

        Validate claim_token as id_token assuming it is issued by local idp.  # noqa: E501

        :param uma_validate_claim_token: The uma_validate_claim_token of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._uma_validate_claim_token = uma_validate_claim_token

    @property
    def uma_grant_access_if_no_policies(self):
        """Gets the uma_grant_access_if_no_policies of this AppConfiguration.  # noqa: E501

        Specifies whether to grant access to resources if there are no any policies associated with scopes.  # noqa: E501

        :return: The uma_grant_access_if_no_policies of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._uma_grant_access_if_no_policies

    @uma_grant_access_if_no_policies.setter
    def uma_grant_access_if_no_policies(self, uma_grant_access_if_no_policies):
        """Sets the uma_grant_access_if_no_policies of this AppConfiguration.

        Specifies whether to grant access to resources if there are no any policies associated with scopes.  # noqa: E501

        :param uma_grant_access_if_no_policies: The uma_grant_access_if_no_policies of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._uma_grant_access_if_no_policies = uma_grant_access_if_no_policies

    @property
    def uma_restrict_resource_to_associated_client(self):
        """Gets the uma_restrict_resource_to_associated_client of this AppConfiguration.  # noqa: E501

        Restrict access to resource by associated client.  # noqa: E501

        :return: The uma_restrict_resource_to_associated_client of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._uma_restrict_resource_to_associated_client

    @uma_restrict_resource_to_associated_client.setter
    def uma_restrict_resource_to_associated_client(self, uma_restrict_resource_to_associated_client):
        """Sets the uma_restrict_resource_to_associated_client of this AppConfiguration.

        Restrict access to resource by associated client.  # noqa: E501

        :param uma_restrict_resource_to_associated_client: The uma_restrict_resource_to_associated_client of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._uma_restrict_resource_to_associated_client = uma_restrict_resource_to_associated_client

    @property
    def uma_keep_client_during_resource_set_registration(self):
        """Gets the uma_keep_client_during_resource_set_registration of this AppConfiguration.  # noqa: E501

        Save client information during resource registration.  # noqa: E501

        :return: The uma_keep_client_during_resource_set_registration of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._uma_keep_client_during_resource_set_registration

    @uma_keep_client_during_resource_set_registration.setter
    def uma_keep_client_during_resource_set_registration(self, uma_keep_client_during_resource_set_registration):
        """Sets the uma_keep_client_during_resource_set_registration of this AppConfiguration.

        Save client information during resource registration.  # noqa: E501

        :param uma_keep_client_during_resource_set_registration: The uma_keep_client_during_resource_set_registration of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._uma_keep_client_during_resource_set_registration = uma_keep_client_during_resource_set_registration

    @property
    def uma_rpt_as_jwt(self):
        """Gets the uma_rpt_as_jwt of this AppConfiguration.  # noqa: E501

        Issue RPT as JWT or as random string.  # noqa: E501

        :return: The uma_rpt_as_jwt of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._uma_rpt_as_jwt

    @uma_rpt_as_jwt.setter
    def uma_rpt_as_jwt(self, uma_rpt_as_jwt):
        """Sets the uma_rpt_as_jwt of this AppConfiguration.

        Issue RPT as JWT or as random string.  # noqa: E501

        :param uma_rpt_as_jwt: The uma_rpt_as_jwt of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._uma_rpt_as_jwt = uma_rpt_as_jwt

    @property
    def clean_service_interval(self):
        """Gets the clean_service_interval of this AppConfiguration.  # noqa: E501

        Time interval for the Clean Service in seconds.  # noqa: E501

        :return: The clean_service_interval of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._clean_service_interval

    @clean_service_interval.setter
    def clean_service_interval(self, clean_service_interval):
        """Sets the clean_service_interval of this AppConfiguration.

        Time interval for the Clean Service in seconds.  # noqa: E501

        :param clean_service_interval: The clean_service_interval of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._clean_service_interval = clean_service_interval

    @property
    def clean_service_base_dns(self):
        """Gets the clean_service_base_dns of this AppConfiguration.  # noqa: E501

        List of additional base dns under which AS will look up for expired entities.  # noqa: E501

        :return: The clean_service_base_dns of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._clean_service_base_dns

    @clean_service_base_dns.setter
    def clean_service_base_dns(self, clean_service_base_dns):
        """Sets the clean_service_base_dns of this AppConfiguration.

        List of additional base dns under which AS will look up for expired entities.  # noqa: E501

        :param clean_service_base_dns: The clean_service_base_dns of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._clean_service_base_dns = clean_service_base_dns

    @property
    def clean_service_batch_chunk_size(self):
        """Gets the clean_service_batch_chunk_size of this AppConfiguration.  # noqa: E501

        Each clean up iteration fetches chunk of expired data per base dn and removes it from storage.  # noqa: E501

        :return: The clean_service_batch_chunk_size of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._clean_service_batch_chunk_size

    @clean_service_batch_chunk_size.setter
    def clean_service_batch_chunk_size(self, clean_service_batch_chunk_size):
        """Sets the clean_service_batch_chunk_size of this AppConfiguration.

        Each clean up iteration fetches chunk of expired data per base dn and removes it from storage.  # noqa: E501

        :param clean_service_batch_chunk_size: The clean_service_batch_chunk_size of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._clean_service_batch_chunk_size = clean_service_batch_chunk_size

    @property
    def key_regeneration_enabled(self):
        """Gets the key_regeneration_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to regenerate keys.  # noqa: E501

        :return: The key_regeneration_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._key_regeneration_enabled

    @key_regeneration_enabled.setter
    def key_regeneration_enabled(self, key_regeneration_enabled):
        """Sets the key_regeneration_enabled of this AppConfiguration.

        Boolean value specifying whether to regenerate keys.  # noqa: E501

        :param key_regeneration_enabled: The key_regeneration_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._key_regeneration_enabled = key_regeneration_enabled

    @property
    def key_regeneration_interval(self):
        """Gets the key_regeneration_interval of this AppConfiguration.  # noqa: E501

        The interval for key regeneration in hours.  # noqa: E501

        :return: The key_regeneration_interval of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._key_regeneration_interval

    @key_regeneration_interval.setter
    def key_regeneration_interval(self, key_regeneration_interval):
        """Sets the key_regeneration_interval of this AppConfiguration.

        The interval for key regeneration in hours.  # noqa: E501

        :param key_regeneration_interval: The key_regeneration_interval of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._key_regeneration_interval = key_regeneration_interval

    @property
    def default_signature_algorithm(self):
        """Gets the default_signature_algorithm of this AppConfiguration.  # noqa: E501

        The default signature algorithm to sign ID Tokens.  # noqa: E501

        :return: The default_signature_algorithm of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_signature_algorithm

    @default_signature_algorithm.setter
    def default_signature_algorithm(self, default_signature_algorithm):
        """Sets the default_signature_algorithm of this AppConfiguration.

        The default signature algorithm to sign ID Tokens.  # noqa: E501

        :param default_signature_algorithm: The default_signature_algorithm of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._default_signature_algorithm = default_signature_algorithm

    @property
    def ox_open_id_connect_version(self):
        """Gets the ox_open_id_connect_version of this AppConfiguration.  # noqa: E501

        OpenID Connect Version.  # noqa: E501

        :return: The ox_open_id_connect_version of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ox_open_id_connect_version

    @ox_open_id_connect_version.setter
    def ox_open_id_connect_version(self, ox_open_id_connect_version):
        """Sets the ox_open_id_connect_version of this AppConfiguration.

        OpenID Connect Version.  # noqa: E501

        :param ox_open_id_connect_version: The ox_open_id_connect_version of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._ox_open_id_connect_version = ox_open_id_connect_version

    @property
    def jans_id(self):
        """Gets the jans_id of this AppConfiguration.  # noqa: E501

        URL for the Inum generator Service.  # noqa: E501

        :return: The jans_id of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._jans_id

    @jans_id.setter
    def jans_id(self, jans_id):
        """Sets the jans_id of this AppConfiguration.

        URL for the Inum generator Service.  # noqa: E501

        :param jans_id: The jans_id of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._jans_id = jans_id

    @property
    def dynamic_registration_enabled(self):
        """Gets the dynamic_registration_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable Dynamic Registration.  # noqa: E501

        :return: The dynamic_registration_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_registration_enabled

    @dynamic_registration_enabled.setter
    def dynamic_registration_enabled(self, dynamic_registration_enabled):
        """Sets the dynamic_registration_enabled of this AppConfiguration.

        Boolean value specifying whether to enable Dynamic Registration.  # noqa: E501

        :param dynamic_registration_enabled: The dynamic_registration_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._dynamic_registration_enabled = dynamic_registration_enabled

    @property
    def dynamic_registration_expiration_time(self):
        """Gets the dynamic_registration_expiration_time of this AppConfiguration.  # noqa: E501

        Expiration time in seconds for clients created with dynamic registration, -1 means never expire.  # noqa: E501

        :return: The dynamic_registration_expiration_time of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._dynamic_registration_expiration_time

    @dynamic_registration_expiration_time.setter
    def dynamic_registration_expiration_time(self, dynamic_registration_expiration_time):
        """Sets the dynamic_registration_expiration_time of this AppConfiguration.

        Expiration time in seconds for clients created with dynamic registration, -1 means never expire.  # noqa: E501

        :param dynamic_registration_expiration_time: The dynamic_registration_expiration_time of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._dynamic_registration_expiration_time = dynamic_registration_expiration_time

    @property
    def dynamic_registration_persist_client_authorizations(self):
        """Gets the dynamic_registration_persist_client_authorizations of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to persist client authorizations.  # noqa: E501

        :return: The dynamic_registration_persist_client_authorizations of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_registration_persist_client_authorizations

    @dynamic_registration_persist_client_authorizations.setter
    def dynamic_registration_persist_client_authorizations(self, dynamic_registration_persist_client_authorizations):
        """Sets the dynamic_registration_persist_client_authorizations of this AppConfiguration.

        Boolean value specifying whether to persist client authorizations.  # noqa: E501

        :param dynamic_registration_persist_client_authorizations: The dynamic_registration_persist_client_authorizations of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._dynamic_registration_persist_client_authorizations = dynamic_registration_persist_client_authorizations

    @property
    def trusted_client_enabled(self):
        """Gets the trusted_client_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether a client is trusted and no authorization is required.  # noqa: E501

        :return: The trusted_client_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._trusted_client_enabled

    @trusted_client_enabled.setter
    def trusted_client_enabled(self, trusted_client_enabled):
        """Sets the trusted_client_enabled of this AppConfiguration.

        Boolean value specifying whether a client is trusted and no authorization is required.  # noqa: E501

        :param trusted_client_enabled: The trusted_client_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._trusted_client_enabled = trusted_client_enabled

    @property
    def dynamic_registration_scopes_param_enabled(self):
        """Gets the dynamic_registration_scopes_param_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable scopes parameter in dynamic registration.  # noqa: E501

        :return: The dynamic_registration_scopes_param_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_registration_scopes_param_enabled

    @dynamic_registration_scopes_param_enabled.setter
    def dynamic_registration_scopes_param_enabled(self, dynamic_registration_scopes_param_enabled):
        """Sets the dynamic_registration_scopes_param_enabled of this AppConfiguration.

        Boolean value specifying whether to enable scopes parameter in dynamic registration.  # noqa: E501

        :param dynamic_registration_scopes_param_enabled: The dynamic_registration_scopes_param_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._dynamic_registration_scopes_param_enabled = dynamic_registration_scopes_param_enabled

    @property
    def dynamic_registration_custom_object_class(self):
        """Gets the dynamic_registration_custom_object_class of this AppConfiguration.  # noqa: E501

        LDAP custom object class for dynamic registration.  # noqa: E501

        :return: The dynamic_registration_custom_object_class of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_registration_custom_object_class

    @dynamic_registration_custom_object_class.setter
    def dynamic_registration_custom_object_class(self, dynamic_registration_custom_object_class):
        """Sets the dynamic_registration_custom_object_class of this AppConfiguration.

        LDAP custom object class for dynamic registration.  # noqa: E501

        :param dynamic_registration_custom_object_class: The dynamic_registration_custom_object_class of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._dynamic_registration_custom_object_class = dynamic_registration_custom_object_class

    @property
    def person_custom_object_class_list(self):
        """Gets the person_custom_object_class_list of this AppConfiguration.  # noqa: E501

        LDAP custom object class list for dynamic person enrolment.  # noqa: E501

        :return: The person_custom_object_class_list of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._person_custom_object_class_list

    @person_custom_object_class_list.setter
    def person_custom_object_class_list(self, person_custom_object_class_list):
        """Sets the person_custom_object_class_list of this AppConfiguration.

        LDAP custom object class list for dynamic person enrolment.  # noqa: E501

        :param person_custom_object_class_list: The person_custom_object_class_list of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._person_custom_object_class_list = person_custom_object_class_list

    @property
    def authentication_filters_enabled(self):
        """Gets the authentication_filters_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable user authentication filters.  # noqa: E501

        :return: The authentication_filters_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._authentication_filters_enabled

    @authentication_filters_enabled.setter
    def authentication_filters_enabled(self, authentication_filters_enabled):
        """Sets the authentication_filters_enabled of this AppConfiguration.

        Boolean value specifying whether to enable user authentication filters.  # noqa: E501

        :param authentication_filters_enabled: The authentication_filters_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._authentication_filters_enabled = authentication_filters_enabled

    @property
    def client_authentication_filters_enabled(self):
        """Gets the client_authentication_filters_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable client authentication filters.  # noqa: E501

        :return: The client_authentication_filters_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._client_authentication_filters_enabled

    @client_authentication_filters_enabled.setter
    def client_authentication_filters_enabled(self, client_authentication_filters_enabled):
        """Sets the client_authentication_filters_enabled of this AppConfiguration.

        Boolean value specifying whether to enable client authentication filters.  # noqa: E501

        :param client_authentication_filters_enabled: The client_authentication_filters_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._client_authentication_filters_enabled = client_authentication_filters_enabled

    @property
    def authentication_filters(self):
        """Gets the authentication_filters of this AppConfiguration.  # noqa: E501

        User authentication filters.  # noqa: E501

        :return: The authentication_filters of this AppConfiguration.  # noqa: E501
        :rtype: list[AppConfigurationAuthenticationFilters]
        """
        return self._authentication_filters

    @authentication_filters.setter
    def authentication_filters(self, authentication_filters):
        """Sets the authentication_filters of this AppConfiguration.

        User authentication filters.  # noqa: E501

        :param authentication_filters: The authentication_filters of this AppConfiguration.  # noqa: E501
        :type: list[AppConfigurationAuthenticationFilters]
        """

        self._authentication_filters = authentication_filters

    @property
    def client_authentication_filters(self):
        """Gets the client_authentication_filters of this AppConfiguration.  # noqa: E501

        Client authentication filters.  # noqa: E501

        :return: The client_authentication_filters of this AppConfiguration.  # noqa: E501
        :rtype: list[AppConfigurationClientAuthenticationFilters]
        """
        return self._client_authentication_filters

    @client_authentication_filters.setter
    def client_authentication_filters(self, client_authentication_filters):
        """Sets the client_authentication_filters of this AppConfiguration.

        Client authentication filters.  # noqa: E501

        :param client_authentication_filters: The client_authentication_filters of this AppConfiguration.  # noqa: E501
        :type: list[AppConfigurationClientAuthenticationFilters]
        """

        self._client_authentication_filters = client_authentication_filters

    @property
    def session_id_unused_lifetime(self):
        """Gets the session_id_unused_lifetime of this AppConfiguration.  # noqa: E501

        The lifetime for unused session states.  # noqa: E501

        :return: The session_id_unused_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._session_id_unused_lifetime

    @session_id_unused_lifetime.setter
    def session_id_unused_lifetime(self, session_id_unused_lifetime):
        """Sets the session_id_unused_lifetime of this AppConfiguration.

        The lifetime for unused session states.  # noqa: E501

        :param session_id_unused_lifetime: The session_id_unused_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._session_id_unused_lifetime = session_id_unused_lifetime

    @property
    def session_id_unauthenticated_unused_lifetime(self):
        """Gets the session_id_unauthenticated_unused_lifetime of this AppConfiguration.  # noqa: E501

        The lifetime for unused unauthenticated session states.  # noqa: E501

        :return: The session_id_unauthenticated_unused_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._session_id_unauthenticated_unused_lifetime

    @session_id_unauthenticated_unused_lifetime.setter
    def session_id_unauthenticated_unused_lifetime(self, session_id_unauthenticated_unused_lifetime):
        """Sets the session_id_unauthenticated_unused_lifetime of this AppConfiguration.

        The lifetime for unused unauthenticated session states.  # noqa: E501

        :param session_id_unauthenticated_unused_lifetime: The session_id_unauthenticated_unused_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._session_id_unauthenticated_unused_lifetime = session_id_unauthenticated_unused_lifetime

    @property
    def session_id_lifetime(self):
        """Gets the session_id_lifetime of this AppConfiguration.  # noqa: E501

        The lifetime of session id in seconds. If 0 or -1 then expiration is not set. `session_id` cookie expires when browser session ends.  # noqa: E501

        :return: The session_id_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._session_id_lifetime

    @session_id_lifetime.setter
    def session_id_lifetime(self, session_id_lifetime):
        """Sets the session_id_lifetime of this AppConfiguration.

        The lifetime of session id in seconds. If 0 or -1 then expiration is not set. `session_id` cookie expires when browser session ends.  # noqa: E501

        :param session_id_lifetime: The session_id_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._session_id_lifetime = session_id_lifetime

    @property
    def session_id_enabled(self):
        """Gets the session_id_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable authentication by session_id.  # noqa: E501

        :return: The session_id_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._session_id_enabled

    @session_id_enabled.setter
    def session_id_enabled(self, session_id_enabled):
        """Sets the session_id_enabled of this AppConfiguration.

        Boolean value specifying whether to enable authentication by session_id.  # noqa: E501

        :param session_id_enabled: The session_id_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._session_id_enabled = session_id_enabled

    @property
    def session_id_persist_on_prompt_none(self):
        """Gets the session_id_persist_on_prompt_none of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to persist session ID on prompt none.  # noqa: E501

        :return: The session_id_persist_on_prompt_none of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._session_id_persist_on_prompt_none

    @session_id_persist_on_prompt_none.setter
    def session_id_persist_on_prompt_none(self, session_id_persist_on_prompt_none):
        """Sets the session_id_persist_on_prompt_none of this AppConfiguration.

        Boolean value specifying whether to persist session ID on prompt none.  # noqa: E501

        :param session_id_persist_on_prompt_none: The session_id_persist_on_prompt_none of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._session_id_persist_on_prompt_none = session_id_persist_on_prompt_none

    @property
    def configuration_update_interval(self):
        """Gets the configuration_update_interval of this AppConfiguration.  # noqa: E501

        The interval for configuration update in seconds.  # noqa: E501

        :return: The configuration_update_interval of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._configuration_update_interval

    @configuration_update_interval.setter
    def configuration_update_interval(self, configuration_update_interval):
        """Sets the configuration_update_interval of this AppConfiguration.

        The interval for configuration update in seconds.  # noqa: E501

        :param configuration_update_interval: The configuration_update_interval of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._configuration_update_interval = configuration_update_interval

    @property
    def css_location(self):
        """Gets the css_location of this AppConfiguration.  # noqa: E501

        The location for CSS files.  # noqa: E501

        :return: The css_location of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._css_location

    @css_location.setter
    def css_location(self, css_location):
        """Sets the css_location of this AppConfiguration.

        The location for CSS files.  # noqa: E501

        :param css_location: The css_location of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._css_location = css_location

    @property
    def js_location(self):
        """Gets the js_location of this AppConfiguration.  # noqa: E501

        The location for JavaScript files.  # noqa: E501

        :return: The js_location of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._js_location

    @js_location.setter
    def js_location(self, js_location):
        """Sets the js_location of this AppConfiguration.

        The location for JavaScript files.  # noqa: E501

        :param js_location: The js_location of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._js_location = js_location

    @property
    def img_location(self):
        """Gets the img_location of this AppConfiguration.  # noqa: E501

        The location for image files.  # noqa: E501

        :return: The img_location of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._img_location

    @img_location.setter
    def img_location(self, img_location):
        """Sets the img_location of this AppConfiguration.

        The location for image files.  # noqa: E501

        :param img_location: The img_location of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._img_location = img_location

    @property
    def metric_reporter_interval(self):
        """Gets the metric_reporter_interval of this AppConfiguration.  # noqa: E501

        The interval for metric reporter in seconds.  # noqa: E501

        :return: The metric_reporter_interval of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._metric_reporter_interval

    @metric_reporter_interval.setter
    def metric_reporter_interval(self, metric_reporter_interval):
        """Sets the metric_reporter_interval of this AppConfiguration.

        The interval for metric reporter in seconds.  # noqa: E501

        :param metric_reporter_interval: The metric_reporter_interval of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._metric_reporter_interval = metric_reporter_interval

    @property
    def metric_reporter_keep_data_days(self):
        """Gets the metric_reporter_keep_data_days of this AppConfiguration.  # noqa: E501

        The days to keep metric reported data.  # noqa: E501

        :return: The metric_reporter_keep_data_days of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._metric_reporter_keep_data_days

    @metric_reporter_keep_data_days.setter
    def metric_reporter_keep_data_days(self, metric_reporter_keep_data_days):
        """Sets the metric_reporter_keep_data_days of this AppConfiguration.

        The days to keep metric reported data.  # noqa: E501

        :param metric_reporter_keep_data_days: The metric_reporter_keep_data_days of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._metric_reporter_keep_data_days = metric_reporter_keep_data_days

    @property
    def metric_reporter_enabled(self):
        """Gets the metric_reporter_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable Metric Reporter.  # noqa: E501

        :return: The metric_reporter_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._metric_reporter_enabled

    @metric_reporter_enabled.setter
    def metric_reporter_enabled(self, metric_reporter_enabled):
        """Sets the metric_reporter_enabled of this AppConfiguration.

        Boolean value specifying whether to enable Metric Reporter.  # noqa: E501

        :param metric_reporter_enabled: The metric_reporter_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._metric_reporter_enabled = metric_reporter_enabled

    @property
    def pairwise_id_type(self):
        """Gets the pairwise_id_type of this AppConfiguration.  # noqa: E501

        The pairwise ID type.  # noqa: E501

        :return: The pairwise_id_type of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._pairwise_id_type

    @pairwise_id_type.setter
    def pairwise_id_type(self, pairwise_id_type):
        """Sets the pairwise_id_type of this AppConfiguration.

        The pairwise ID type.  # noqa: E501

        :param pairwise_id_type: The pairwise_id_type of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._pairwise_id_type = pairwise_id_type

    @property
    def pairwise_calculation_key(self):
        """Gets the pairwise_calculation_key of this AppConfiguration.  # noqa: E501

        Key to calculate algorithmic pairwise IDs.  # noqa: E501

        :return: The pairwise_calculation_key of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._pairwise_calculation_key

    @pairwise_calculation_key.setter
    def pairwise_calculation_key(self, pairwise_calculation_key):
        """Sets the pairwise_calculation_key of this AppConfiguration.

        Key to calculate algorithmic pairwise IDs.  # noqa: E501

        :param pairwise_calculation_key: The pairwise_calculation_key of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._pairwise_calculation_key = pairwise_calculation_key

    @property
    def pairwise_calculation_salt(self):
        """Gets the pairwise_calculation_salt of this AppConfiguration.  # noqa: E501

        Salt to calculate algorithmic pairwise IDs.  # noqa: E501

        :return: The pairwise_calculation_salt of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._pairwise_calculation_salt

    @pairwise_calculation_salt.setter
    def pairwise_calculation_salt(self, pairwise_calculation_salt):
        """Sets the pairwise_calculation_salt of this AppConfiguration.

        Salt to calculate algorithmic pairwise IDs.  # noqa: E501

        :param pairwise_calculation_salt: The pairwise_calculation_salt of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._pairwise_calculation_salt = pairwise_calculation_salt

    @property
    def share_subject_id_between_clients_with_same_sector_id(self):
        """Gets the share_subject_id_between_clients_with_same_sector_id of this AppConfiguration.  # noqa: E501

        Share Subject ID between clients with same Sector ID.  # noqa: E501

        :return: The share_subject_id_between_clients_with_same_sector_id of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._share_subject_id_between_clients_with_same_sector_id

    @share_subject_id_between_clients_with_same_sector_id.setter
    def share_subject_id_between_clients_with_same_sector_id(self, share_subject_id_between_clients_with_same_sector_id):
        """Sets the share_subject_id_between_clients_with_same_sector_id of this AppConfiguration.

        Share Subject ID between clients with same Sector ID.  # noqa: E501

        :param share_subject_id_between_clients_with_same_sector_id: The share_subject_id_between_clients_with_same_sector_id of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._share_subject_id_between_clients_with_same_sector_id = share_subject_id_between_clients_with_same_sector_id

    @property
    def web_keys_storage(self):
        """Gets the web_keys_storage of this AppConfiguration.  # noqa: E501

        Web Key Storage Type.  # noqa: E501

        :return: The web_keys_storage of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._web_keys_storage

    @web_keys_storage.setter
    def web_keys_storage(self, web_keys_storage):
        """Sets the web_keys_storage of this AppConfiguration.

        Web Key Storage Type.  # noqa: E501

        :param web_keys_storage: The web_keys_storage of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._web_keys_storage = web_keys_storage

    @property
    def dn_name(self):
        """Gets the dn_name of this AppConfiguration.  # noqa: E501

        DN of certificate issuer.  # noqa: E501

        :return: The dn_name of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._dn_name

    @dn_name.setter
    def dn_name(self, dn_name):
        """Sets the dn_name of this AppConfiguration.

        DN of certificate issuer.  # noqa: E501

        :param dn_name: The dn_name of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._dn_name = dn_name

    @property
    def key_store_file(self):
        """Gets the key_store_file of this AppConfiguration.  # noqa: E501

        The Key Store File (JKS).  # noqa: E501

        :return: The key_store_file of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._key_store_file

    @key_store_file.setter
    def key_store_file(self, key_store_file):
        """Sets the key_store_file of this AppConfiguration.

        The Key Store File (JKS).  # noqa: E501

        :param key_store_file: The key_store_file of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._key_store_file = key_store_file

    @property
    def key_store_secret(self):
        """Gets the key_store_secret of this AppConfiguration.  # noqa: E501

        The password of the Key Store.  # noqa: E501

        :return: The key_store_secret of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._key_store_secret

    @key_store_secret.setter
    def key_store_secret(self, key_store_secret):
        """Sets the key_store_secret of this AppConfiguration.

        The password of the Key Store.  # noqa: E501

        :param key_store_secret: The key_store_secret of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._key_store_secret = key_store_secret

    @property
    def end_session_with_access_token(self):
        """Gets the end_session_with_access_token of this AppConfiguration.  # noqa: E501

        Accept access token to call end_session endpoint.  # noqa: E501

        :return: The end_session_with_access_token of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._end_session_with_access_token

    @end_session_with_access_token.setter
    def end_session_with_access_token(self, end_session_with_access_token):
        """Sets the end_session_with_access_token of this AppConfiguration.

        Accept access token to call end_session endpoint.  # noqa: E501

        :param end_session_with_access_token: The end_session_with_access_token of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._end_session_with_access_token = end_session_with_access_token

    @property
    def client_white_list(self):
        """Gets the client_white_list of this AppConfiguration.  # noqa: E501

        White List for Client Redirection URIs.  # noqa: E501

        :return: The client_white_list of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_white_list

    @client_white_list.setter
    def client_white_list(self, client_white_list):
        """Sets the client_white_list of this AppConfiguration.

        White List for Client Redirection URIs.  # noqa: E501

        :param client_white_list: The client_white_list of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._client_white_list = client_white_list

    @property
    def client_black_list(self):
        """Gets the client_black_list of this AppConfiguration.  # noqa: E501

        Black List for Client Redirection URIs.  # noqa: E501

        :return: The client_black_list of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_black_list

    @client_black_list.setter
    def client_black_list(self, client_black_list):
        """Sets the client_black_list of this AppConfiguration.

        Black List for Client Redirection URIs.  # noqa: E501

        :param client_black_list: The client_black_list of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._client_black_list = client_black_list

    @property
    def legacy_id_token_claims(self):
        """Gets the legacy_id_token_claims of this AppConfiguration.  # noqa: E501

        Include Claims in ID Token.  # noqa: E501

        :return: The legacy_id_token_claims of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._legacy_id_token_claims

    @legacy_id_token_claims.setter
    def legacy_id_token_claims(self, legacy_id_token_claims):
        """Sets the legacy_id_token_claims of this AppConfiguration.

        Include Claims in ID Token.  # noqa: E501

        :param legacy_id_token_claims: The legacy_id_token_claims of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._legacy_id_token_claims = legacy_id_token_claims

    @property
    def custom_headers_with_authorization_response(self):
        """Gets the custom_headers_with_authorization_response of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable Custom Response Header parameter to return custom headers with the Authorization Response.  # noqa: E501

        :return: The custom_headers_with_authorization_response of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._custom_headers_with_authorization_response

    @custom_headers_with_authorization_response.setter
    def custom_headers_with_authorization_response(self, custom_headers_with_authorization_response):
        """Sets the custom_headers_with_authorization_response of this AppConfiguration.

        Boolean value specifying whether to enable Custom Response Header parameter to return custom headers with the Authorization Response.  # noqa: E501

        :param custom_headers_with_authorization_response: The custom_headers_with_authorization_response of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._custom_headers_with_authorization_response = custom_headers_with_authorization_response

    @property
    def front_channel_logout_session_supported(self):
        """Gets the front_channel_logout_session_supported of this AppConfiguration.  # noqa: E501

        Boolean value to specify support for front channel logout session.  # noqa: E501

        :return: The front_channel_logout_session_supported of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._front_channel_logout_session_supported

    @front_channel_logout_session_supported.setter
    def front_channel_logout_session_supported(self, front_channel_logout_session_supported):
        """Sets the front_channel_logout_session_supported of this AppConfiguration.

        Boolean value to specify support for front channel logout session.  # noqa: E501

        :param front_channel_logout_session_supported: The front_channel_logout_session_supported of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._front_channel_logout_session_supported = front_channel_logout_session_supported

    @property
    def use_cache_for_all_implicit_flow_objects(self):
        """Gets the use_cache_for_all_implicit_flow_objects of this AppConfiguration.  # noqa: E501

        Boolean value to specify whether to persist all objects into cache during Implicit Flow.  # noqa: E501

        :return: The use_cache_for_all_implicit_flow_objects of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._use_cache_for_all_implicit_flow_objects

    @use_cache_for_all_implicit_flow_objects.setter
    def use_cache_for_all_implicit_flow_objects(self, use_cache_for_all_implicit_flow_objects):
        """Sets the use_cache_for_all_implicit_flow_objects of this AppConfiguration.

        Boolean value to specify whether to persist all objects into cache during Implicit Flow.  # noqa: E501

        :param use_cache_for_all_implicit_flow_objects: The use_cache_for_all_implicit_flow_objects of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._use_cache_for_all_implicit_flow_objects = use_cache_for_all_implicit_flow_objects

    @property
    def invalidate_session_cookies_after_authorization_flow(self):
        """Gets the invalidate_session_cookies_after_authorization_flow of this AppConfiguration.  # noqa: E501

        Boolean value to specify whether to invalidate `session_id` and `consent_session_id` cookies right after successful or unsuccessful authorization.  # noqa: E501

        :return: The invalidate_session_cookies_after_authorization_flow of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._invalidate_session_cookies_after_authorization_flow

    @invalidate_session_cookies_after_authorization_flow.setter
    def invalidate_session_cookies_after_authorization_flow(self, invalidate_session_cookies_after_authorization_flow):
        """Sets the invalidate_session_cookies_after_authorization_flow of this AppConfiguration.

        Boolean value to specify whether to invalidate `session_id` and `consent_session_id` cookies right after successful or unsuccessful authorization.  # noqa: E501

        :param invalidate_session_cookies_after_authorization_flow: The invalidate_session_cookies_after_authorization_flow of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._invalidate_session_cookies_after_authorization_flow = invalidate_session_cookies_after_authorization_flow

    @property
    def update_user_last_logon_time(self):
        """Gets the update_user_last_logon_time of this AppConfiguration.  # noqa: E501

        Boolean value to specify if application should update oxLastLogonTime attribute on user authentication.  # noqa: E501

        :return: The update_user_last_logon_time of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._update_user_last_logon_time

    @update_user_last_logon_time.setter
    def update_user_last_logon_time(self, update_user_last_logon_time):
        """Sets the update_user_last_logon_time of this AppConfiguration.

        Boolean value to specify if application should update oxLastLogonTime attribute on user authentication.  # noqa: E501

        :param update_user_last_logon_time: The update_user_last_logon_time of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._update_user_last_logon_time = update_user_last_logon_time

    @property
    def update_client_access_time(self):
        """Gets the update_client_access_time of this AppConfiguration.  # noqa: E501

        Boolean value to specify if application should update oxLastAccessTime/oxLastLogonTime attributes on client authentication.  # noqa: E501

        :return: The update_client_access_time of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._update_client_access_time

    @update_client_access_time.setter
    def update_client_access_time(self, update_client_access_time):
        """Sets the update_client_access_time of this AppConfiguration.

        Boolean value to specify if application should update oxLastAccessTime/oxLastLogonTime attributes on client authentication.  # noqa: E501

        :param update_client_access_time: The update_client_access_time of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._update_client_access_time = update_client_access_time

    @property
    def enable_client_grant_type_update(self):
        """Gets the enable_client_grant_type_update of this AppConfiguration.  # noqa: E501

        Boolean value to specify if client can update Grant Type values.  # noqa: E501

        :return: The enable_client_grant_type_update of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enable_client_grant_type_update

    @enable_client_grant_type_update.setter
    def enable_client_grant_type_update(self, enable_client_grant_type_update):
        """Sets the enable_client_grant_type_update of this AppConfiguration.

        Boolean value to specify if client can update Grant Type values.  # noqa: E501

        :param enable_client_grant_type_update: The enable_client_grant_type_update of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._enable_client_grant_type_update = enable_client_grant_type_update

    @property
    def logging_level(self):
        """Gets the logging_level of this AppConfiguration.  # noqa: E501

        Logging level for jans-auth logger.  # noqa: E501

        :return: The logging_level of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._logging_level

    @logging_level.setter
    def logging_level(self, logging_level):
        """Sets the logging_level of this AppConfiguration.

        Logging level for jans-auth logger.  # noqa: E501

        :param logging_level: The logging_level of this AppConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "OFF"]  # noqa: E501
        if logging_level not in allowed_values:
            raise ValueError(
                "Invalid value for `logging_level` ({0}), must be one of {1}"  # noqa: E501
                .format(logging_level, allowed_values)
            )

        self._logging_level = logging_level

    @property
    def cors_configuration_filters(self):
        """Gets the cors_configuration_filters of this AppConfiguration.  # noqa: E501

        CORS Configuration filters.  # noqa: E501

        :return: The cors_configuration_filters of this AppConfiguration.  # noqa: E501
        :rtype: list[AppConfigurationCorsConfigurationFilters]
        """
        return self._cors_configuration_filters

    @cors_configuration_filters.setter
    def cors_configuration_filters(self, cors_configuration_filters):
        """Sets the cors_configuration_filters of this AppConfiguration.

        CORS Configuration filters.  # noqa: E501

        :param cors_configuration_filters: The cors_configuration_filters of this AppConfiguration.  # noqa: E501
        :type: list[AppConfigurationCorsConfigurationFilters]
        """

        self._cors_configuration_filters = cors_configuration_filters

    @property
    def log_client_id_on_client_authentication(self):
        """Gets the log_client_id_on_client_authentication of this AppConfiguration.  # noqa: E501

        Boolean value to specify if application should log the Client ID on client authentication.  # noqa: E501

        :return: The log_client_id_on_client_authentication of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._log_client_id_on_client_authentication

    @log_client_id_on_client_authentication.setter
    def log_client_id_on_client_authentication(self, log_client_id_on_client_authentication):
        """Sets the log_client_id_on_client_authentication of this AppConfiguration.

        Boolean value to specify if application should log the Client ID on client authentication.  # noqa: E501

        :param log_client_id_on_client_authentication: The log_client_id_on_client_authentication of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._log_client_id_on_client_authentication = log_client_id_on_client_authentication

    @property
    def log_client_name_on_client_authentication(self):
        """Gets the log_client_name_on_client_authentication of this AppConfiguration.  # noqa: E501

        Boolean value to specify if application should log the Client Name on client authentication.  # noqa: E501

        :return: The log_client_name_on_client_authentication of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._log_client_name_on_client_authentication

    @log_client_name_on_client_authentication.setter
    def log_client_name_on_client_authentication(self, log_client_name_on_client_authentication):
        """Sets the log_client_name_on_client_authentication of this AppConfiguration.

        Boolean value to specify if application should log the Client Name on client authentication.  # noqa: E501

        :param log_client_name_on_client_authentication: The log_client_name_on_client_authentication of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._log_client_name_on_client_authentication = log_client_name_on_client_authentication

    @property
    def authorization_request_custom_allowed_parameters(self):
        """Gets the authorization_request_custom_allowed_parameters of this AppConfiguration.  # noqa: E501

        Authorization Request Custom Allowed Parameters.  # noqa: E501

        :return: The authorization_request_custom_allowed_parameters of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorization_request_custom_allowed_parameters

    @authorization_request_custom_allowed_parameters.setter
    def authorization_request_custom_allowed_parameters(self, authorization_request_custom_allowed_parameters):
        """Sets the authorization_request_custom_allowed_parameters of this AppConfiguration.

        Authorization Request Custom Allowed Parameters.  # noqa: E501

        :param authorization_request_custom_allowed_parameters: The authorization_request_custom_allowed_parameters of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._authorization_request_custom_allowed_parameters = authorization_request_custom_allowed_parameters

    @property
    def legacy_dynamic_registration_scope_param(self):
        """Gets the legacy_dynamic_registration_scope_param of this AppConfiguration.  # noqa: E501

        Legacy Dynamic Registration Scopes JSON Array Param.  # noqa: E501

        :return: The legacy_dynamic_registration_scope_param of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._legacy_dynamic_registration_scope_param

    @legacy_dynamic_registration_scope_param.setter
    def legacy_dynamic_registration_scope_param(self, legacy_dynamic_registration_scope_param):
        """Sets the legacy_dynamic_registration_scope_param of this AppConfiguration.

        Legacy Dynamic Registration Scopes JSON Array Param.  # noqa: E501

        :param legacy_dynamic_registration_scope_param: The legacy_dynamic_registration_scope_param of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._legacy_dynamic_registration_scope_param = legacy_dynamic_registration_scope_param

    @property
    def openid_scope_backward_compatibility(self):
        """Gets the openid_scope_backward_compatibility of this AppConfiguration.  # noqa: E501

        Set to false to only allow token endpoint request for openid scope with grant type equals to authorization_code, restrict access to userinfo to scope openid and only return id_token if scope contains openid.  # noqa: E501

        :return: The openid_scope_backward_compatibility of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._openid_scope_backward_compatibility

    @openid_scope_backward_compatibility.setter
    def openid_scope_backward_compatibility(self, openid_scope_backward_compatibility):
        """Sets the openid_scope_backward_compatibility of this AppConfiguration.

        Set to false to only allow token endpoint request for openid scope with grant type equals to authorization_code, restrict access to userinfo to scope openid and only return id_token if scope contains openid.  # noqa: E501

        :param openid_scope_backward_compatibility: The openid_scope_backward_compatibility of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._openid_scope_backward_compatibility = openid_scope_backward_compatibility

    @property
    def skip_authorization_for_open_id_scope_and_pairwise_id(self):
        """Gets the skip_authorization_for_open_id_scope_and_pairwise_id of this AppConfiguration.  # noqa: E501

        If a client has only openid scope and pairwise id, person should not have to authorize.  # noqa: E501

        :return: The skip_authorization_for_open_id_scope_and_pairwise_id of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._skip_authorization_for_open_id_scope_and_pairwise_id

    @skip_authorization_for_open_id_scope_and_pairwise_id.setter
    def skip_authorization_for_open_id_scope_and_pairwise_id(self, skip_authorization_for_open_id_scope_and_pairwise_id):
        """Sets the skip_authorization_for_open_id_scope_and_pairwise_id of this AppConfiguration.

        If a client has only openid scope and pairwise id, person should not have to authorize.  # noqa: E501

        :param skip_authorization_for_open_id_scope_and_pairwise_id: The skip_authorization_for_open_id_scope_and_pairwise_id of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._skip_authorization_for_open_id_scope_and_pairwise_id = skip_authorization_for_open_id_scope_and_pairwise_id

    @property
    def allow_post_logout_redirect_without_validation(self):
        """Gets the allow_post_logout_redirect_without_validation of this AppConfiguration.  # noqa: E501

        Allows post logout redirect without validation for End Session Endpoint.  # noqa: E501

        :return: The allow_post_logout_redirect_without_validation of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._allow_post_logout_redirect_without_validation

    @allow_post_logout_redirect_without_validation.setter
    def allow_post_logout_redirect_without_validation(self, allow_post_logout_redirect_without_validation):
        """Sets the allow_post_logout_redirect_without_validation of this AppConfiguration.

        Allows post logout redirect without validation for End Session Endpoint.  # noqa: E501

        :param allow_post_logout_redirect_without_validation: The allow_post_logout_redirect_without_validation of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._allow_post_logout_redirect_without_validation = allow_post_logout_redirect_without_validation

    @property
    def http_logging_enabled(self):
        """Gets the http_logging_enabled of this AppConfiguration.  # noqa: E501

        Enable/Disable request/response logging filter.  # noqa: E501

        :return: The http_logging_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._http_logging_enabled

    @http_logging_enabled.setter
    def http_logging_enabled(self, http_logging_enabled):
        """Sets the http_logging_enabled of this AppConfiguration.

        Enable/Disable request/response logging filter.  # noqa: E501

        :param http_logging_enabled: The http_logging_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._http_logging_enabled = http_logging_enabled

    @property
    def http_logging_exlude_paths(self):
        """Gets the http_logging_exlude_paths of this AppConfiguration.  # noqa: E501

        List of base URI for which request/response logging filter should not record activity.  # noqa: E501

        :return: The http_logging_exlude_paths of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._http_logging_exlude_paths

    @http_logging_exlude_paths.setter
    def http_logging_exlude_paths(self, http_logging_exlude_paths):
        """Sets the http_logging_exlude_paths of this AppConfiguration.

        List of base URI for which request/response logging filter should not record activity.  # noqa: E501

        :param http_logging_exlude_paths: The http_logging_exlude_paths of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._http_logging_exlude_paths = http_logging_exlude_paths

    @property
    def external_logger_configuration(self):
        """Gets the external_logger_configuration of this AppConfiguration.  # noqa: E501

        Path to external log4j2 logging configuration.  # noqa: E501

        :return: The external_logger_configuration of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._external_logger_configuration

    @external_logger_configuration.setter
    def external_logger_configuration(self, external_logger_configuration):
        """Sets the external_logger_configuration of this AppConfiguration.

        Path to external log4j2 logging configuration.  # noqa: E501

        :param external_logger_configuration: The external_logger_configuration of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._external_logger_configuration = external_logger_configuration

    @property
    def disable_u2f_endpoint(self):
        """Gets the disable_u2f_endpoint of this AppConfiguration.  # noqa: E501

        Enable/Disable U2F endpoints.  # noqa: E501

        :return: The disable_u2f_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._disable_u2f_endpoint

    @disable_u2f_endpoint.setter
    def disable_u2f_endpoint(self, disable_u2f_endpoint):
        """Sets the disable_u2f_endpoint of this AppConfiguration.

        Enable/Disable U2F endpoints.  # noqa: E501

        :param disable_u2f_endpoint: The disable_u2f_endpoint of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._disable_u2f_endpoint = disable_u2f_endpoint

    @property
    def disable_jdk_logger(self):
        """Gets the disable_jdk_logger of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable JDK Loggers.  # noqa: E501

        :return: The disable_jdk_logger of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._disable_jdk_logger

    @disable_jdk_logger.setter
    def disable_jdk_logger(self, disable_jdk_logger):
        """Sets the disable_jdk_logger of this AppConfiguration.

        Boolean value specifying whether to enable JDK Loggers.  # noqa: E501

        :param disable_jdk_logger: The disable_jdk_logger of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._disable_jdk_logger = disable_jdk_logger

    @property
    def jms_user_name(self):
        """Gets the jms_user_name of this AppConfiguration.  # noqa: E501

        JMS UserName.  # noqa: E501

        :return: The jms_user_name of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._jms_user_name

    @jms_user_name.setter
    def jms_user_name(self, jms_user_name):
        """Sets the jms_user_name of this AppConfiguration.

        JMS UserName.  # noqa: E501

        :param jms_user_name: The jms_user_name of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._jms_user_name = jms_user_name

    @property
    def jms_password(self):
        """Gets the jms_password of this AppConfiguration.  # noqa: E501

        JMS Password.  # noqa: E501

        :return: The jms_password of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._jms_password

    @jms_password.setter
    def jms_password(self, jms_password):
        """Sets the jms_password of this AppConfiguration.

        JMS Password.  # noqa: E501

        :param jms_password: The jms_password of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._jms_password = jms_password

    @property
    def jms_broker_uri_set(self):
        """Gets the jms_broker_uri_set of this AppConfiguration.  # noqa: E501

        JMS Broker URI Set.  # noqa: E501

        :return: The jms_broker_uri_set of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._jms_broker_uri_set

    @jms_broker_uri_set.setter
    def jms_broker_uri_set(self, jms_broker_uri_set):
        """Sets the jms_broker_uri_set of this AppConfiguration.

        JMS Broker URI Set.  # noqa: E501

        :param jms_broker_uri_set: The jms_broker_uri_set of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._jms_broker_uri_set = jms_broker_uri_set

    @property
    def ox_eleven_test_mode_token(self):
        """Gets the ox_eleven_test_mode_token of this AppConfiguration.  # noqa: E501

        oxEleven Test Mode Token.  # noqa: E501

        :return: The ox_eleven_test_mode_token of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ox_eleven_test_mode_token

    @ox_eleven_test_mode_token.setter
    def ox_eleven_test_mode_token(self, ox_eleven_test_mode_token):
        """Sets the ox_eleven_test_mode_token of this AppConfiguration.

        oxEleven Test Mode Token.  # noqa: E501

        :param ox_eleven_test_mode_token: The ox_eleven_test_mode_token of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._ox_eleven_test_mode_token = ox_eleven_test_mode_token

    @property
    def enabled_o_auth_audit_logging(self):
        """Gets the enabled_o_auth_audit_logging of this AppConfiguration.  # noqa: E501

        enabled OAuth Audit Logging.  # noqa: E501

        :return: The enabled_o_auth_audit_logging of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enabled_o_auth_audit_logging

    @enabled_o_auth_audit_logging.setter
    def enabled_o_auth_audit_logging(self, enabled_o_auth_audit_logging):
        """Sets the enabled_o_auth_audit_logging of this AppConfiguration.

        enabled OAuth Audit Logging.  # noqa: E501

        :param enabled_o_auth_audit_logging: The enabled_o_auth_audit_logging of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._enabled_o_auth_audit_logging = enabled_o_auth_audit_logging

    @property
    def authentication_protection_configuration(self):
        """Gets the authentication_protection_configuration of this AppConfiguration.  # noqa: E501


        :return: The authentication_protection_configuration of this AppConfiguration.  # noqa: E501
        :rtype: AppConfigurationAuthenticationProtectionConfiguration
        """
        return self._authentication_protection_configuration

    @authentication_protection_configuration.setter
    def authentication_protection_configuration(self, authentication_protection_configuration):
        """Sets the authentication_protection_configuration of this AppConfiguration.


        :param authentication_protection_configuration: The authentication_protection_configuration of this AppConfiguration.  # noqa: E501
        :type: AppConfigurationAuthenticationProtectionConfiguration
        """

        self._authentication_protection_configuration = authentication_protection_configuration

    @property
    def error_handling_method(self):
        """Gets the error_handling_method of this AppConfiguration.  # noqa: E501

        A list of possible error handling methods.  # noqa: E501

        :return: The error_handling_method of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._error_handling_method

    @error_handling_method.setter
    def error_handling_method(self, error_handling_method):
        """Sets the error_handling_method of this AppConfiguration.

        A list of possible error handling methods.  # noqa: E501

        :param error_handling_method: The error_handling_method of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._error_handling_method = error_handling_method

    @property
    def use_local_cache(self):
        """Gets the use_local_cache of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable local in-memory cache for attributes, scopes, clients and organization configuration.  # noqa: E501

        :return: The use_local_cache of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._use_local_cache

    @use_local_cache.setter
    def use_local_cache(self, use_local_cache):
        """Sets the use_local_cache of this AppConfiguration.

        Boolean value specifying whether to enable local in-memory cache for attributes, scopes, clients and organization configuration.  # noqa: E501

        :param use_local_cache: The use_local_cache of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._use_local_cache = use_local_cache

    @property
    def spontaneous_scope_lifetime(self):
        """Gets the spontaneous_scope_lifetime of this AppConfiguration.  # noqa: E501

        The lifetime of spontaneous scope in seconds.  # noqa: E501

        :return: The spontaneous_scope_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._spontaneous_scope_lifetime

    @spontaneous_scope_lifetime.setter
    def spontaneous_scope_lifetime(self, spontaneous_scope_lifetime):
        """Sets the spontaneous_scope_lifetime of this AppConfiguration.

        The lifetime of spontaneous scope in seconds.  # noqa: E501

        :param spontaneous_scope_lifetime: The spontaneous_scope_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._spontaneous_scope_lifetime = spontaneous_scope_lifetime

    @property
    def jwks_algorithms_supported(self):
        """Gets the jwks_algorithms_supported of this AppConfiguration.  # noqa: E501

        A list of algorithms that will be used in JWKS endpoint.  # noqa: E501

        :return: The jwks_algorithms_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._jwks_algorithms_supported

    @jwks_algorithms_supported.setter
    def jwks_algorithms_supported(self, jwks_algorithms_supported):
        """Sets the jwks_algorithms_supported of this AppConfiguration.

        A list of algorithms that will be used in JWKS endpoint.  # noqa: E501

        :param jwks_algorithms_supported: The jwks_algorithms_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._jwks_algorithms_supported = jwks_algorithms_supported

    @property
    def dynamic_registration_password_grant_type_enabled(self):
        """Gets the dynamic_registration_password_grant_type_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable Password Grant Type during Dynamic Registration.  # noqa: E501

        :return: The dynamic_registration_password_grant_type_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_registration_password_grant_type_enabled

    @dynamic_registration_password_grant_type_enabled.setter
    def dynamic_registration_password_grant_type_enabled(self, dynamic_registration_password_grant_type_enabled):
        """Sets the dynamic_registration_password_grant_type_enabled of this AppConfiguration.

        Boolean value specifying whether to enable Password Grant Type during Dynamic Registration.  # noqa: E501

        :param dynamic_registration_password_grant_type_enabled: The dynamic_registration_password_grant_type_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._dynamic_registration_password_grant_type_enabled = dynamic_registration_password_grant_type_enabled

    @property
    def return_client_secret_on_read(self):
        """Gets the return_client_secret_on_read of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether a client_secret is returned on client GET or PUT. Set to false by default which means to not return secret.  # noqa: E501

        :return: The return_client_secret_on_read of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._return_client_secret_on_read

    @return_client_secret_on_read.setter
    def return_client_secret_on_read(self, return_client_secret_on_read):
        """Sets the return_client_secret_on_read of this AppConfiguration.

        Boolean value specifying whether a client_secret is returned on client GET or PUT. Set to false by default which means to not return secret.  # noqa: E501

        :param return_client_secret_on_read: The return_client_secret_on_read of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._return_client_secret_on_read = return_client_secret_on_read

    @property
    def reject_jwt_with_none_alg(self):
        """Gets the reject_jwt_with_none_alg of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether reject JWT requested or validated with algorithm None. Default value is true.  # noqa: E501

        :return: The reject_jwt_with_none_alg of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._reject_jwt_with_none_alg

    @reject_jwt_with_none_alg.setter
    def reject_jwt_with_none_alg(self, reject_jwt_with_none_alg):
        """Sets the reject_jwt_with_none_alg of this AppConfiguration.

        Boolean value specifying whether reject JWT requested or validated with algorithm None. Default value is true.  # noqa: E501

        :param reject_jwt_with_none_alg: The reject_jwt_with_none_alg of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._reject_jwt_with_none_alg = reject_jwt_with_none_alg

    @property
    def expiration_notificator_enabled(self):
        """Gets the expiration_notificator_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether expiration notificator is enabled (used to identify expiration for persistence that support TTL, like Couchbase).  # noqa: E501

        :return: The expiration_notificator_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._expiration_notificator_enabled

    @expiration_notificator_enabled.setter
    def expiration_notificator_enabled(self, expiration_notificator_enabled):
        """Sets the expiration_notificator_enabled of this AppConfiguration.

        Boolean value specifying whether expiration notificator is enabled (used to identify expiration for persistence that support TTL, like Couchbase).  # noqa: E501

        :param expiration_notificator_enabled: The expiration_notificator_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._expiration_notificator_enabled = expiration_notificator_enabled

    @property
    def expiration_notificator_map_size_limit(self):
        """Gets the expiration_notificator_map_size_limit of this AppConfiguration.  # noqa: E501

        The expiration notificator maximum size limit.  # noqa: E501

        :return: The expiration_notificator_map_size_limit of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._expiration_notificator_map_size_limit

    @expiration_notificator_map_size_limit.setter
    def expiration_notificator_map_size_limit(self, expiration_notificator_map_size_limit):
        """Sets the expiration_notificator_map_size_limit of this AppConfiguration.

        The expiration notificator maximum size limit.  # noqa: E501

        :param expiration_notificator_map_size_limit: The expiration_notificator_map_size_limit of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._expiration_notificator_map_size_limit = expiration_notificator_map_size_limit

    @property
    def expiration_notificator_interval_in_seconds(self):
        """Gets the expiration_notificator_interval_in_seconds of this AppConfiguration.  # noqa: E501

        The expiration notificator interval in seconds.  # noqa: E501

        :return: The expiration_notificator_interval_in_seconds of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._expiration_notificator_interval_in_seconds

    @expiration_notificator_interval_in_seconds.setter
    def expiration_notificator_interval_in_seconds(self, expiration_notificator_interval_in_seconds):
        """Sets the expiration_notificator_interval_in_seconds of this AppConfiguration.

        The expiration notificator interval in seconds.  # noqa: E501

        :param expiration_notificator_interval_in_seconds: The expiration_notificator_interval_in_seconds of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._expiration_notificator_interval_in_seconds = expiration_notificator_interval_in_seconds

    @property
    def client_reg_default_to_code_flow_with_refresh(self):
        """Gets the client_reg_default_to_code_flow_with_refresh of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to add Authorization Code Flow with Refresh grant during client registration.  # noqa: E501

        :return: The client_reg_default_to_code_flow_with_refresh of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._client_reg_default_to_code_flow_with_refresh

    @client_reg_default_to_code_flow_with_refresh.setter
    def client_reg_default_to_code_flow_with_refresh(self, client_reg_default_to_code_flow_with_refresh):
        """Sets the client_reg_default_to_code_flow_with_refresh of this AppConfiguration.

        Boolean value specifying whether to add Authorization Code Flow with Refresh grant during client registration.  # noqa: E501

        :param client_reg_default_to_code_flow_with_refresh: The client_reg_default_to_code_flow_with_refresh of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._client_reg_default_to_code_flow_with_refresh = client_reg_default_to_code_flow_with_refresh

    @property
    def session_id_request_parameter_enabled(self):
        """Gets the session_id_request_parameter_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable session_id HTTP request parameter.  # noqa: E501

        :return: The session_id_request_parameter_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._session_id_request_parameter_enabled

    @session_id_request_parameter_enabled.setter
    def session_id_request_parameter_enabled(self, session_id_request_parameter_enabled):
        """Sets the session_id_request_parameter_enabled of this AppConfiguration.

        Boolean value specifying whether to enable session_id HTTP request parameter.  # noqa: E501

        :param session_id_request_parameter_enabled: The session_id_request_parameter_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._session_id_request_parameter_enabled = session_id_request_parameter_enabled

    @property
    def change_session_id_on_authentication(self):
        """Gets the change_session_id_on_authentication of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to enable session_id HTTP request parameter.  # noqa: E501

        :return: The change_session_id_on_authentication of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._change_session_id_on_authentication

    @change_session_id_on_authentication.setter
    def change_session_id_on_authentication(self, change_session_id_on_authentication):
        """Sets the change_session_id_on_authentication of this AppConfiguration.

        Boolean value specifying whether to enable session_id HTTP request parameter.  # noqa: E501

        :param change_session_id_on_authentication: The change_session_id_on_authentication of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._change_session_id_on_authentication = change_session_id_on_authentication

    @property
    def server_session_id_lifetime(self):
        """Gets the server_session_id_lifetime of this AppConfiguration.  # noqa: E501

        The sessionId lifetime in seconds for sessionId.  # noqa: E501

        :return: The server_session_id_lifetime of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._server_session_id_lifetime

    @server_session_id_lifetime.setter
    def server_session_id_lifetime(self, server_session_id_lifetime):
        """Sets the server_session_id_lifetime of this AppConfiguration.

        The sessionId lifetime in seconds for sessionId.  # noqa: E501

        :param server_session_id_lifetime: The server_session_id_lifetime of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._server_session_id_lifetime = server_session_id_lifetime

    @property
    def cookie_domain(self):
        """Gets the cookie_domain of this AppConfiguration.  # noqa: E501

        Sets cookie domain for all cookies created by OP.  # noqa: E501

        :return: The cookie_domain of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cookie_domain

    @cookie_domain.setter
    def cookie_domain(self, cookie_domain):
        """Sets the cookie_domain of this AppConfiguration.

        Sets cookie domain for all cookies created by OP.  # noqa: E501

        :param cookie_domain: The cookie_domain of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._cookie_domain = cookie_domain

    @property
    def logging_layout(self):
        """Gets the logging_layout of this AppConfiguration.  # noqa: E501

        Logging layout used for Jans Authorization Server loggers.  # noqa: E501

        :return: The logging_layout of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._logging_layout

    @logging_layout.setter
    def logging_layout(self, logging_layout):
        """Sets the logging_layout of this AppConfiguration.

        Logging layout used for Jans Authorization Server loggers.  # noqa: E501

        :param logging_layout: The logging_layout of this AppConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["text", "json"]  # noqa: E501
        if logging_layout not in allowed_values:
            raise ValueError(
                "Invalid value for `logging_layout` ({0}), must be one of {1}"  # noqa: E501
                .format(logging_layout, allowed_values)
            )

        self._logging_layout = logging_layout

    @property
    def fapi_compatibility(self):
        """Gets the fapi_compatibility of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether turn on FAPI compatibility mode. If true AS behaves in more strict mode.  # noqa: E501

        :return: The fapi_compatibility of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._fapi_compatibility

    @fapi_compatibility.setter
    def fapi_compatibility(self, fapi_compatibility):
        """Sets the fapi_compatibility of this AppConfiguration.

        Boolean value specifying whether turn on FAPI compatibility mode. If true AS behaves in more strict mode.  # noqa: E501

        :param fapi_compatibility: The fapi_compatibility of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._fapi_compatibility = fapi_compatibility

    @property
    def force_id_token_hint_precense(self):
        """Gets the force_id_token_hint_precense of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether force id_token_hint parameter presence (false by default).  # noqa: E501

        :return: The force_id_token_hint_precense of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._force_id_token_hint_precense

    @force_id_token_hint_precense.setter
    def force_id_token_hint_precense(self, force_id_token_hint_precense):
        """Sets the force_id_token_hint_precense of this AppConfiguration.

        Boolean value specifying whether force id_token_hint parameter presence (false by default).  # noqa: E501

        :param force_id_token_hint_precense: The force_id_token_hint_precense of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._force_id_token_hint_precense = force_id_token_hint_precense

    @property
    def force_offline_access_scope_to_enable_refresh_token(self):
        """Gets the force_offline_access_scope_to_enable_refresh_token of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether force offline_access scope to enable refresh_token grant type. Default value is true.  # noqa: E501

        :return: The force_offline_access_scope_to_enable_refresh_token of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._force_offline_access_scope_to_enable_refresh_token

    @force_offline_access_scope_to_enable_refresh_token.setter
    def force_offline_access_scope_to_enable_refresh_token(self, force_offline_access_scope_to_enable_refresh_token):
        """Sets the force_offline_access_scope_to_enable_refresh_token of this AppConfiguration.

        Boolean value specifying whether force offline_access scope to enable refresh_token grant type. Default value is true.  # noqa: E501

        :param force_offline_access_scope_to_enable_refresh_token: The force_offline_access_scope_to_enable_refresh_token of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._force_offline_access_scope_to_enable_refresh_token = force_offline_access_scope_to_enable_refresh_token

    @property
    def error_reason_enabled(self):
        """Gets the error_reason_enabled of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to return detailed reason of the error from AS. Default value is false.  # noqa: E501

        :return: The error_reason_enabled of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._error_reason_enabled

    @error_reason_enabled.setter
    def error_reason_enabled(self, error_reason_enabled):
        """Sets the error_reason_enabled of this AppConfiguration.

        Boolean value specifying whether to return detailed reason of the error from AS. Default value is false.  # noqa: E501

        :param error_reason_enabled: The error_reason_enabled of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._error_reason_enabled = error_reason_enabled

    @property
    def remove_refresh_tokens_for_client_on_logout(self):
        """Gets the remove_refresh_tokens_for_client_on_logout of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to remove refresh tokens on logout. Default value is true.  # noqa: E501

        :return: The remove_refresh_tokens_for_client_on_logout of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._remove_refresh_tokens_for_client_on_logout

    @remove_refresh_tokens_for_client_on_logout.setter
    def remove_refresh_tokens_for_client_on_logout(self, remove_refresh_tokens_for_client_on_logout):
        """Sets the remove_refresh_tokens_for_client_on_logout of this AppConfiguration.

        Boolean value specifying whether to remove refresh tokens on logout. Default value is true.  # noqa: E501

        :param remove_refresh_tokens_for_client_on_logout: The remove_refresh_tokens_for_client_on_logout of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._remove_refresh_tokens_for_client_on_logout = remove_refresh_tokens_for_client_on_logout

    @property
    def consent_gathering_script_backward_compatibility(self):
        """Gets the consent_gathering_script_backward_compatibility of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether turn on Consent Gathering Script backward compatibility mode. If true AS will pick up script with higher level globally. If false (default) AS will pick up script based on client configuration.  # noqa: E501

        :return: The consent_gathering_script_backward_compatibility of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._consent_gathering_script_backward_compatibility

    @consent_gathering_script_backward_compatibility.setter
    def consent_gathering_script_backward_compatibility(self, consent_gathering_script_backward_compatibility):
        """Sets the consent_gathering_script_backward_compatibility of this AppConfiguration.

        Boolean value specifying whether turn on Consent Gathering Script backward compatibility mode. If true AS will pick up script with higher level globally. If false (default) AS will pick up script based on client configuration.  # noqa: E501

        :param consent_gathering_script_backward_compatibility: The consent_gathering_script_backward_compatibility of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._consent_gathering_script_backward_compatibility = consent_gathering_script_backward_compatibility

    @property
    def introspection_script_backward_compatibility(self):
        """Gets the introspection_script_backward_compatibility of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether switch off client's introspection scripts (true value) and run all scripts that exists on server. Default value is false.  # noqa: E501

        :return: The introspection_script_backward_compatibility of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._introspection_script_backward_compatibility

    @introspection_script_backward_compatibility.setter
    def introspection_script_backward_compatibility(self, introspection_script_backward_compatibility):
        """Sets the introspection_script_backward_compatibility of this AppConfiguration.

        Boolean value specifying whether switch off client's introspection scripts (true value) and run all scripts that exists on server. Default value is false.  # noqa: E501

        :param introspection_script_backward_compatibility: The introspection_script_backward_compatibility of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._introspection_script_backward_compatibility = introspection_script_backward_compatibility

    @property
    def keep_authenticator_attributes_on_acr_change(self):
        """Gets the keep_authenticator_attributes_on_acr_change of this AppConfiguration.  # noqa: E501

        Boolean value specifying whether to keep authenticator attributes on ACR change.  # noqa: E501

        :return: The keep_authenticator_attributes_on_acr_change of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._keep_authenticator_attributes_on_acr_change

    @keep_authenticator_attributes_on_acr_change.setter
    def keep_authenticator_attributes_on_acr_change(self, keep_authenticator_attributes_on_acr_change):
        """Sets the keep_authenticator_attributes_on_acr_change of this AppConfiguration.

        Boolean value specifying whether to keep authenticator attributes on ACR change.  # noqa: E501

        :param keep_authenticator_attributes_on_acr_change: The keep_authenticator_attributes_on_acr_change of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._keep_authenticator_attributes_on_acr_change = keep_authenticator_attributes_on_acr_change

    @property
    def backchannel_client_id(self):
        """Gets the backchannel_client_id of this AppConfiguration.  # noqa: E501

        Backchannel Client Id.  # noqa: E501

        :return: The backchannel_client_id of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._backchannel_client_id

    @backchannel_client_id.setter
    def backchannel_client_id(self, backchannel_client_id):
        """Sets the backchannel_client_id of this AppConfiguration.

        Backchannel Client Id.  # noqa: E501

        :param backchannel_client_id: The backchannel_client_id of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._backchannel_client_id = backchannel_client_id

    @property
    def backchannel_redirect_uri(self):
        """Gets the backchannel_redirect_uri of this AppConfiguration.  # noqa: E501

        Backchannel Redirect Uri.  # noqa: E501

        :return: The backchannel_redirect_uri of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._backchannel_redirect_uri

    @backchannel_redirect_uri.setter
    def backchannel_redirect_uri(self, backchannel_redirect_uri):
        """Sets the backchannel_redirect_uri of this AppConfiguration.

        Backchannel Redirect Uri.  # noqa: E501

        :param backchannel_redirect_uri: The backchannel_redirect_uri of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._backchannel_redirect_uri = backchannel_redirect_uri

    @property
    def backchannel_authentication_endpoint(self):
        """Gets the backchannel_authentication_endpoint of this AppConfiguration.  # noqa: E501

        Backchannel Authentication Endpoint.  # noqa: E501

        :return: The backchannel_authentication_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._backchannel_authentication_endpoint

    @backchannel_authentication_endpoint.setter
    def backchannel_authentication_endpoint(self, backchannel_authentication_endpoint):
        """Sets the backchannel_authentication_endpoint of this AppConfiguration.

        Backchannel Authentication Endpoint.  # noqa: E501

        :param backchannel_authentication_endpoint: The backchannel_authentication_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._backchannel_authentication_endpoint = backchannel_authentication_endpoint

    @property
    def backchannel_device_registration_endpoint(self):
        """Gets the backchannel_device_registration_endpoint of this AppConfiguration.  # noqa: E501

        Backchannel Device Registration Endpoint.  # noqa: E501

        :return: The backchannel_device_registration_endpoint of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._backchannel_device_registration_endpoint

    @backchannel_device_registration_endpoint.setter
    def backchannel_device_registration_endpoint(self, backchannel_device_registration_endpoint):
        """Sets the backchannel_device_registration_endpoint of this AppConfiguration.

        Backchannel Device Registration Endpoint.  # noqa: E501

        :param backchannel_device_registration_endpoint: The backchannel_device_registration_endpoint of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._backchannel_device_registration_endpoint = backchannel_device_registration_endpoint

    @property
    def backchannel_token_delivery_modes_supported(self):
        """Gets the backchannel_token_delivery_modes_supported of this AppConfiguration.  # noqa: E501

        Backchannel Token Delivery Modes Supported.  # noqa: E501

        :return: The backchannel_token_delivery_modes_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._backchannel_token_delivery_modes_supported

    @backchannel_token_delivery_modes_supported.setter
    def backchannel_token_delivery_modes_supported(self, backchannel_token_delivery_modes_supported):
        """Sets the backchannel_token_delivery_modes_supported of this AppConfiguration.

        Backchannel Token Delivery Modes Supported.  # noqa: E501

        :param backchannel_token_delivery_modes_supported: The backchannel_token_delivery_modes_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._backchannel_token_delivery_modes_supported = backchannel_token_delivery_modes_supported

    @property
    def backchannel_authentication_request_signing_alg_values_supported(self):
        """Gets the backchannel_authentication_request_signing_alg_values_supported of this AppConfiguration.  # noqa: E501

        Backchannel Authentication Request Signing Alg Values Supported.  # noqa: E501

        :return: The backchannel_authentication_request_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._backchannel_authentication_request_signing_alg_values_supported

    @backchannel_authentication_request_signing_alg_values_supported.setter
    def backchannel_authentication_request_signing_alg_values_supported(self, backchannel_authentication_request_signing_alg_values_supported):
        """Sets the backchannel_authentication_request_signing_alg_values_supported of this AppConfiguration.

        Backchannel Authentication Request Signing Alg Values Supported.  # noqa: E501

        :param backchannel_authentication_request_signing_alg_values_supported: The backchannel_authentication_request_signing_alg_values_supported of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._backchannel_authentication_request_signing_alg_values_supported = backchannel_authentication_request_signing_alg_values_supported

    @property
    def backchannel_user_code_parameter_supported(self):
        """Gets the backchannel_user_code_parameter_supported of this AppConfiguration.  # noqa: E501

        Backchannel User Code Parameter Supported  # noqa: E501

        :return: The backchannel_user_code_parameter_supported of this AppConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._backchannel_user_code_parameter_supported

    @backchannel_user_code_parameter_supported.setter
    def backchannel_user_code_parameter_supported(self, backchannel_user_code_parameter_supported):
        """Sets the backchannel_user_code_parameter_supported of this AppConfiguration.

        Backchannel User Code Parameter Supported  # noqa: E501

        :param backchannel_user_code_parameter_supported: The backchannel_user_code_parameter_supported of this AppConfiguration.  # noqa: E501
        :type: bool
        """

        self._backchannel_user_code_parameter_supported = backchannel_user_code_parameter_supported

    @property
    def backchannel_binding_message_pattern(self):
        """Gets the backchannel_binding_message_pattern of this AppConfiguration.  # noqa: E501

        Backchannel Binding Message Pattern.  # noqa: E501

        :return: The backchannel_binding_message_pattern of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._backchannel_binding_message_pattern

    @backchannel_binding_message_pattern.setter
    def backchannel_binding_message_pattern(self, backchannel_binding_message_pattern):
        """Sets the backchannel_binding_message_pattern of this AppConfiguration.

        Backchannel Binding Message Pattern.  # noqa: E501

        :param backchannel_binding_message_pattern: The backchannel_binding_message_pattern of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._backchannel_binding_message_pattern = backchannel_binding_message_pattern

    @property
    def backchannel_authentication_response_expires_in(self):
        """Gets the backchannel_authentication_response_expires_in of this AppConfiguration.  # noqa: E501

        Backchannel Authentication Response Expires In.  # noqa: E501

        :return: The backchannel_authentication_response_expires_in of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._backchannel_authentication_response_expires_in

    @backchannel_authentication_response_expires_in.setter
    def backchannel_authentication_response_expires_in(self, backchannel_authentication_response_expires_in):
        """Sets the backchannel_authentication_response_expires_in of this AppConfiguration.

        Backchannel Authentication Response Expires In.  # noqa: E501

        :param backchannel_authentication_response_expires_in: The backchannel_authentication_response_expires_in of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._backchannel_authentication_response_expires_in = backchannel_authentication_response_expires_in

    @property
    def backchannel_authentication_response_interval(self):
        """Gets the backchannel_authentication_response_interval of this AppConfiguration.  # noqa: E501

        Backchannel Authentication Response Interval.  # noqa: E501

        :return: The backchannel_authentication_response_interval of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._backchannel_authentication_response_interval

    @backchannel_authentication_response_interval.setter
    def backchannel_authentication_response_interval(self, backchannel_authentication_response_interval):
        """Sets the backchannel_authentication_response_interval of this AppConfiguration.

        Backchannel Authentication Response Interval.  # noqa: E501

        :param backchannel_authentication_response_interval: The backchannel_authentication_response_interval of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._backchannel_authentication_response_interval = backchannel_authentication_response_interval

    @property
    def backchannel_login_hint_claims(self):
        """Gets the backchannel_login_hint_claims of this AppConfiguration.  # noqa: E501

        Backchannel Login Hint Claims.  # noqa: E501

        :return: The backchannel_login_hint_claims of this AppConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._backchannel_login_hint_claims

    @backchannel_login_hint_claims.setter
    def backchannel_login_hint_claims(self, backchannel_login_hint_claims):
        """Sets the backchannel_login_hint_claims of this AppConfiguration.

        Backchannel Login Hint Claims.  # noqa: E501

        :param backchannel_login_hint_claims: The backchannel_login_hint_claims of this AppConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._backchannel_login_hint_claims = backchannel_login_hint_claims

    @property
    def ciba_end_user_notification_config(self):
        """Gets the ciba_end_user_notification_config of this AppConfiguration.  # noqa: E501


        :return: The ciba_end_user_notification_config of this AppConfiguration.  # noqa: E501
        :rtype: AppConfigurationCibaEndUserNotificationConfig
        """
        return self._ciba_end_user_notification_config

    @ciba_end_user_notification_config.setter
    def ciba_end_user_notification_config(self, ciba_end_user_notification_config):
        """Sets the ciba_end_user_notification_config of this AppConfiguration.


        :param ciba_end_user_notification_config: The ciba_end_user_notification_config of this AppConfiguration.  # noqa: E501
        :type: AppConfigurationCibaEndUserNotificationConfig
        """

        self._ciba_end_user_notification_config = ciba_end_user_notification_config

    @property
    def backchannel_requests_processor_job_interval_sec(self):
        """Gets the backchannel_requests_processor_job_interval_sec of this AppConfiguration.  # noqa: E501

        Specifies the allowable elapsed time in seconds backchannel request processor executes.  # noqa: E501

        :return: The backchannel_requests_processor_job_interval_sec of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._backchannel_requests_processor_job_interval_sec

    @backchannel_requests_processor_job_interval_sec.setter
    def backchannel_requests_processor_job_interval_sec(self, backchannel_requests_processor_job_interval_sec):
        """Sets the backchannel_requests_processor_job_interval_sec of this AppConfiguration.

        Specifies the allowable elapsed time in seconds backchannel request processor executes.  # noqa: E501

        :param backchannel_requests_processor_job_interval_sec: The backchannel_requests_processor_job_interval_sec of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._backchannel_requests_processor_job_interval_sec = backchannel_requests_processor_job_interval_sec

    @property
    def backchannel_requests_processor_job_chunk_size(self):
        """Gets the backchannel_requests_processor_job_chunk_size of this AppConfiguration.  # noqa: E501

        Each backchannel request processor iteration fetches chunk of data to be processed.  # noqa: E501

        :return: The backchannel_requests_processor_job_chunk_size of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._backchannel_requests_processor_job_chunk_size

    @backchannel_requests_processor_job_chunk_size.setter
    def backchannel_requests_processor_job_chunk_size(self, backchannel_requests_processor_job_chunk_size):
        """Sets the backchannel_requests_processor_job_chunk_size of this AppConfiguration.

        Each backchannel request processor iteration fetches chunk of data to be processed.  # noqa: E501

        :param backchannel_requests_processor_job_chunk_size: The backchannel_requests_processor_job_chunk_size of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._backchannel_requests_processor_job_chunk_size = backchannel_requests_processor_job_chunk_size

    @property
    def ciba_grant_life_extra_time_sec(self):
        """Gets the ciba_grant_life_extra_time_sec of this AppConfiguration.  # noqa: E501

        Specifies the CIBA Grant life extra time in seconds.  # noqa: E501

        :return: The ciba_grant_life_extra_time_sec of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._ciba_grant_life_extra_time_sec

    @ciba_grant_life_extra_time_sec.setter
    def ciba_grant_life_extra_time_sec(self, ciba_grant_life_extra_time_sec):
        """Sets the ciba_grant_life_extra_time_sec of this AppConfiguration.

        Specifies the CIBA Grant life extra time in seconds.  # noqa: E501

        :param ciba_grant_life_extra_time_sec: The ciba_grant_life_extra_time_sec of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._ciba_grant_life_extra_time_sec = ciba_grant_life_extra_time_sec

    @property
    def ciba_max_expiration_time_allowed_sec(self):
        """Gets the ciba_max_expiration_time_allowed_sec of this AppConfiguration.  # noqa: E501

        Specifies the CIBA token expiration time in seconds.  # noqa: E501

        :return: The ciba_max_expiration_time_allowed_sec of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._ciba_max_expiration_time_allowed_sec

    @ciba_max_expiration_time_allowed_sec.setter
    def ciba_max_expiration_time_allowed_sec(self, ciba_max_expiration_time_allowed_sec):
        """Sets the ciba_max_expiration_time_allowed_sec of this AppConfiguration.

        Specifies the CIBA token expiration time in seconds.  # noqa: E501

        :param ciba_max_expiration_time_allowed_sec: The ciba_max_expiration_time_allowed_sec of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._ciba_max_expiration_time_allowed_sec = ciba_max_expiration_time_allowed_sec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
