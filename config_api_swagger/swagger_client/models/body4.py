# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'port': 'int',
        'requires_ssl': 'bool',
        'trust_host': 'bool',
        'from_name': 'str',
        'from_email_address': 'str',
        'requires_authentication': 'bool',
        'user_name': 'str',
        'password': 'str'
    }

    attribute_map = {
        'host': 'host',
        'port': 'port',
        'requires_ssl': 'requires-ssl',
        'trust_host': 'trust-host',
        'from_name': 'from-name',
        'from_email_address': 'from-email-address',
        'requires_authentication': 'requires-authentication',
        'user_name': 'user-name',
        'password': 'password'
    }

    def __init__(self, host=None, port=None, requires_ssl=None, trust_host=None, from_name=None, from_email_address=None, requires_authentication=None, user_name=None, password=None):  # noqa: E501
        """Body4 - a model defined in Swagger"""  # noqa: E501
        self._host = None
        self._port = None
        self._requires_ssl = None
        self._trust_host = None
        self._from_name = None
        self._from_email_address = None
        self._requires_authentication = None
        self._user_name = None
        self._password = None
        self.discriminator = None
        if host is not None:
            self.host = host
        if port is not None:
            self.port = port
        if requires_ssl is not None:
            self.requires_ssl = requires_ssl
        if trust_host is not None:
            self.trust_host = trust_host
        if from_name is not None:
            self.from_name = from_name
        if from_email_address is not None:
            self.from_email_address = from_email_address
        if requires_authentication is not None:
            self.requires_authentication = requires_authentication
        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password

    @property
    def host(self):
        """Gets the host of this Body4.  # noqa: E501

        Hostname of the SMTP server.  # noqa: E501

        :return: The host of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Body4.

        Hostname of the SMTP server.  # noqa: E501

        :param host: The host of this Body4.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this Body4.  # noqa: E501

        Port number of the SMTP server.  # noqa: E501

        :return: The port of this Body4.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Body4.

        Port number of the SMTP server.  # noqa: E501

        :param port: The port of this Body4.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def requires_ssl(self):
        """Gets the requires_ssl of this Body4.  # noqa: E501

        Boolean value with default value false. If true, SSL will be enabled.  # noqa: E501

        :return: The requires_ssl of this Body4.  # noqa: E501
        :rtype: bool
        """
        return self._requires_ssl

    @requires_ssl.setter
    def requires_ssl(self, requires_ssl):
        """Sets the requires_ssl of this Body4.

        Boolean value with default value false. If true, SSL will be enabled.  # noqa: E501

        :param requires_ssl: The requires_ssl of this Body4.  # noqa: E501
        :type: bool
        """

        self._requires_ssl = requires_ssl

    @property
    def trust_host(self):
        """Gets the trust_host of this Body4.  # noqa: E501

        Boolean value with default value false.  # noqa: E501

        :return: The trust_host of this Body4.  # noqa: E501
        :rtype: bool
        """
        return self._trust_host

    @trust_host.setter
    def trust_host(self, trust_host):
        """Sets the trust_host of this Body4.

        Boolean value with default value false.  # noqa: E501

        :param trust_host: The trust_host of this Body4.  # noqa: E501
        :type: bool
        """

        self._trust_host = trust_host

    @property
    def from_name(self):
        """Gets the from_name of this Body4.  # noqa: E501

        Name of the sender.  # noqa: E501

        :return: The from_name of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this Body4.

        Name of the sender.  # noqa: E501

        :param from_name: The from_name of this Body4.  # noqa: E501
        :type: str
        """

        self._from_name = from_name

    @property
    def from_email_address(self):
        """Gets the from_email_address of this Body4.  # noqa: E501

        Email Address of the Sender.  # noqa: E501

        :return: The from_email_address of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._from_email_address

    @from_email_address.setter
    def from_email_address(self, from_email_address):
        """Sets the from_email_address of this Body4.

        Email Address of the Sender.  # noqa: E501

        :param from_email_address: The from_email_address of this Body4.  # noqa: E501
        :type: str
        """

        self._from_email_address = from_email_address

    @property
    def requires_authentication(self):
        """Gets the requires_authentication of this Body4.  # noqa: E501

        Boolean value with default value false. It true it will enable sender authentication.  # noqa: E501

        :return: The requires_authentication of this Body4.  # noqa: E501
        :rtype: bool
        """
        return self._requires_authentication

    @requires_authentication.setter
    def requires_authentication(self, requires_authentication):
        """Sets the requires_authentication of this Body4.

        Boolean value with default value false. It true it will enable sender authentication.  # noqa: E501

        :param requires_authentication: The requires_authentication of this Body4.  # noqa: E501
        :type: bool
        """

        self._requires_authentication = requires_authentication

    @property
    def user_name(self):
        """Gets the user_name of this Body4.  # noqa: E501

        Username of the SMTP.  # noqa: E501

        :return: The user_name of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Body4.

        Username of the SMTP.  # noqa: E501

        :param user_name: The user_name of this Body4.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this Body4.  # noqa: E501

        Password for the SMTP.  # noqa: E501

        :return: The password of this Body4.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Body4.

        Password for the SMTP.  # noqa: E501

        :param password: The password of this Body4.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
