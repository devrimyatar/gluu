# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tls_client_auth_subject_dn': 'str',
        'run_introspection_script_before_access_token_as_jwt_creation_and_include_claims': 'bool',
        'keep_client_authorization_after_expiration': 'bool',
        'allow_spontaneous_scopes': 'bool',
        'spontaneous_scopes': 'list[str]',
        'spontaneous_scope_script_dns': 'list[str]',
        'backchannel_logout_uri': 'list[str]',
        'backchannel_logout_session_required': 'bool',
        'additional_audience': 'list[str]',
        'post_authn_scripts': 'list[str]',
        'consent_gathering_scripts': 'list[str]',
        'introspection_scripts': 'list[str]',
        'rpt_claims_scripts': 'list[str]'
    }

    attribute_map = {
        'tls_client_auth_subject_dn': 'tlsClientAuthSubjectDn',
        'run_introspection_script_before_access_token_as_jwt_creation_and_include_claims': 'runIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims',
        'keep_client_authorization_after_expiration': 'keepClientAuthorizationAfterExpiration',
        'allow_spontaneous_scopes': 'allowSpontaneousScopes',
        'spontaneous_scopes': 'spontaneousScopes',
        'spontaneous_scope_script_dns': 'spontaneousScopeScriptDns',
        'backchannel_logout_uri': 'backchannelLogoutUri',
        'backchannel_logout_session_required': 'backchannelLogoutSessionRequired',
        'additional_audience': 'additionalAudience',
        'post_authn_scripts': 'postAuthnScripts',
        'consent_gathering_scripts': 'consentGatheringScripts',
        'introspection_scripts': 'introspectionScripts',
        'rpt_claims_scripts': 'rptClaimsScripts'
    }

    def __init__(self, tls_client_auth_subject_dn=None, run_introspection_script_before_access_token_as_jwt_creation_and_include_claims=None, keep_client_authorization_after_expiration=None, allow_spontaneous_scopes=None, spontaneous_scopes=None, spontaneous_scope_script_dns=None, backchannel_logout_uri=None, backchannel_logout_session_required=None, additional_audience=None, post_authn_scripts=None, consent_gathering_scripts=None, introspection_scripts=None, rpt_claims_scripts=None):  # noqa: E501
        """ClientAttributes - a model defined in Swagger"""  # noqa: E501
        self._tls_client_auth_subject_dn = None
        self._run_introspection_script_before_access_token_as_jwt_creation_and_include_claims = None
        self._keep_client_authorization_after_expiration = None
        self._allow_spontaneous_scopes = None
        self._spontaneous_scopes = None
        self._spontaneous_scope_script_dns = None
        self._backchannel_logout_uri = None
        self._backchannel_logout_session_required = None
        self._additional_audience = None
        self._post_authn_scripts = None
        self._consent_gathering_scripts = None
        self._introspection_scripts = None
        self._rpt_claims_scripts = None
        self.discriminator = None
        if tls_client_auth_subject_dn is not None:
            self.tls_client_auth_subject_dn = tls_client_auth_subject_dn
        if run_introspection_script_before_access_token_as_jwt_creation_and_include_claims is not None:
            self.run_introspection_script_before_access_token_as_jwt_creation_and_include_claims = run_introspection_script_before_access_token_as_jwt_creation_and_include_claims
        if keep_client_authorization_after_expiration is not None:
            self.keep_client_authorization_after_expiration = keep_client_authorization_after_expiration
        if allow_spontaneous_scopes is not None:
            self.allow_spontaneous_scopes = allow_spontaneous_scopes
        if spontaneous_scopes is not None:
            self.spontaneous_scopes = spontaneous_scopes
        if spontaneous_scope_script_dns is not None:
            self.spontaneous_scope_script_dns = spontaneous_scope_script_dns
        if backchannel_logout_uri is not None:
            self.backchannel_logout_uri = backchannel_logout_uri
        if backchannel_logout_session_required is not None:
            self.backchannel_logout_session_required = backchannel_logout_session_required
        if additional_audience is not None:
            self.additional_audience = additional_audience
        if post_authn_scripts is not None:
            self.post_authn_scripts = post_authn_scripts
        if consent_gathering_scripts is not None:
            self.consent_gathering_scripts = consent_gathering_scripts
        if introspection_scripts is not None:
            self.introspection_scripts = introspection_scripts
        if rpt_claims_scripts is not None:
            self.rpt_claims_scripts = rpt_claims_scripts

    @property
    def tls_client_auth_subject_dn(self):
        """Gets the tls_client_auth_subject_dn of this ClientAttributes.  # noqa: E501


        :return: The tls_client_auth_subject_dn of this ClientAttributes.  # noqa: E501
        :rtype: str
        """
        return self._tls_client_auth_subject_dn

    @tls_client_auth_subject_dn.setter
    def tls_client_auth_subject_dn(self, tls_client_auth_subject_dn):
        """Sets the tls_client_auth_subject_dn of this ClientAttributes.


        :param tls_client_auth_subject_dn: The tls_client_auth_subject_dn of this ClientAttributes.  # noqa: E501
        :type: str
        """

        self._tls_client_auth_subject_dn = tls_client_auth_subject_dn

    @property
    def run_introspection_script_before_access_token_as_jwt_creation_and_include_claims(self):
        """Gets the run_introspection_script_before_access_token_as_jwt_creation_and_include_claims of this ClientAttributes.  # noqa: E501

        Run Introspection Script Before Access Token as Jwt Creation and Include Claims. Default value is false.  # noqa: E501

        :return: The run_introspection_script_before_access_token_as_jwt_creation_and_include_claims of this ClientAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._run_introspection_script_before_access_token_as_jwt_creation_and_include_claims

    @run_introspection_script_before_access_token_as_jwt_creation_and_include_claims.setter
    def run_introspection_script_before_access_token_as_jwt_creation_and_include_claims(self, run_introspection_script_before_access_token_as_jwt_creation_and_include_claims):
        """Sets the run_introspection_script_before_access_token_as_jwt_creation_and_include_claims of this ClientAttributes.

        Run Introspection Script Before Access Token as Jwt Creation and Include Claims. Default value is false.  # noqa: E501

        :param run_introspection_script_before_access_token_as_jwt_creation_and_include_claims: The run_introspection_script_before_access_token_as_jwt_creation_and_include_claims of this ClientAttributes.  # noqa: E501
        :type: bool
        """

        self._run_introspection_script_before_access_token_as_jwt_creation_and_include_claims = run_introspection_script_before_access_token_as_jwt_creation_and_include_claims

    @property
    def keep_client_authorization_after_expiration(self):
        """Gets the keep_client_authorization_after_expiration of this ClientAttributes.  # noqa: E501

        Keep Client Authorization After Expiration.  # noqa: E501

        :return: The keep_client_authorization_after_expiration of this ClientAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._keep_client_authorization_after_expiration

    @keep_client_authorization_after_expiration.setter
    def keep_client_authorization_after_expiration(self, keep_client_authorization_after_expiration):
        """Sets the keep_client_authorization_after_expiration of this ClientAttributes.

        Keep Client Authorization After Expiration.  # noqa: E501

        :param keep_client_authorization_after_expiration: The keep_client_authorization_after_expiration of this ClientAttributes.  # noqa: E501
        :type: bool
        """

        self._keep_client_authorization_after_expiration = keep_client_authorization_after_expiration

    @property
    def allow_spontaneous_scopes(self):
        """Gets the allow_spontaneous_scopes of this ClientAttributes.  # noqa: E501


        :return: The allow_spontaneous_scopes of this ClientAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._allow_spontaneous_scopes

    @allow_spontaneous_scopes.setter
    def allow_spontaneous_scopes(self, allow_spontaneous_scopes):
        """Sets the allow_spontaneous_scopes of this ClientAttributes.


        :param allow_spontaneous_scopes: The allow_spontaneous_scopes of this ClientAttributes.  # noqa: E501
        :type: bool
        """

        self._allow_spontaneous_scopes = allow_spontaneous_scopes

    @property
    def spontaneous_scopes(self):
        """Gets the spontaneous_scopes of this ClientAttributes.  # noqa: E501


        :return: The spontaneous_scopes of this ClientAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._spontaneous_scopes

    @spontaneous_scopes.setter
    def spontaneous_scopes(self, spontaneous_scopes):
        """Sets the spontaneous_scopes of this ClientAttributes.


        :param spontaneous_scopes: The spontaneous_scopes of this ClientAttributes.  # noqa: E501
        :type: list[str]
        """

        self._spontaneous_scopes = spontaneous_scopes

    @property
    def spontaneous_scope_script_dns(self):
        """Gets the spontaneous_scope_script_dns of this ClientAttributes.  # noqa: E501


        :return: The spontaneous_scope_script_dns of this ClientAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._spontaneous_scope_script_dns

    @spontaneous_scope_script_dns.setter
    def spontaneous_scope_script_dns(self, spontaneous_scope_script_dns):
        """Sets the spontaneous_scope_script_dns of this ClientAttributes.


        :param spontaneous_scope_script_dns: The spontaneous_scope_script_dns of this ClientAttributes.  # noqa: E501
        :type: list[str]
        """

        self._spontaneous_scope_script_dns = spontaneous_scope_script_dns

    @property
    def backchannel_logout_uri(self):
        """Gets the backchannel_logout_uri of this ClientAttributes.  # noqa: E501


        :return: The backchannel_logout_uri of this ClientAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._backchannel_logout_uri

    @backchannel_logout_uri.setter
    def backchannel_logout_uri(self, backchannel_logout_uri):
        """Sets the backchannel_logout_uri of this ClientAttributes.


        :param backchannel_logout_uri: The backchannel_logout_uri of this ClientAttributes.  # noqa: E501
        :type: list[str]
        """

        self._backchannel_logout_uri = backchannel_logout_uri

    @property
    def backchannel_logout_session_required(self):
        """Gets the backchannel_logout_session_required of this ClientAttributes.  # noqa: E501


        :return: The backchannel_logout_session_required of this ClientAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._backchannel_logout_session_required

    @backchannel_logout_session_required.setter
    def backchannel_logout_session_required(self, backchannel_logout_session_required):
        """Sets the backchannel_logout_session_required of this ClientAttributes.


        :param backchannel_logout_session_required: The backchannel_logout_session_required of this ClientAttributes.  # noqa: E501
        :type: bool
        """

        self._backchannel_logout_session_required = backchannel_logout_session_required

    @property
    def additional_audience(self):
        """Gets the additional_audience of this ClientAttributes.  # noqa: E501


        :return: The additional_audience of this ClientAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_audience

    @additional_audience.setter
    def additional_audience(self, additional_audience):
        """Sets the additional_audience of this ClientAttributes.


        :param additional_audience: The additional_audience of this ClientAttributes.  # noqa: E501
        :type: list[str]
        """

        self._additional_audience = additional_audience

    @property
    def post_authn_scripts(self):
        """Gets the post_authn_scripts of this ClientAttributes.  # noqa: E501


        :return: The post_authn_scripts of this ClientAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._post_authn_scripts

    @post_authn_scripts.setter
    def post_authn_scripts(self, post_authn_scripts):
        """Sets the post_authn_scripts of this ClientAttributes.


        :param post_authn_scripts: The post_authn_scripts of this ClientAttributes.  # noqa: E501
        :type: list[str]
        """

        self._post_authn_scripts = post_authn_scripts

    @property
    def consent_gathering_scripts(self):
        """Gets the consent_gathering_scripts of this ClientAttributes.  # noqa: E501


        :return: The consent_gathering_scripts of this ClientAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._consent_gathering_scripts

    @consent_gathering_scripts.setter
    def consent_gathering_scripts(self, consent_gathering_scripts):
        """Sets the consent_gathering_scripts of this ClientAttributes.


        :param consent_gathering_scripts: The consent_gathering_scripts of this ClientAttributes.  # noqa: E501
        :type: list[str]
        """

        self._consent_gathering_scripts = consent_gathering_scripts

    @property
    def introspection_scripts(self):
        """Gets the introspection_scripts of this ClientAttributes.  # noqa: E501


        :return: The introspection_scripts of this ClientAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._introspection_scripts

    @introspection_scripts.setter
    def introspection_scripts(self, introspection_scripts):
        """Sets the introspection_scripts of this ClientAttributes.


        :param introspection_scripts: The introspection_scripts of this ClientAttributes.  # noqa: E501
        :type: list[str]
        """

        self._introspection_scripts = introspection_scripts

    @property
    def rpt_claims_scripts(self):
        """Gets the rpt_claims_scripts of this ClientAttributes.  # noqa: E501


        :return: The rpt_claims_scripts of this ClientAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._rpt_claims_scripts

    @rpt_claims_scripts.setter
    def rpt_claims_scripts(self, rpt_claims_scripts):
        """Sets the rpt_claims_scripts of this ClientAttributes.


        :param rpt_claims_scripts: The rpt_claims_scripts of this ClientAttributes.  # noqa: E501
        :type: list[str]
        """

        self._rpt_claims_scripts = rpt_claims_scripts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
