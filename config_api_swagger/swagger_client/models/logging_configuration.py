# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoggingConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logging_level': 'str',
        'logging_layout': 'str',
        'http_logging_enabled': 'bool',
        'disable_jdk_logger': 'bool',
        'enabled_o_auth_audit_logging': 'bool',
        'external_logger_configuration': 'str',
        'http_logging_exlude_paths': 'list[str]'
    }

    attribute_map = {
        'logging_level': 'loggingLevel',
        'logging_layout': 'loggingLayout',
        'http_logging_enabled': 'httpLoggingEnabled',
        'disable_jdk_logger': 'disableJdkLogger',
        'enabled_o_auth_audit_logging': 'enabledOAuthAuditLogging',
        'external_logger_configuration': 'externalLoggerConfiguration',
        'http_logging_exlude_paths': 'httpLoggingExludePaths'
    }

    def __init__(self, logging_level=None, logging_layout=None, http_logging_enabled=None, disable_jdk_logger=None, enabled_o_auth_audit_logging=None, external_logger_configuration=None, http_logging_exlude_paths=None):  # noqa: E501
        """LoggingConfiguration - a model defined in Swagger"""  # noqa: E501
        self._logging_level = None
        self._logging_layout = None
        self._http_logging_enabled = None
        self._disable_jdk_logger = None
        self._enabled_o_auth_audit_logging = None
        self._external_logger_configuration = None
        self._http_logging_exlude_paths = None
        self.discriminator = None
        if logging_level is not None:
            self.logging_level = logging_level
        if logging_layout is not None:
            self.logging_layout = logging_layout
        if http_logging_enabled is not None:
            self.http_logging_enabled = http_logging_enabled
        if disable_jdk_logger is not None:
            self.disable_jdk_logger = disable_jdk_logger
        if enabled_o_auth_audit_logging is not None:
            self.enabled_o_auth_audit_logging = enabled_o_auth_audit_logging
        if external_logger_configuration is not None:
            self.external_logger_configuration = external_logger_configuration
        if http_logging_exlude_paths is not None:
            self.http_logging_exlude_paths = http_logging_exlude_paths

    @property
    def logging_level(self):
        """Gets the logging_level of this LoggingConfiguration.  # noqa: E501

        Logging level for Jans Authorization Server logger.  # noqa: E501

        :return: The logging_level of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._logging_level

    @logging_level.setter
    def logging_level(self, logging_level):
        """Sets the logging_level of this LoggingConfiguration.

        Logging level for Jans Authorization Server logger.  # noqa: E501

        :param logging_level: The logging_level of this LoggingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "OFF"]  # noqa: E501
        if logging_level not in allowed_values:
            raise ValueError(
                "Invalid value for `logging_level` ({0}), must be one of {1}"  # noqa: E501
                .format(logging_level, allowed_values)
            )

        self._logging_level = logging_level

    @property
    def logging_layout(self):
        """Gets the logging_layout of this LoggingConfiguration.  # noqa: E501

        Logging layout used for Jans Authorization Server loggers.  # noqa: E501

        :return: The logging_layout of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._logging_layout

    @logging_layout.setter
    def logging_layout(self, logging_layout):
        """Sets the logging_layout of this LoggingConfiguration.

        Logging layout used for Jans Authorization Server loggers.  # noqa: E501

        :param logging_layout: The logging_layout of this LoggingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["text", "json"]  # noqa: E501
        if logging_layout not in allowed_values:
            raise ValueError(
                "Invalid value for `logging_layout` ({0}), must be one of {1}"  # noqa: E501
                .format(logging_layout, allowed_values)
            )

        self._logging_layout = logging_layout

    @property
    def http_logging_enabled(self):
        """Gets the http_logging_enabled of this LoggingConfiguration.  # noqa: E501

        To enable http request/response logging.  # noqa: E501

        :return: The http_logging_enabled of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._http_logging_enabled

    @http_logging_enabled.setter
    def http_logging_enabled(self, http_logging_enabled):
        """Sets the http_logging_enabled of this LoggingConfiguration.

        To enable http request/response logging.  # noqa: E501

        :param http_logging_enabled: The http_logging_enabled of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._http_logging_enabled = http_logging_enabled

    @property
    def disable_jdk_logger(self):
        """Gets the disable_jdk_logger of this LoggingConfiguration.  # noqa: E501

        To enable/disable Jdk logging.  # noqa: E501

        :return: The disable_jdk_logger of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._disable_jdk_logger

    @disable_jdk_logger.setter
    def disable_jdk_logger(self, disable_jdk_logger):
        """Sets the disable_jdk_logger of this LoggingConfiguration.

        To enable/disable Jdk logging.  # noqa: E501

        :param disable_jdk_logger: The disable_jdk_logger of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._disable_jdk_logger = disable_jdk_logger

    @property
    def enabled_o_auth_audit_logging(self):
        """Gets the enabled_o_auth_audit_logging of this LoggingConfiguration.  # noqa: E501

        To enable/disable OAuth audit logging.  # noqa: E501

        :return: The enabled_o_auth_audit_logging of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enabled_o_auth_audit_logging

    @enabled_o_auth_audit_logging.setter
    def enabled_o_auth_audit_logging(self, enabled_o_auth_audit_logging):
        """Sets the enabled_o_auth_audit_logging of this LoggingConfiguration.

        To enable/disable OAuth audit logging.  # noqa: E501

        :param enabled_o_auth_audit_logging: The enabled_o_auth_audit_logging of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._enabled_o_auth_audit_logging = enabled_o_auth_audit_logging

    @property
    def external_logger_configuration(self):
        """Gets the external_logger_configuration of this LoggingConfiguration.  # noqa: E501

        Path to external log4j2 configuration file.  # noqa: E501

        :return: The external_logger_configuration of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._external_logger_configuration

    @external_logger_configuration.setter
    def external_logger_configuration(self, external_logger_configuration):
        """Sets the external_logger_configuration of this LoggingConfiguration.

        Path to external log4j2 configuration file.  # noqa: E501

        :param external_logger_configuration: The external_logger_configuration of this LoggingConfiguration.  # noqa: E501
        :type: str
        """

        self._external_logger_configuration = external_logger_configuration

    @property
    def http_logging_exlude_paths(self):
        """Gets the http_logging_exlude_paths of this LoggingConfiguration.  # noqa: E501

        List of paths to exclude from logger.  # noqa: E501

        :return: The http_logging_exlude_paths of this LoggingConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._http_logging_exlude_paths

    @http_logging_exlude_paths.setter
    def http_logging_exlude_paths(self, http_logging_exlude_paths):
        """Sets the http_logging_exlude_paths of this LoggingConfiguration.

        List of paths to exclude from logger.  # noqa: E501

        :param http_logging_exlude_paths: The http_logging_exlude_paths of this LoggingConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._http_logging_exlude_paths = http_logging_exlude_paths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoggingConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoggingConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
