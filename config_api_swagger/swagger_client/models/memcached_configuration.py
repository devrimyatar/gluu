# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemcachedConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'servers': 'str',
        'max_operation_queue_length': 'int',
        'buffer_size': 'int',
        'default_put_expiration': 'int',
        'connection_factory_type': 'str'
    }

    attribute_map = {
        'servers': 'servers',
        'max_operation_queue_length': 'maxOperationQueueLength',
        'buffer_size': 'bufferSize',
        'default_put_expiration': 'defaultPutExpiration',
        'connection_factory_type': 'connectionFactoryType'
    }

    def __init__(self, servers=None, max_operation_queue_length=None, buffer_size=None, default_put_expiration=None, connection_factory_type=None):  # noqa: E501
        """MemcachedConfiguration - a model defined in Swagger"""  # noqa: E501
        self._servers = None
        self._max_operation_queue_length = None
        self._buffer_size = None
        self._default_put_expiration = None
        self._connection_factory_type = None
        self.discriminator = None
        if servers is not None:
            self.servers = servers
        if max_operation_queue_length is not None:
            self.max_operation_queue_length = max_operation_queue_length
        if buffer_size is not None:
            self.buffer_size = buffer_size
        if default_put_expiration is not None:
            self.default_put_expiration = default_put_expiration
        if connection_factory_type is not None:
            self.connection_factory_type = connection_factory_type

    @property
    def servers(self):
        """Gets the servers of this MemcachedConfiguration.  # noqa: E501

        Server details separated by spaces.  # noqa: E501

        :return: The servers of this MemcachedConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this MemcachedConfiguration.

        Server details separated by spaces.  # noqa: E501

        :param servers: The servers of this MemcachedConfiguration.  # noqa: E501
        :type: str
        """

        self._servers = servers

    @property
    def max_operation_queue_length(self):
        """Gets the max_operation_queue_length of this MemcachedConfiguration.  # noqa: E501

        Maximum operation Queue Length.  # noqa: E501

        :return: The max_operation_queue_length of this MemcachedConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_operation_queue_length

    @max_operation_queue_length.setter
    def max_operation_queue_length(self, max_operation_queue_length):
        """Sets the max_operation_queue_length of this MemcachedConfiguration.

        Maximum operation Queue Length.  # noqa: E501

        :param max_operation_queue_length: The max_operation_queue_length of this MemcachedConfiguration.  # noqa: E501
        :type: int
        """

        self._max_operation_queue_length = max_operation_queue_length

    @property
    def buffer_size(self):
        """Gets the buffer_size of this MemcachedConfiguration.  # noqa: E501

        Buffer Size.  # noqa: E501

        :return: The buffer_size of this MemcachedConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._buffer_size

    @buffer_size.setter
    def buffer_size(self, buffer_size):
        """Sets the buffer_size of this MemcachedConfiguration.

        Buffer Size.  # noqa: E501

        :param buffer_size: The buffer_size of this MemcachedConfiguration.  # noqa: E501
        :type: int
        """

        self._buffer_size = buffer_size

    @property
    def default_put_expiration(self):
        """Gets the default_put_expiration of this MemcachedConfiguration.  # noqa: E501

        Expiration timeout value.  # noqa: E501

        :return: The default_put_expiration of this MemcachedConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._default_put_expiration

    @default_put_expiration.setter
    def default_put_expiration(self, default_put_expiration):
        """Sets the default_put_expiration of this MemcachedConfiguration.

        Expiration timeout value.  # noqa: E501

        :param default_put_expiration: The default_put_expiration of this MemcachedConfiguration.  # noqa: E501
        :type: int
        """

        self._default_put_expiration = default_put_expiration

    @property
    def connection_factory_type(self):
        """Gets the connection_factory_type of this MemcachedConfiguration.  # noqa: E501

        The MemcachedConnectionFactoryType Type.  # noqa: E501

        :return: The connection_factory_type of this MemcachedConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._connection_factory_type

    @connection_factory_type.setter
    def connection_factory_type(self, connection_factory_type):
        """Sets the connection_factory_type of this MemcachedConfiguration.

        The MemcachedConnectionFactoryType Type.  # noqa: E501

        :param connection_factory_type: The connection_factory_type of this MemcachedConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT", "BINARY"]  # noqa: E501
        if connection_factory_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_factory_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_factory_type, allowed_values)
            )

        self._connection_factory_type = connection_factory_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemcachedConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemcachedConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
